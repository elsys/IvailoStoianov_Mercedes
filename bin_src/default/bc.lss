
bc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000064d2  00006546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f8c  00800116  000064e8  0000655c  2**0
                  ALLOC
  3 .stab         000019f8  00000000  00000000  0000655c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000333  00000000  00000000  00007f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00008287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000929  00000000  00000000  000083a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000027d9  00000000  00000000  00008cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b4c  00000000  00000000  0000b4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022bb  00000000  00000000  0000bff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000430  00000000  00000000  0000e2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000098b  00000000  00000000  0000e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001169  00000000  00000000  0000f06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__ctors_end>
       4:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
       8:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
       c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      10:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      14:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__vector_5>
      18:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      1c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      20:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      24:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      28:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__vector_10>
      2c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      30:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      34:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      38:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      3c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      40:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      44:	0c 94 1d 1d 	jmp	0x3a3a	; 0x3a3a <__vector_17>
      48:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      4c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      50:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      54:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      58:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      5c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      60:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      64:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      68:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      6c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      70:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      74:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      78:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      7c:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      80:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      84:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      88:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      8c:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__vector_35>
      90:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__bad_interrupt>
      94:	ea 20       	and	r14, r10
      96:	e1 20       	and	r14, r1
      98:	d8 20       	and	r13, r8
      9a:	cf 20       	and	r12, r15
      9c:	c6 20       	and	r12, r6
      9e:	bd 20       	and	r11, r13
      a0:	b4 20       	and	r11, r4
      a2:	ab 20       	and	r10, r11
      a4:	a2 20       	and	r10, r2
      a6:	99 20       	and	r9, r9
      a8:	90 20       	and	r9, r0
      aa:	87 20       	and	r8, r7
      ac:	7e 20       	and	r7, r14
      ae:	75 20       	and	r7, r5
      b0:	6c 20       	and	r6, r12
      b2:	63 20       	and	r6, r3
      b4:	5a 20       	and	r5, r10
      b6:	51 20       	and	r5, r1
      b8:	48 20       	and	r4, r8
      ba:	24 20       	and	r2, r4

000000bc <kmh>:
      bc:	20 2f 48 00                                          /H.

000000c0 <rpm>:
      c0:	52 50 4d 00                                         RPM.

000000c4 <fuel>:
      c4:	46 55 45 4c 00                                      FUEL.

000000c9 <temp>:
      c9:	54 45 4d 50 00                                      TEMP.

000000ce <perc>:
      ce:	25 00                                               %.

000000d0 <litre>:
      d0:	4c 00                                               L.

000000d2 <cons>:
      d2:	43 4f 4e 53 55 4d 50 54 49 4f 4e 00                 CONSUMPTION.

000000de <dpoint>:
      de:	2e 00                                               ..

000000e0 <lph1>:
      e0:	6c 2f 00                                            l/.

000000e3 <lph2>:
      e3:	31 30 30 00                                         100.

000000e7 <kmleft>:
      e7:	4b 4d 20 4c 45 46 54 00                             KM LEFT.

000000ef <distance>:
      ef:	44 49 53 54 41 4e 43 45 00                          DISTANCE.

000000f8 <clr_distance>:
      f8:	20 20 20 20 20 20 20 20 00                                  .

00000101 <trip>:
     101:	54 52 49 50 00                                      TRIP.

00000106 <km>:
     106:	4b 4d 00                                            KM.

00000109 <days>:
     109:	4d 6f 6e 00 54 75 65 00 57 65 64 00 54 68 75 00     Mon.Tue.Wed.Thu.
     119:	46 72 69 00 53 61 74 00 53 75 6e 00                 Fri.Sat.Sun.

00000125 <months>:
     125:	4a 61 6e 00 46 65 62 00 4d 61 72 00 41 70 72 00     Jan.Feb.Mar.Apr.
     135:	4d 61 79 00 4a 75 6e 00 4a 75 6c 00 41 75 67 00     May.Jun.Jul.Aug.
     145:	53 65 70 00 4f 63 74 00 4e 6f 76 00 44 65 63 00     Sep.Oct.Nov.Dec.

00000155 <pointers2>:
     155:	5e 5e 00                                            ^^.

00000158 <pointers3>:
     158:	5e 5e 5e 00                                         ^^^.

0000015c <spaces20>:
     15c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     16c:	20 20 20 20 00                                          .

00000171 <adjust>:
     171:	41 64 6a 75 73 74 20 74 68 65 20 74 69 6d 65 00     Adjust the time.

00000181 <ClockTaskTcb>:
     181:	ea 03 c5 1a 4d 01 05                                ....M..

00000188 <ADCTaskTcb>:
     188:	ff 02 ff 19 b4 01 04                                .......

0000018f <GearTaskTcb>:
     18f:	a7 01 0d 18 ba 01 03                                .......

00000196 <MainTaskTcb>:
     196:	aa 02 a2 17 eb 03 06                                .......

0000019d <Font8x8>:
	...
     1a5:	04 04 04 04 00 00 04 00 0a 0a 0a 00 00 00 00 00     ................
     1b5:	0a 0a 1f 0a 1f 0a 0a 00 04 0f 14 0e 05 1e 04 00     ................
     1c5:	18 19 02 04 08 13 03 00 0c 12 14 08 15 12 0d 00     ................
     1d5:	0c 04 08 00 00 00 00 00 02 04 08 08 08 04 02 00     ................
     1e5:	08 04 02 02 02 04 08 00 00 04 15 0e 15 04 00 00     ................
     1f5:	00 04 04 1f 04 04 00 00 00 00 00 00 0c 04 08 00     ................
     205:	00 00 00 1f 00 00 00 00 00 00 00 00 00 0c 0c 00     ................
     215:	00 01 02 04 08 10 00 00 0e 11 13 15 19 11 0e 00     ................
     225:	04 0c 04 04 04 04 0e 00 0e 11 01 02 04 08 1f 00     ................
     235:	1f 02 04 02 01 11 0e 00 02 06 0a 12 1f 02 02 00     ................
     245:	1f 10 1e 01 01 11 0e 00 06 08 10 1e 11 11 0e 00     ................
     255:	1f 01 02 04 04 04 04 00 1e 11 11 0e 11 11 0e 00     ................
     265:	0e 11 11 0f 01 02 0c 00 00 0c 0c 00 0c 0c 00 00     ................
     275:	00 0c 0c 00 0c 04 08 00 02 04 08 10 08 04 02 00     ................
     285:	00 00 1f 00 1f 00 00 00 08 04 02 01 02 04 08 00     ................
     295:	0e 11 01 02 04 00 04 00 0e 11 01 0d 15 15 0e 00     ................
     2a5:	0e 11 11 11 1f 11 11 00 1e 09 09 0e 09 09 1e 00     ................
     2b5:	0e 11 10 10 10 11 0e 00 1e 09 09 09 09 09 1e 00     ................
     2c5:	1f 10 10 1f 10 10 1f 00 1f 10 10 1e 10 10 10 00     ................
     2d5:	0e 11 10 13 11 11 0f 00 11 11 11 1f 11 11 11 00     ................
     2e5:	0e 04 04 04 04 04 0e 00 07 02 02 02 02 12 0c 00     ................
     2f5:	11 12 14 18 14 12 11 00 10 10 10 10 10 10 1f 00     ................
     305:	11 1b 15 15 11 11 11 00 11 19 19 15 13 13 11 00     ................
     315:	0e 11 11 11 11 11 0e 00 1e 11 11 1e 10 10 10 00     ................
     325:	0e 11 11 11 15 12 1d 00 1e 11 11 1e 14 12 11 00     ................
     335:	0e 11 10 0e 01 11 0e 00 1f 04 04 04 04 04 04 00     ................
     345:	11 11 11 11 11 11 0e 00 11 11 11 11 11 0a 04 00     ................
     355:	11 11 11 15 15 1b 11 00 11 11 0a 04 0a 11 11 00     ................
     365:	11 11 11 0a 04 04 04 00 1f 01 02 04 08 10 1f 00     ................
     375:	0e 08 08 08 08 08 0e 00 00 10 08 04 02 01 00 00     ................
     385:	0e 02 02 02 02 02 0e 00 04 0a 11 00 00 00 00 00     ................
     395:	00 00 00 00 00 00 1f 00 10 08 04 00 00 00 00 00     ................
     3a5:	00 00 0e 01 0f 11 0f 00 10 10 16 19 11 11 1e 00     ................
     3b5:	00 00 0e 11 10 11 0e 00 01 01 0d 13 11 11 0f 00     ................
     3c5:	00 00 0e 11 1f 10 0e 00 02 05 04 0e 04 04 04 00     ................
     3d5:	00 0d 13 13 0d 01 0e 00 10 10 16 19 11 11 11 00     ................
     3e5:	04 00 0c 04 04 04 0e 00 02 00 06 02 02 12 0c 00     ................
     3f5:	08 08 09 0a 0c 0a 09 00 0c 04 04 04 04 04 0e 00     ................
     405:	00 00 1a 15 15 15 15 00 00 00 16 19 11 11 11 00     ................
     415:	00 00 0e 11 11 11 0e 00 00 16 19 19 16 10 10 00     ................
     425:	00 0d 13 13 0d 01 01 00 00 00 16 19 10 10 10 00     ................
     435:	00 00 0f 10 1e 01 1f 00 08 08 1c 08 08 09 06 00     ................
     445:	00 00 12 12 12 12 0d 00 00 00 11 11 11 0a 04 00     ................
     455:	00 00 11 11 15 15 0a 00 00 00 11 0a 04 0a 11 00     ................
     465:	00 00 11 11 13 0d 01 0e 00 00 1f 02 04 08 1f 00     ................
     475:	02 04 04 08 04 04 02 00 04 04 04 00 04 04 04 00     ................
     485:	08 04 04 02 04 04 08 00 08 15 02 00 00 00 00 00     ................
	...

0000049d <SizeWidthValues>:
     49d:	63 00 03 00 2a 00 02 00 20 00 02 00 20 00 02 00     c...*... ... ...
     4ad:	04 00 01 00 04 00 01 00 2c 00 04 00 2c 00 04 00     ........,...,...
     4bd:	63 00 03 00 20 00 02 00 2a 00 02 00 14 00 14 00     c... ...*.......
     4cd:	f0 00 08 00 e0 01 10 00 15 00 01 00 2a 00 02 00     ............*...
     4dd:	d9 00 07 00 15 00 01 00 2c 00 04 00 04 00 01 00     ........,.......

000004ed <screen>:
	...
     6bd:	00 00 00 7f fe 00 00 00 00 00 00 00 00 00 00 00     ................
     6cd:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
     6e5:	00 00 01 7f fe 80 00 00 00 00 00 00 00 00 00 00     ................
     6f5:	00 00 00 00 00 00 03 bf fd c0 00 00 00 00 00 00     ................
	...
     70d:	00 00 07 c0 03 e0 00 00 00 00 00 00 00 00 00 00     ................
     71d:	00 00 00 00 00 00 07 c0 03 e0 00 00 00 00 00 00     ................
	...
     735:	00 00 07 c0 03 e0 00 00 00 00 00 00 00 00 00 00     ................
     745:	00 00 00 00 00 00 07 c0 03 e0 00 00 00 00 00 00     ................
	...
     75d:	00 00 07 c0 03 e0 00 00 00 00 00 00 00 00 00 00     ................
     76d:	00 00 00 00 00 00 07 c0 03 e0 00 00 00 00 00 00     ................
	...
     785:	00 00 07 c0 03 e0 00 00 00 00 00 00 00 00 00 00     ................
     795:	00 00 00 00 00 00 07 c0 03 e0 00 00 00 00 00 00     ................
	...
     7ad:	00 00 07 c0 03 e0 07 ff 07 ff 00 00 00 00 00 00     ................
     7bd:	00 00 00 00 00 00 07 c0 03 e0 0b fe 8b fe 80 00     ................
	...
     7d5:	00 00 03 80 01 c0 1c 01 dc 01 c0 00 00 00 00 00     ................
     7e5:	00 00 00 00 00 00 01 7f fe 80 1c 01 dc 01 c0 00     ................
	...
     7fd:	00 00 00 ff ff 00 1c 01 dc 01 c0 00 00 00 00 00     ................
     80d:	00 00 00 00 00 00 01 7f fe 80 1c 01 dc 01 c0 00     ................
	...
     825:	00 00 03 bf fd c0 1c 01 dc 01 c0 00 00 00 00 00     ................
     835:	00 00 00 00 00 00 07 c0 03 e0 1c 01 dc 01 c0 00     ................
	...
     84d:	00 00 07 c0 03 e0 1c 01 dc 01 c0 00 00 00 00 00     ................
     85d:	00 00 00 00 00 00 07 c0 03 e0 08 00 88 00 80 00     ................
	...
     875:	00 00 07 c0 03 e0 07 ff 07 ff 00 00 00 00 00 00     ................
     885:	00 00 00 00 00 00 07 c0 03 e0 0b fe 8b fe 80 00     ................
	...
     89d:	00 00 07 c0 03 e0 1c 01 dc 01 c0 00 00 00 00 00     ................
     8ad:	00 00 00 00 00 00 07 c0 03 e0 1c 01 dc 01 c0 00     ................
	...
     8c5:	00 00 07 c0 03 e0 1c 01 dc 01 c0 00 00 00 00 00     ................
     8d5:	00 00 00 00 00 00 07 c0 03 e0 1c 01 dc 01 c0 00     ................
	...
     8ed:	00 00 07 c0 03 e0 1c 01 dc 01 c0 00 00 00 00 00     ................
     8fd:	00 00 00 00 00 00 03 bf fd c0 1c 01 dc 01 c0 00     ................
	...
     915:	00 00 01 7f fe 80 1c 01 dc 01 c0 00 00 00 00 00     ................
     925:	00 00 00 00 00 00 00 ff ff 00 0b fe 8b fe 80 00     ................
	...
     93d:	00 00 00 7f fe 00 07 ff 07 ff 00 00 00 00 00 00     ................
	...
     9b1:	1f f8 00 00 1f f8 00 00 1f f8 1f f8 1f 80 00 00     ................
     9c1:	1f f8 1f f8 2f f4 00 04 0f f4 00 00 0f f4 2f f0     ..../........./.
     9d1:	2f 40 00 00 2f f4 2f f4 70 0e 00 0e 00 0e 00 00     /@.././.p.......
     9e1:	00 0e 70 00 30 c0 00 00 70 0e 70 0e 70 0e 00 0e     ..p.0...p.p.p...
     9f1:	00 0e 00 00 00 0e 70 00 30 c0 00 00 70 0e 70 0e     ......p.0...p.p.
     a01:	70 0e 00 0e 00 0e 00 00 00 0e 70 00 30 c0 00 00     p.........p.0...
     a11:	70 0e 70 0e 70 0e 00 0e 00 0e 00 00 00 0e 70 00     p.p.p.........p.
     a21:	30 c0 00 00 70 0e 70 0e 70 0e 00 0e 00 0e 00 00     0...p.p.p.......
     a31:	00 0e 70 00 2f 40 00 00 70 0e 70 0e 70 0e 00 0e     ..p./@..p.p.p...
     a41:	00 0e 00 00 00 0e 70 00 1f 80 00 00 70 0e 70 0e     ......p.....p.p.
     a51:	70 0e 00 0e 00 0e 00 00 00 0e 70 00 00 00 00 00     p.........p.....
     a61:	70 0e 70 0e 20 04 00 04 00 04 00 00 00 04 20 00     p.p. ......... .
     a71:	00 00 00 00 20 04 20 04 00 00 00 00 1f f8 00 7f     .... . .........
     a81:	1f f8 1f f8 1f f0 00 00 1f f8 1f f8 20 04 00 04     ............ ...
     a91:	2f f0 00 3e 2f f0 0f f4 2f e0 00 00 2f f4 0f f4     /..>/.../.../...
     aa1:	70 0e 00 0e 70 00 00 00 70 00 00 0e 30 00 00 00     p...p...p...0...
     ab1:	70 0e 00 0e 70 0e 00 0e 70 00 00 00 70 00 00 0e     p...p...p...p...
     ac1:	30 00 00 00 70 0e 00 0e 70 0e 00 0e 70 00 00 00     0...p...p...p...
     ad1:	70 00 00 0e 30 00 00 00 70 0e 00 0e 70 0e 00 0e     p...0...p...p...
     ae1:	70 00 00 00 70 00 00 0e 30 00 00 00 70 0e 00 0e     p...p...0...p...
     af1:	70 0e 00 0e 70 00 00 00 70 00 00 0e 30 00 00 00     p...p...p...0...
     b01:	70 0e 00 0e 70 0e 00 0e 70 00 00 00 70 00 00 0e     p...p...p...p...
     b11:	30 00 00 00 70 0e 00 0e 70 0e 00 0e 70 00 00 00     0...p...p...p...
     b21:	70 00 00 0e 30 00 00 00 70 0e 00 0e 2f f4 00 04     p...0...p.../...
     b31:	2f f0 00 00 2f f0 0f f4 2f e0 00 00 2f f4 0f f4     /.../.../.../...
     b41:	1f f8 00 00 1f f8 00 00 1f f8 1f f8 1f f0 00 00     ................
     b51:	1f f8 1f f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000116d <BigDigit>:
    116d:	07 ff e0 0f ff f0 17 ff e8 3b ff dc 7c 00 3e 7c     .........;..|.>|
    117d:	00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00     .>|.>|.>|.>|.>|.
    118d:	3e 7c 00 3e 7c 00 3e 7c 00 3e 38 00 1c 10 00 08     >|.>|.>|.>8.....
    119d:	00 00 00 10 00 08 38 00 1c 7c 00 3e 7c 00 3e 7c     ......8..|.>|.>|
    11ad:	00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00     .>|.>|.>|.>|.>|.
    11bd:	3e 7c 00 3e 7c 00 3e 3b ff dc 17 ff e8 0f ff f0     >|.>|.>;........
    11cd:	07 ff e0 00 00 00 00 00 00 00 00 08 00 00 1c 00     ................
    11dd:	00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00     .>..>..>..>..>..
    11ed:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 1c     >..>..>..>..>...
    11fd:	00 00 08 00 00 00 00 00 08 00 00 1c 00 00 3e 00     ..............>.
    120d:	00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00     .>..>..>..>..>..
    121d:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 1c 00 00 08     >..>..>..>......
    122d:	00 00 00 00 00 00 07 ff e0 0f ff f0 07 ff e8 03     ................
    123d:	ff dc 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00     ....>..>..>..>..
    124d:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     >..>..>..>..>..>
    125d:	00 00 1c 07 ff e8 0f ff f0 17 ff e0 3b ff c0 7c     ............;..|
    126d:	00 00 7c 00 00 7c 00 00 7c 00 00 7c 00 00 7c 00     ..|..|..|..|..|.
    127d:	00 7c 00 00 7c 00 00 7c 00 00 7c 00 00 3b ff c0     .|..|..|..|..;..
    128d:	17 ff e0 0f ff f0 07 ff e0 07 ff e0 0f ff f0 07     ................
    129d:	ff e8 03 ff dc 00 00 3e 00 00 3e 00 00 3e 00 00     .......>..>..>..
    12ad:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     >..>..>..>..>..>
    12bd:	00 00 3e 00 00 1c 07 ff e8 0f ff f0 07 ff e8 03     ..>.............
    12cd:	ff dc 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00     ....>..>..>..>..
    12dd:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     >..>..>..>..>..>
    12ed:	03 ff dc 07 ff e8 0f ff f0 07 ff e0 00 00 00 00     ................
    12fd:	00 00 10 00 08 38 00 1c 7c 00 3e 7c 00 3e 7c 00     .....8..|.>|.>|.
    130d:	3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e     >|.>|.>|.>|.>|.>
    131d:	7c 00 3e 7c 00 3e 38 00 1c 17 ff e8 0f ff f0 07     |.>|.>8.........
    132d:	ff e8 03 ff dc 00 00 3e 00 00 3e 00 00 3e 00 00     .......>..>..>..
    133d:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     >..>..>..>..>..>
    134d:	00 00 3e 00 00 1c 00 00 08 00 00 00 00 00 00 07     ..>.............
    135d:	ff e0 0f ff f0 17 ff e0 3b ff c0 7c 00 00 7c 00     ........;..|..|.
    136d:	00 7c 00 00 7c 00 00 7c 00 00 7c 00 00 7c 00 00     .|..|..|..|..|..
    137d:	7c 00 00 7c 00 00 7c 00 00 38 00 00 17 ff e0 0f     |..|..|..8......
    138d:	ff f0 07 ff e8 03 ff dc 00 00 3e 00 00 3e 00 00     ..........>..>..
    139d:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     >..>..>..>..>..>
    13ad:	00 00 3e 00 00 3e 03 ff dc 07 ff e8 0f ff f0 07     ..>..>..........
    13bd:	ff e0 07 ff e0 0f ff f0 17 ff e0 3b ff c0 7c 00     ...........;..|.
    13cd:	00 7c 00 00 7c 00 00 7c 00 00 7c 00 00 7c 00 00     .|..|..|..|..|..
    13dd:	7c 00 00 7c 00 00 7c 00 00 7c 00 00 38 00 00 17     |..|..|..|..8...
    13ed:	ff e0 0f ff f0 17 ff e8 3b ff dc 7c 00 3e 7c 00     ........;..|.>|.
    13fd:	3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e     >|.>|.>|.>|.>|.>
    140d:	7c 00 3e 7c 00 3e 7c 00 3e 3b ff dc 17 ff e8 0f     |.>|.>|.>;......
    141d:	ff f0 07 ff e0 07 ff e0 0f ff f0 07 ff e8 03 ff     ................
    142d:	dc 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     ...>..>..>..>..>
    143d:	00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00     ..>..>..>..>..>.
    144d:	00 1c 00 00 08 00 00 00 00 00 08 00 00 1c 00 00     ................
    145d:	3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e     >..>..>..>..>..>
    146d:	00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 1c 00     ..>..>..>..>....
    147d:	00 08 00 00 00 00 00 00 07 ff e0 0f ff f0 17 ff     ................
    148d:	e8 3b ff dc 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e     .;..|.>|.>|.>|.>
    149d:	7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c     |.>|.>|.>|.>|.>|
    14ad:	00 3e 38 00 1c 17 ff e8 0f ff f0 17 ff e8 3b ff     .>8...........;.
    14bd:	dc 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e     .|.>|.>|.>|.>|.>
    14cd:	7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 3b     |.>|.>|.>|.>|.>;
    14dd:	ff dc 17 ff e8 0f ff f0 07 ff e0 07 ff e0 0f ff     ................
    14ed:	f0 17 ff e8 3b ff dc 7c 00 3e 7c 00 3e 7c 00 3e     ....;..|.>|.>|.>
    14fd:	7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c 00 3e 7c     |.>|.>|.>|.>|.>|
    150d:	00 3e 7c 00 3e 38 00 1c 17 ff e8 0f ff f0 07 ff     .>|.>8..........
    151d:	e8 03 ff dc 00 00 3e 00 00 3e 00 00 3e 00 00 3e     ......>..>..>..>
    152d:	00 00 3e 00 00 3e 00 00 3e 00 00 3e 00 00 3e 00     ..>..>..>..>..>.
    153d:	00 3e 03 ff dc 07 ff e8 0f ff f0 07 ff e0           .>............

0000154b <SmallDigit>:
    154b:	1f f8 2f f4 70 0e 70 0e 70 0e 70 0e 70 0e 70 0e     ../.p.p.p.p.p.p.
    155b:	70 0e 20 04 00 00 20 04 70 0e 70 0e 70 0e 70 0e     p. ... .p.p.p.p.
    156b:	70 0e 70 0e 70 0e 2f f4 1f f8 00 00 00 04 00 0e     p.p.p./.........
    157b:	00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 04 00 00     ................
    158b:	00 04 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e     ................
    159b:	00 04 00 00 1f f8 0f f4 00 0e 00 0e 00 0e 00 0e     ................
    15ab:	00 0e 00 0e 00 0e 00 04 1f f8 2f f0 70 00 70 00     ........../.p.p.
    15bb:	70 00 70 00 70 00 70 00 70 00 2f f0 1f f8 1f f8     p.p.p.p.p./.....
    15cb:	0f f4 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e     ................
    15db:	00 04 1f f8 0f f4 00 0e 00 0e 00 0e 00 0e 00 0e     ................
    15eb:	00 0e 00 0e 0f f4 1f f8 00 00 20 04 70 0e 70 0e     .......... .p.p.
    15fb:	70 0e 70 0e 70 0e 70 0e 70 0e 20 04 1f f8 0f f4     p.p.p.p.p. .....
    160b:	00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 04     ................
    161b:	00 00 1f f8 2f f0 70 00 70 00 70 00 70 00 70 00     ..../.p.p.p.p.p.
    162b:	70 00 70 00 20 00 1f f8 0f f4 00 0e 00 0e 00 0e     p.p. ...........
    163b:	00 0e 00 0e 00 0e 00 0e 0f f4 1f f8 1f f8 2f f0     ............../.
    164b:	70 00 70 00 70 00 70 00 70 00 70 00 70 00 20 00     p.p.p.p.p.p.p. .
    165b:	1f f8 2f f4 70 0e 70 0e 70 0e 70 0e 70 0e 70 0e     ../.p.p.p.p.p.p.
    166b:	70 0e 2f f4 1f f8 1f f8 0f f4 00 0e 00 0e 00 0e     p./.............
    167b:	00 0e 00 0e 00 0e 00 0e 00 04 00 00 00 04 00 0e     ................
    168b:	00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 04 00 00     ................
    169b:	1f f8 2f f4 70 0e 70 0e 70 0e 70 0e 70 0e 70 0e     ../.p.p.p.p.p.p.
    16ab:	70 0e 20 04 1f f8 2f f4 70 0e 70 0e 70 0e 70 0e     p. .../.p.p.p.p.
    16bb:	70 0e 70 0e 70 0e 2f f4 1f f8 1f f8 2f f4 70 0e     p.p.p./...../.p.
    16cb:	70 0e 70 0e 70 0e 70 0e 70 0e 70 0e 20 04 1f f8     p.p.p.p.p.p. ...
    16db:	0f f4 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e     ................
    16eb:	0f f4 1f f8                                         ....

000016ef <array2>:
    16ef:	0f fc 1f f8 38 00 38 00 38 00 38 00 38 00 3f f8     ....8.8.8.8.8.?.
    16ff:	3f f0 38 00 38 00 38 00 38 00 38 00 1f f8 0f fc     ?.8.8.8.8.8.....

0000170f <array3>:
    170f:	0f fc 1f f8 38 00 38 00 38 00 38 00 38 00 1f f0     ....8.8.8.8.8...
    171f:	0f f8 00 1c 00 1c 00 1c 00 1c 00 1c 1f f8 3f f0     ..............?.

0000172f <array4>:
    172f:	08 1c 3e 7f                                         ..>.

00001733 <array5>:
    1733:	7f 3e 1c 08                                         .>..

00001737 <array6>:
    1737:	00 01 80 00 00 07 e0 00 00 1e 78 00 00 78 1e 00     ..........x..x..
    1747:	01 e0 07 80 07 80 01 e0 1e 00 00 78 78 00 00 1e     ...........xx...
    1757:	e0 00 00 07 ff ff ff ff ff ff ff ff                 ............

00001763 <array7>:
    1763:	ff ff ff ff ff ff ff ff e0 00 00 07 78 00 00 1e     ............x...
    1773:	1e 00 00 78 07 80 01 e0 01 e0 07 80 00 78 1e 00     ...x.........x..
    1783:	00 1e 78 00 00 07 e0 00 00 01 80 00                 ..x.........

0000178f <array8>:
    178f:	00 00 00 00 00 00 10 00 08 38 00 1c 7c 00 3e 7e     .........8..|.>~
    179f:	00 3e 7f 00 3e 7f 80 3e 7f 80 3e 7d c0 3e 7d e0     .>..>..>..>}.>}.
    17af:	3e 7c e0 3e 7c f0 3e 7c 70 3e 38 78 1c 10 18 08     >|.>|.>|p>8x....
    17bf:	00 00 00 10 18 08 38 1e 1c 7c 0e 3e 7c 0f 3e 7c     ......8..|.>|.>|
    17cf:	07 3e 7c 07 be 7c 03 be 7c 03 fe 7c 01 fe 7c 00     .>|..|..|..|..|.
    17df:	fe 7c 00 7e 7c 00 3e 38 00 1c 10 00 08 00 00 00     .|.~|.>8........
    17ef:	00 00 00                                            ...

000017f2 <array9>:
    17f2:	0f f0 1f f8 38 1c 38 1c 38 1c 38 1c 38 1c 3f f8     ....8.8.8.8.8.?.
    1802:	3f f0 3f 00 3b 80 39 c0 38 e0 38 70 18 38 08 18     ?.?.;.9.8.8p.8..

00001812 <array10>:
    1812:	00 00 7f c0 7f c0 60 f0 60 f8 60 dc 60 de 60 cf     ......`.`.`.`.`.
    1822:	60 cc 7f cc 7f e6 7f f6 7f f6 7f f6 7f f6 7f f6     `...............
    1832:	7f de 7f dc ff e0 ff e0 ff e0                       ..........

0000183c <array11>:
    183c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    184c:	ff ff ff ff                                         ....

00001850 <array12>:
    1850:	3f ff ff ff ff ff ff f8 7f ff ff ff ff ff ff fc     ?...............
    1860:	e0 00 00 00 00 00 00 0e c0 00 00 00 00 00 00 06     ................
    1870:	c0 00 00 00 00 00 00 06 c0 00 00 00 00 00 00 06     ................
    1880:	c0 00 00 00 00 00 00 06 c0 00 0f f0 30 18 00 06     ............0...
    1890:	c0 00 1f f8 30 30 00 06 c0 00 18 18 30 60 00 06     ....00......0`..
    18a0:	c0 00 18 18 30 c0 00 06 c0 00 18 18 31 80 00 06     ....0.......1...
    18b0:	c0 00 18 18 33 00 00 06 c0 00 18 18 36 00 00 06     ....3.......6...
    18c0:	c0 00 18 18 3c 00 00 06 c0 00 18 18 3c 00 00 06     ....<.......<...
    18d0:	c0 00 18 18 36 00 00 06 c0 00 18 18 33 00 00 06     ....6.......3...
    18e0:	c0 00 18 18 31 80 00 06 c0 00 18 18 30 c0 00 06     ....1.......0...
    18f0:	c0 00 18 18 30 60 00 06 c0 00 1f f8 30 30 00 06     ....0`......00..
    1900:	c0 00 0f f0 30 18 00 06 c0 00 00 00 00 00 00 06     ....0...........
    1910:	c0 00 00 00 00 00 00 06 c0 00 00 00 00 00 00 06     ................
    1920:	c0 00 00 00 00 00 00 06 e0 00 00 00 00 00 00 0e     ................
    1930:	7f ff ff ff ff ff ff fc 3f ff ff ff ff ff ff f8     ........?.......

00001940 <array13>:
    1940:	07 ff ff ff ff ff ff ff ff ff ff ff ff ff ff c0     ................
    1950:	0f ff ff ff bf ff ff fe ff ff ff fb ff ff ff e0     ................
    1960:	1c 00 00 00 a0 00 00 02 80 00 00 0a 00 00 00 70     ...............p
    1970:	18 00 00 00 a0 00 00 02 80 00 00 0a 00 00 00 30     ...............0
    1980:	18 00 00 00 a0 00 00 02 80 00 00 0a 00 00 00 30     ...............0
    1990:	18 00 00 00 a0 00 00 02 80 00 60 0a 00 c0 00 30     ..........`....0
    19a0:	18 00 00 00 a0 00 00 02 80 00 e0 0a 00 e0 00 30     ...............0
    19b0:	18 00 00 00 a0 00 00 02 80 01 e0 0a 00 f0 00 30     ...............0
    19c0:	18 00 30 00 a0 00 00 02 80 03 60 0a 00 d8 00 30     ..0.......`....0
    19d0:	18 00 78 00 a0 00 00 02 80 06 60 0a 00 cc 00 30     ..x.......`....0
    19e0:	18 00 cc 00 a3 ff ff c2 80 0c 60 0a 00 c6 00 30     ..........`....0
    19f0:	18 01 86 00 a3 ff ff c2 80 18 60 0a 00 c3 00 30     ..........`....0
    1a00:	18 03 03 00 a1 80 01 82 80 30 60 0a 00 c1 80 30     .........0`....0
    1a10:	18 06 01 80 a0 c0 03 02 80 60 60 0a 00 c0 c0 30     .........``....0
    1a20:	18 0c 00 c0 a0 60 06 02 80 c0 60 0a 00 c0 60 30     .....`....`...`0
    1a30:	18 18 00 60 a0 30 0c 02 80 c0 60 0a 00 c0 60 30     ...`.0....`...`0
    1a40:	18 30 00 30 a0 18 18 02 80 60 60 0a 00 c0 c0 30     .0.0.....``....0
    1a50:	18 7f ff f8 a0 0c 30 02 80 30 60 0a 00 c1 80 30     ......0..0`....0
    1a60:	18 7f ff f8 a0 06 60 02 80 18 60 0a 00 c3 00 30     ......`...`....0
    1a70:	18 00 00 00 a0 03 c0 02 80 0c 60 0a 00 c6 00 30     ..........`....0
    1a80:	18 00 00 00 a0 01 80 02 80 06 60 0a 00 cc 00 30     ..........`....0
    1a90:	18 00 00 00 a0 00 00 02 80 03 60 0a 00 d8 00 30     ..........`....0
    1aa0:	18 00 00 00 a0 00 00 02 80 01 e0 0a 00 f0 00 30     ...............0
    1ab0:	18 00 00 00 a0 00 00 02 80 00 e0 0a 00 e0 00 30     ...............0
    1ac0:	18 00 00 00 a0 00 00 02 80 00 60 0a 00 c0 00 30     ..........`....0
    1ad0:	18 00 00 00 a0 00 00 02 80 00 00 0a 00 00 00 30     ...............0
    1ae0:	18 00 00 00 a0 00 00 02 80 00 00 0a 00 00 00 30     ...............0
    1af0:	1c 00 00 00 a0 00 00 02 80 00 00 0a 00 00 00 70     ...............p
    1b00:	0f ff ff ff bf ff ff fe ff ff ff fb ff ff ff e0     ................
    1b10:	07 ff ff ff ff ff ff ff ff ff ff ff ff ff ff c0     ................

00001b20 <array14>:
	...

00001b83 <array15>:
	...

00001bad <array16>:
	...
    1bb5:	00 00 7f 3e 00 00 00 00 00 00 00 00 00              ...>.........

00001bc2 <array17>:
    1bc2:	1f 80 2f 40 30 c0 30 c0 30 c0 30 c0 2f 40 1f 80     ../@0.0.0.0./@..
    1bd2:	00 00 00 00 1f f0 2f e0 30 00 30 00 30 00 30 00     ....../.0.0.0.0.
    1be2:	30 00 30 00 30 00 2f e0 1f f0                       0.0.0./...

00001bec <array18>:
	...

00001cc5 <array19>:
	...

00001cda <array20>:
	...

00001d06 <array21>:
    1d06:	00 00 00 00                                         ....

00001d0a <GearLimits>:
    1d0a:	02 00 01 00 7f 02 4a 02 02 00 02 00 49 02 14 02     ......J.....I...
    1d1a:	03 00 01 00 be 03 6f 03 03 00 02 00 6e 03 d3 02     ......o.....n...
    1d2a:	03 00 03 00 d2 02 51 02 03 00 04 00 50 02 1b 02     ......Q.....P...
    1d3a:	04 00 01 00 fe 04 94 04 04 00 02 00 93 04 c4 03     ................
    1d4a:	04 00 03 00 c3 03 17 03 04 00 04 00 16 03 8c 02     ................
    1d5a:	04 00 05 00 8b 02 49 02 05 00 01 00 3d 06 b8 05     ......I.....=...
    1d6a:	05 00 02 00 b7 05 b5 04 05 00 03 00 b4 04 dd 03     ................
    1d7a:	05 00 04 00 dc 03 30 03 05 00 05 00 2f 03 9f 02     ......0...../...
    1d8a:	05 00 06 00 9e 02 62 02 06 00 01 00 7d 07 dd 06     ......b.....}...
    1d9a:	06 00 02 00 dc 06 a6 05 06 00 03 00 a5 05 a2 04     ................
    1daa:	06 00 04 00 a1 04 d2 03 06 00 05 00 d1 03 25 03     ..............%.
    1dba:	06 00 06 00 24 03 97 02 06 00 07 00 96 02 52 02     ....$.........R.
    1dca:	07 00 01 00 bc 08 02 08 07 00 02 00 01 08 97 06     ................
    1dda:	07 00 03 00 96 06 68 05 07 00 04 00 67 05 75 04     ......h.....g.u.
    1dea:	07 00 05 00 74 04 ab 03 07 00 06 00 aa 03 06 03     ....t...........
    1dfa:	07 00 07 00 05 03 7c 02 07 00 08 00 7b 02 1f 02     ......|.....{...
    1e0a:	07 00 09 00 1e 02 fc 01 08 00 02 00 52 08 88 07     ............R...
    1e1a:	08 00 03 00 87 07 2e 06 08 00 04 00 2d 06 19 05     ............-...
    1e2a:	08 00 05 00 18 05 31 04 08 00 06 00 30 04 74 03     ......1.....0.t.
    1e3a:	08 00 07 00 73 03 d6 02 08 00 08 00 d5 02 6d 02     ....s.........m.
    1e4a:	08 00 09 00 6c 02 45 02 09 00 02 00 5c 09 79 08     ....l.E.....\.y.
    1e5a:	09 00 03 00 78 08 f4 06 09 00 04 00 f3 06 bb 05     ....x...........
    1e6a:	09 00 05 00 ba 05 b7 04 09 00 06 00 b6 04 e2 03     ................
    1e7a:	09 00 07 00 e1 03 31 03 09 00 08 00 30 03 ba 02     ......1.....0...
    1e8a:	09 00 09 00 b9 02 57 02 09 00 0a 00 56 02 20 02     ......W.....V. .
    1e9a:	0a 00 03 00 6d 08 b9 07 0a 00 04 00 b8 07 5e 06     ....m.........^.
    1eaa:	0a 00 05 00 5d 06 3d 05 0a 00 06 00 3c 05 51 04     ....].=.....<.Q.
    1eba:	0a 00 07 00 50 04 8c 03 0a 00 08 00 8b 03 08 03     ....P...........
    1eca:	0a 00 09 00 07 03 99 02 0a 00 0a 00 98 02 5c 02     ..............\.
    1eda:	0b 00 03 00 45 09 7f 08 0b 00 04 00 7e 08 02 07     ....E.......~...
    1eea:	0b 00 05 00 01 07 c4 05 0b 00 06 00 c3 05 c0 04     ................
    1efa:	0b 00 07 00 bf 04 e7 03 0b 00 08 00 e6 03 56 03     ..............V.
    1f0a:	0b 00 09 00 55 03 dc 02 0b 00 0a 00 db 02 5a 02     ....U.........Z.
    1f1a:	0b 00 0b 00 59 02 1b 02 0c 00 04 00 6d 08 a5 07     ....Y.......m...
    1f2a:	0c 00 05 00 a4 07 4a 06 0c 00 06 00 49 06 2e 05     ......J.....I...
    1f3a:	0c 00 07 00 2d 05 42 04 0c 00 08 00 41 04 a3 03     ....-.B.....A...
    1f4a:	0c 00 09 00 a2 03 1e 03 0c 00 0a 00 1d 03 91 02     ................
    1f5a:	0c 00 0b 00 90 02 4c 02 0d 00 04 00 20 09 47 08     ......L..... .G.
    1f6a:	0d 00 05 00 46 08 d0 06 0d 00 06 00 cf 06 9d 05     ....F...........
    1f7a:	0d 00 07 00 9c 05 9d 04 0d 00 08 00 9c 04 f1 03     ................
    1f8a:	0d 00 09 00 f0 03 61 03 0d 00 0a 00 60 03 c7 02     ......a.....`...
    1f9a:	0d 00 0b 00 c6 02 49 02 0d 00 0c 00 48 02 14 02     ......I.....H...
    1faa:	0e 00 05 00 01 08 56 07 0e 00 06 00 55 07 0b 06     ......V.....U...
    1fba:	0e 00 07 00 0a 06 f8 04 0e 00 08 00 f7 04 3e 04     ..............>.
    1fca:	0e 00 09 00 3d 04 a3 03 0e 00 0a 00 a2 03 fe 02     ....=...........
    1fda:	0e 00 0b 00 fd 02 75 02 0e 00 0c 00 74 02 3d 02     ......u.....t.=.
    1fea:	0f 00 05 00 93 08 dc 07 0f 00 06 00 db 07 7a 06     ..............z.
    1ffa:	0f 00 07 00 79 06 52 05 0f 00 08 00 51 05 8c 04     ....y.R.....Q...
    200a:	0f 00 09 00 8b 04 e6 03 0f 00 0a 00 e5 03 34 03     ..............4.
    201a:	0f 00 0b 00 33 03 a2 02 0f 00 0c 00 a1 02 65 02     ....3.........e.
    202a:	10 00 05 00 25 09 62 08 10 00 06 00 61 08 e8 06     ....%.b.....a...
    203a:	10 00 07 00 e7 06 ad 05 10 00 08 00 ac 05 da 04     ................
    204a:	10 00 09 00 d9 04 28 04 10 00 0a 00 27 04 6b 03     ......(.....'.k.
    205a:	10 00 0b 00 6a 03 cf 02 10 00 0c 00 ce 02 51 02     ....j.........Q.
    206a:	10 00 0d 00 50 02 13 02 11 00 05 00 b8 09 e9 08     ....P...........
    207a:	11 00 06 00 e8 08 57 07 11 00 07 00 56 07 08 06     ......W.....V...
    208a:	11 00 08 00 07 06 27 05 11 00 09 00 26 05 6b 04     ......'.....&.k.
    209a:	11 00 0a 00 6a 04 a2 03 11 00 0b 00 a1 03 fc 02     ....j...........
    20aa:	11 00 0c 00 fb 02 76 02 11 00 0d 00 75 02 34 02     ......v.....u.4.
    20ba:	12 00 06 00 93 08 c5 07 12 00 07 00 c4 07 63 06     ..............c.
    20ca:	12 00 08 00 62 06 75 05 12 00 09 00 74 05 ad 04     ....b.u.....t...
    20da:	12 00 0a 00 ac 04 d8 03 12 00 0b 00 d7 03 29 03     ..............).
    20ea:	12 00 0c 00 28 03 9b 02 12 00 0d 00 9a 02 25 02     ....(.........%.
    20fa:	12 00 0e 00 24 02 f4 01 13 00 06 00 0d 09 34 08     ....$.........4.
    210a:	13 00 07 00 33 08 bd 06 13 00 08 00 bc 06 c2 05     ....3...........
    211a:	13 00 09 00 c1 05 f0 04 13 00 0a 00 ef 04 0f 04     ................
    212a:	13 00 0b 00 0e 04 56 03 13 00 0c 00 55 03 c0 02     ......V.....U...
    213a:	13 00 0d 00 bf 02 44 02 13 00 0e 00 43 02 10 02     ......D.....C...
    214a:	14 00 06 00 87 09 a2 08 14 00 07 00 a1 08 18 07     ................
    215a:	14 00 08 00 17 07 10 06 14 00 09 00 0f 06 32 05     ..............2.
    216a:	14 00 0a 00 31 05 46 04 14 00 0b 00 45 04 83 03     ....1.F.....E...
    217a:	14 00 0c 00 82 03 e5 02 14 00 0d 00 e4 02 62 02     ..............b.
    218a:	14 00 0e 00 61 02 2b 02 15 00 07 00 20 08 73 07     ....a.+..... .s.
    219a:	15 00 08 00 72 07 5d 06 15 00 09 00 5c 06 75 05     ....r.].....\.u.
    21aa:	15 00 0a 00 74 05 7d 04 15 00 0b 00 7c 04 b0 03     ....t.}.....|...
    21ba:	15 00 0c 00 af 03 0a 03 15 00 0d 00 09 03 80 02     ................
    21ca:	15 00 0e 00 7f 02 47 02 16 00 07 00 83 08 ce 07     ......G.........
    21da:	16 00 08 00 cd 07 ab 06 16 00 09 00 aa 06 b7 05     ................
    21ea:	16 00 0a 00 b6 05 b3 04 16 00 0b 00 b2 04 dd 03     ................
    21fa:	16 00 0c 00 dc 03 2f 03 16 00 0d 00 2e 03 9f 02     ....../.........
    220a:	16 00 0e 00 9e 02 63 02 17 00 07 00 e6 08 28 08     ......c.......(.
    221a:	17 00 08 00 27 08 f8 06 17 00 09 00 f7 06 fa 05     ....'...........
    222a:	17 00 0a 00 f9 05 ea 04 17 00 0b 00 e9 04 0a 04     ................
    223a:	17 00 0c 00 09 04 55 03 17 00 0d 00 54 03 be 02     ......U.....T...
    224a:	17 00 0e 00 bd 02 43 02 17 00 0f 00 42 02 06 02     ......C.....B...
    225a:	18 00 07 00 49 09 83 08 18 00 08 00 82 08 46 07     ....I.........F.
    226a:	18 00 09 00 45 07 3c 06 18 00 0a 00 3b 06 21 05     ....E.<.....;.!.
    227a:	18 00 0b 00 20 05 36 04 18 00 0c 00 35 04 79 03     .... .6.....5.y.
    228a:	18 00 0d 00 78 03 dc 02 18 00 0e 00 db 02 5b 02     ....x.........[.
    229a:	18 00 0f 00 5a 02 1c 02 19 00 07 00 ac 09 de 08     ....Z...........
    22aa:	19 00 08 00 dd 08 94 07 19 00 09 00 93 07 7f 06     ................
    22ba:	19 00 0a 00 7e 06 57 05 19 00 0b 00 56 05 63 04     ....~.W.....V.c.
    22ca:	19 00 0c 00 62 04 9e 03 19 00 0d 00 9d 03 fa 02     ....b...........
    22da:	19 00 0e 00 f9 02 75 02 19 00 0f 00 74 02 33 02     ......u.....t.3.
    22ea:	1a 00 08 00 62 08 e1 07 1a 00 09 00 e0 07 c2 06     ....b...........
    22fa:	1a 00 0a 00 c1 06 8e 05 1a 00 0b 00 8d 05 90 04     ................
    230a:	1a 00 0c 00 8f 04 c3 03 1a 00 0d 00 c2 03 19 03     ................
    231a:	1a 00 0e 00 18 03 8e 02 1a 00 0f 00 8d 02 49 02     ..............I.
    232a:	1b 00 08 00 b5 08 2f 08 1b 00 09 00 2e 08 04 07     ....../.........
    233a:	1b 00 0a 00 03 07 c5 05 1b 00 0b 00 c4 05 bd 04     ................
    234a:	1b 00 0c 00 bc 04 e9 03 1b 00 0d 00 e8 03 38 03     ..............8.
    235a:	1b 00 0e 00 37 03 a7 02 1b 00 0f 00 a6 02 2e 02     ....7...........
    236a:	1b 00 10 00 2d 02 fb 01 1c 00 08 00 07 09 7c 08     ....-.........|.
    237a:	1c 00 09 00 7b 08 46 07 1c 00 0a 00 45 07 fb 05     ....{.F.....E...
    238a:	1c 00 0b 00 fa 05 ea 04 1c 00 0c 00 e9 04 0e 04     ................
    239a:	1c 00 0d 00 0d 04 56 03 1c 00 0e 00 55 03 c0 02     ......V.....U...
    23aa:	1c 00 0f 00 bf 02 42 02 1c 00 10 00 41 02 0d 02     ......B.....A...
    23ba:	1d 00 08 00 5a 09 ca 08 1d 00 09 00 c9 08 89 07     ....Z...........
    23ca:	1d 00 0a 00 88 07 32 06 1d 00 0b 00 31 06 17 05     ......2.....1...
    23da:	1d 00 0c 00 16 05 33 04 1d 00 0d 00 32 04 74 03     ......3.....2.t.
    23ea:	1d 00 0e 00 73 03 d9 02 1d 00 0f 00 d8 02 57 02     ....s.........W.
    23fa:	1d 00 10 00 56 02 20 02 1e 00 08 00 ac 09 17 09     ....V. .........
    240a:	1e 00 09 00 16 09 cb 07 1e 00 0a 00 ca 07 69 06     ..............i.
    241a:	1e 00 0b 00 68 06 44 05 1e 00 0c 00 43 05 58 04     ....h.D.....C.X.
    242a:	1e 00 0d 00 57 04 93 03 1e 00 0e 00 92 03 f2 02     ....W...........
    243a:	1e 00 0f 00 f1 02 6b 02 1e 00 10 00 6a 02 33 02     ......k.....j.3.
    244a:	1f 00 09 00 cb 08 0e 08 1f 00 0a 00 0d 08 a0 06     ................
    245a:	1f 00 0b 00 9f 06 71 05 1f 00 0c 00 70 05 7d 04     ......q.....p.}.
    246a:	1f 00 0d 00 7c 04 b1 03 1f 00 0e 00 b0 03 0c 03     ....|...........
    247a:	1f 00 0f 00 0b 03 80 02 1f 00 10 00 7f 02 46 02     ..............F.
    248a:	20 00 09 00 13 09 50 08 20 00 0a 00 4f 08 d6 06      .....P. ...O...
    249a:	20 00 0b 00 d5 06 9e 05 20 00 0c 00 9d 05 a2 04      ....... .......
    24aa:	20 00 0d 00 a1 04 d0 03 20 00 0e 00 cf 03 24 03      ....... .....$.
    24ba:	20 00 0f 00 23 03 94 02 20 00 10 00 93 02 58 02      ...#... .....X.
    24ca:	21 00 09 00 5c 09 93 08 21 00 0a 00 92 08 0d 07     !...\...!.......
    24da:	21 00 0b 00 0c 07 cb 05 21 00 0c 00 ca 05 c7 04     !.......!.......
    24ea:	21 00 0d 00 c6 04 ee 03 21 00 0e 00 ed 03 3e 03     !.......!.....>.
    24fa:	21 00 0f 00 3d 03 a9 02 21 00 10 00 a8 02 6b 02     !...=...!.....k.
    250a:	22 00 09 00 a4 09 d5 08 22 00 0a 00 d4 08 44 07     ".......".....D.
    251a:	22 00 0b 00 43 07 f8 05 22 00 0c 00 f7 05 ec 04     "...C...".......
    252a:	22 00 0d 00 eb 04 0d 04 22 00 0e 00 0c 04 57 03     ".......".....W.
    253a:	22 00 0f 00 56 03 be 02 22 00 10 00 bd 02 7e 02     "...V...".....~.
    254a:	23 00 0a 00 42 08 7a 07 23 00 0b 00 79 07 25 06     #...B.z.#...y.%.
    255a:	23 00 0c 00 24 06 11 05 23 00 0d 00 10 05 2b 04     #...$...#.....+.
    256a:	23 00 0e 00 2a 04 70 03 23 00 0f 00 6f 03 d3 02     #...*.p.#...o...
    257a:	23 00 10 00 d2 02 91 02 24 00 0a 00 7f 08 b1 07     #.......$.......
    258a:	24 00 0b 00 b0 07 52 06 24 00 0c 00 51 06 36 05     $.....R.$...Q.6.
    259a:	24 00 0d 00 35 05 4a 04 24 00 0e 00 49 04 89 03     $...5.J.$...I...
    25aa:	24 00 0f 00 88 03 e7 02 24 00 10 00 e6 02 a3 02     $.......$.......
    25ba:	25 00 0a 00 bb 08 e8 07 25 00 0b 00 e7 07 7f 06     %.......%.......
    25ca:	25 00 0c 00 7e 06 5b 05 25 00 0d 00 5a 05 68 04     %...~.[.%...Z.h.
    25da:	25 00 0e 00 67 04 a2 03 25 00 0f 00 a1 03 fc 02     %...g...%.......
    25ea:	25 00 10 00 fb 02 b6 02 26 00 0a 00 f7 08 1e 08     %.......&.......
    25fa:	26 00 0b 00 1d 08 ac 06 26 00 0c 00 ab 06 80 05     &.......&.......
    260a:	26 00 0d 00 7f 05 87 04 26 00 0e 00 86 04 bb 03     &.......&.......
    261a:	26 00 0f 00 ba 03 10 03 26 00 10 00 0f 03 c9 02     &.......&.......
    262a:	27 00 0a 00 34 09 55 08 27 00 0b 00 54 08 d9 06     '...4.U.'...T...
    263a:	27 00 0c 00 d8 06 a5 05 27 00 0d 00 a4 05 a5 04     '.......'.......
    264a:	27 00 0e 00 a4 04 d5 03 27 00 0f 00 d4 03 25 03     '.......'.....%.
    265a:	27 00 10 00 24 03 dc 02 28 00 0a 00 70 09 8b 08     '...$...(...p...
    266a:	28 00 0b 00 8a 08 05 07 28 00 0c 00 04 07 ca 05     (.......(.......
    267a:	28 00 0d 00 c9 05 c4 04 28 00 0e 00 c3 04 ee 03     (.......(.......
    268a:	28 00 0f 00 ed 03 39 03 28 00 10 00 38 03 ee 02     (.....9.(...8...
    269a:	29 00 0a 00 ad 09 c2 08 29 00 0b 00 c1 08 32 07     ).......).....2.
    26aa:	29 00 0c 00 31 07 ef 05 29 00 0d 00 ee 05 e2 04     )...1...).......
    26ba:	29 00 0e 00 e1 04 07 04 29 00 0f 00 06 04 4e 03     ).......).....N.
    26ca:	29 00 10 00 4d 03 01 03 2a 00 0b 00 08 08 5f 07     )...M...*....._.
    26da:	2a 00 0c 00 5e 07 15 06 2a 00 0d 00 14 06 01 05     *...^...*.......
    26ea:	2a 00 0e 00 00 05 20 04 2a 00 0f 00 1f 04 63 03     *..... .*.....c.
    26fa:	2a 00 10 00 62 03 14 03 2b 00 0b 00 39 08 8c 07     *...b...+...9...
    270a:	2b 00 0c 00 8b 07 3a 06 2b 00 0d 00 39 06 1f 05     +.....:.+...9...
    271a:	2b 00 0e 00 1e 05 39 04 2b 00 0f 00 38 04 78 03     +.....9.+...8.x.
    272a:	2b 00 10 00 77 03 27 03 2c 00 0b 00 6a 08 b9 07     +...w.'.,...j...
    273a:	2c 00 0c 00 b8 07 5e 06 2c 00 0d 00 5d 06 3e 05     ,.....^.,...].>.
    274a:	2c 00 0e 00 3d 05 53 04 2c 00 0f 00 52 04 8c 03     ,...=.S.,...R...
    275a:	2c 00 10 00 8b 03 39 03 2d 00 0b 00 9b 08 e6 07     ,.....9.-.......
    276a:	2d 00 0c 00 e5 07 83 06 2d 00 0d 00 82 06 5c 05     -.......-.....\.
    277a:	2d 00 0e 00 5b 05 6b 04 2d 00 0f 00 6a 04 a1 03     -...[.k.-...j...
    278a:	2d 00 10 00 a0 03 4c 03 2e 00 0b 00 cc 08 13 08     -.....L.........
    279a:	2e 00 0c 00 12 08 a8 06 2e 00 0d 00 a7 06 7a 05     ..............z.
    27aa:	2e 00 0e 00 79 05 85 04 2e 00 0f 00 84 04 b6 03     ....y...........
    27ba:	2e 00 10 00 b5 03 5f 03 2f 00 0b 00 fd 08 40 08     ......_./.....@.
    27ca:	2f 00 0c 00 3f 08 ce 06 2f 00 0d 00 cd 06 99 05     /...?.../.......
    27da:	2f 00 0e 00 98 05 9e 04 2f 00 0f 00 9d 04 ca 03     /......./.......
    27ea:	2f 00 10 00 c9 03 72 03 30 00 0b 00 2e 09 6d 08     /.....r.0.....m.
    27fa:	30 00 0c 00 6c 08 f3 06 30 00 0d 00 f2 06 b8 05     0...l...0.......
    280a:	30 00 0e 00 b7 05 b7 04 30 00 0f 00 b6 04 df 03     0.......0.......
    281a:	30 00 10 00 de 03 84 03 31 00 0b 00 5f 09 9a 08     0.......1..._...
    282a:	31 00 0c 00 99 08 18 07 31 00 0d 00 17 07 d6 05     1.......1.......
    283a:	31 00 0e 00 d5 05 d0 04 31 00 0f 00 cf 04 f3 03     1.......1.......
    284a:	31 00 10 00 f2 03 97 03 32 00 0b 00 90 09 c7 08     1.......2.......
    285a:	32 00 0c 00 c6 08 3d 07 32 00 0d 00 3c 07 f4 05     2.....=.2...<...
    286a:	32 00 0e 00 f3 05 e9 04 32 00 0f 00 e8 04 08 04     2.......2.......
    287a:	32 00 10 00 07 04 aa 03 33 00 0b 00 c1 09 f4 08     2.......3.......
    288a:	33 00 0c 00 f3 08 62 07 33 00 0d 00 61 07 13 06     3.....b.3...a...
    289a:	33 00 0e 00 12 06 02 05 33 00 0f 00 01 05 1d 04     3.......3.......
    28aa:	33 00 10 00 1c 04 bd 03 34 00 0c 00 4f 08 87 07     3.......4...O...
    28ba:	34 00 0d 00 86 07 32 06 34 00 0e 00 31 06 1c 05     4.....2.4...1...
    28ca:	34 00 0f 00 1b 05 31 04 34 00 10 00 30 04 cf 03     4.....1.4...0...
    28da:	35 00 0c 00 77 08 ac 07 35 00 0d 00 ab 07 50 06     5...w...5.....P.
    28ea:	35 00 0e 00 4f 06 34 05 35 00 0f 00 33 05 46 04     5...O.4.5...3.F.
    28fa:	35 00 10 00 45 04 e2 03 36 00 0c 00 a0 08 d1 07     5...E...6.......
    290a:	36 00 0d 00 d0 07 6e 06 36 00 0e 00 6d 06 4e 05     6.....n.6...m.N.
    291a:	36 00 0f 00 4d 05 5b 04 36 00 10 00 5a 04 f5 03     6...M.[.6...Z...
    292a:	37 00 0c 00 c9 08 f6 07 37 00 0d 00 f5 07 8d 06     7.......7.......
    293a:	37 00 0e 00 8c 06 67 05 37 00 0f 00 66 05 6f 04     7.....g.7...f.o.
    294a:	37 00 10 00 6e 04 08 04 38 00 0c 00 f2 08 1b 08     7...n...8.......
    295a:	38 00 0d 00 1a 08 ab 06 38 00 0e 00 aa 06 80 05     8.......8.......
    296a:	38 00 0f 00 7f 05 84 04 38 00 10 00 83 04 1b 04     8.......8.......
    297a:	39 00 0c 00 1b 09 40 08 39 00 0d 00 3f 08 ca 06     9.....@.9...?...
    298a:	39 00 0e 00 c9 06 99 05 39 00 0f 00 98 05 98 04     9.......9.......
    299a:	39 00 10 00 97 04 2d 04 3a 00 0c 00 44 09 65 08     9.....-.:...D.e.
    29aa:	3a 00 0d 00 64 08 e8 06 3a 00 0e 00 e7 06 b2 05     :...d...:.......
    29ba:	3a 00 0f 00 b1 05 ad 04 3a 00 10 00 ac 04 40 04     :.......:.....@.
    29ca:	3b 00 0c 00 6d 09 8a 08 3b 00 0d 00 89 08 07 07     ;...m...;.......
    29da:	3b 00 0e 00 06 07 cb 05 3b 00 0f 00 ca 05 c2 04     ;.......;.......
    29ea:	3b 00 10 00 c1 04 53 04 3c 00 0c 00 96 09 af 08     ;.....S.<.......
    29fa:	3c 00 0d 00 ae 08 25 07 3c 00 0e 00 24 07 e5 05     <.....%.<...$...
    2a0a:	3c 00 0f 00 e4 05 d7 04 3c 00 10 00 d6 04 66 04     <.......<.....f.
    2a1a:	3d 00 0c 00 bf 09 d4 08 3d 00 0d 00 d3 08 44 07     =.......=.....D.
    2a2a:	3d 00 0e 00 43 07 fe 05 3d 00 0f 00 fd 05 eb 04     =...C...=.......
    2a3a:	3d 00 10 00 ea 04 78 04 3e 00 0d 00 0b 08 62 07     =.....x.>.....b.
    2a4a:	3e 00 0e 00 61 07 17 06 3e 00 0f 00 16 06 00 05     >...a...>.......
    2a5a:	3e 00 10 00 ff 04 8b 04 3f 00 0d 00 2c 08 81 07     >.......?...,...
    2a6a:	3f 00 0e 00 80 07 30 06 3f 00 0f 00 2f 06 14 05     ?.....0.?.../...
    2a7a:	3f 00 10 00 13 05 9e 04 40 00 0d 00 4d 08 9f 07     ?.......@...M...
    2a8a:	40 00 0e 00 9e 07 49 06 40 00 0f 00 48 06 29 05     @.....I.@...H.).
    2a9a:	40 00 10 00 28 05 b1 04 41 00 0d 00 6e 08 be 07     @...(...A...n...
    2aaa:	41 00 0e 00 bd 07 62 06 41 00 0f 00 61 06 3d 05     A.....b.A...a.=.
    2aba:	41 00 10 00 3c 05 c3 04 42 00 0d 00 8f 08 dc 07     A...<...B.......
    2aca:	42 00 0e 00 db 07 7b 06 42 00 0f 00 7a 06 52 05     B.....{.B...z.R.
    2ada:	42 00 10 00 51 05 d6 04 43 00 0d 00 b1 08 fb 07     B...Q...C.......
    2aea:	43 00 0e 00 fa 07 94 06 43 00 0f 00 93 06 67 05     C.......C.....g.
    2afa:	43 00 10 00 66 05 e9 04 44 00 0d 00 d2 08 19 08     C...f...D.......
    2b0a:	44 00 0e 00 18 08 ae 06 44 00 0f 00 ad 06 7c 05     D.......D.....|.
    2b1a:	44 00 10 00 7b 05 fc 04 45 00 0d 00 f3 08 38 08     D...{...E.....8.
    2b2a:	45 00 0e 00 37 08 c7 06 45 00 0f 00 c6 06 90 05     E...7...E.......
    2b3a:	45 00 10 00 8f 05 0e 05 46 00 0d 00 14 09 56 08     E.......F.....V.
    2b4a:	46 00 0e 00 55 08 e0 06 46 00 0f 00 df 06 a5 05     F...U...F.......
    2b5a:	46 00 10 00 a4 05 21 05 47 00 0d 00 36 09 75 08     F.....!.G...6.u.
    2b6a:	47 00 0e 00 74 08 f9 06 47 00 0f 00 f8 06 b9 05     G...t...G.......
    2b7a:	47 00 10 00 b8 05 34 05 48 00 0d 00 57 09 93 08     G.....4.H...W...
    2b8a:	48 00 0e 00 92 08 12 07 48 00 0f 00 11 07 ce 05     H.......H.......
    2b9a:	48 00 10 00 cd 05 47 05 49 00 0d 00 78 09 b2 08     H.....G.I...x...
    2baa:	49 00 0e 00 b1 08 2b 07 49 00 0f 00 2a 07 e2 05     I.....+.I...*...
    2bba:	49 00 10 00 e1 05 59 05 4a 00 0d 00 99 09 d0 08     I.....Y.J.......
    2bca:	4a 00 0e 00 cf 08 45 07 4a 00 0f 00 44 07 f7 05     J.....E.J...D...
    2bda:	4a 00 10 00 f6 05 6c 05 4b 00 0d 00 ba 09 ee 08     J.....l.K.......
    2bea:	4b 00 0e 00 ed 08 5d 07 4b 00 0f 00 5c 07 0c 06     K.....].K...\...
    2bfa:	4b 00 10 00 0b 06 7f 05 4c 00 0e 00 3e 08 77 07     K.......L...>.w.
    2c0a:	4c 00 0f 00 76 07 21 06 4c 00 10 00 20 06 92 05     L...v.!.L... ...
    2c1a:	4d 00 0e 00 5a 08 90 07 4d 00 0f 00 8f 07 35 06     M...Z...M.....5.
    2c2a:	4d 00 10 00 34 06 a4 05 4e 00 0e 00 76 08 a9 07     M...4...N...v...
    2c3a:	4e 00 0f 00 a8 07 4a 06 4e 00 10 00 49 06 b7 05     N.....J.N...I...
    2c4a:	4f 00 0e 00 91 08 c2 07 4f 00 0f 00 c1 07 5e 06     O.......O.....^.
    2c5a:	4f 00 10 00 5d 06 ca 05 50 00 0e 00 ad 08 db 07     O...]...P.......
    2c6a:	50 00 0f 00 da 07 73 06 50 00 10 00 72 06 dd 05     P.....s.P...r...
    2c7a:	51 00 0e 00 c9 08 f4 07 51 00 0f 00 f3 07 88 06     Q.......Q.......
    2c8a:	51 00 10 00 87 06 f0 05 52 00 0e 00 e5 08 0e 08     Q.......R.......
    2c9a:	52 00 0f 00 0d 08 9c 06 52 00 10 00 9b 06 02 06     R.......R.......
    2caa:	53 00 0e 00 00 09 26 08 53 00 0f 00 25 08 b1 06     S.....&.S...%...
    2cba:	53 00 10 00 b0 06 15 06 54 00 0e 00 1c 09 40 08     S.......T.....@.
    2cca:	54 00 0f 00 3f 08 c6 06 54 00 10 00 c5 06 28 06     T...?...T.....(.
    2cda:	55 00 0e 00 38 09 59 08 55 00 0f 00 58 08 da 06     U...8.Y.U...X...
    2cea:	55 00 10 00 d9 06 3b 06 56 00 0e 00 54 09 72 08     U.....;.V...T.r.
    2cfa:	56 00 0f 00 71 08 ef 06 56 00 10 00 ee 06 4d 06     V...q...V.....M.
    2d0a:	57 00 0e 00 6f 09 8b 08 57 00 0f 00 8a 08 03 07     W...o...W.......
    2d1a:	57 00 10 00 02 07 60 06 58 00 0e 00 8b 09 a4 08     W.....`.X.......
    2d2a:	58 00 0f 00 a3 08 18 07 58 00 10 00 17 07 73 06     X.......X.....s.
    2d3a:	59 00 0e 00 a7 09 be 08 59 00 0f 00 bd 08 2d 07     Y.......Y.....-.
    2d4a:	59 00 10 00 2c 07 86 06 5a 00 0e 00 c4 09 d7 08     Y...,...Z.......
    2d5a:	5a 00 0f 00 d6 08 41 07 5a 00 10 00 40 07 98 06     Z.....A.Z...@...

00002d6a <GearIndex>:
    2d6a:	00 00 02 00 06 00 0b 00 11 00 18 00 21 00 29 00     ............!.).
    2d7a:	32 00 3a 00 43 00 4b 00 54 00 5c 00 64 00 6d 00     2.:.C.K.T.\.d.m.
    2d8a:	76 00 7f 00 88 00 91 00 99 00 a1 00 aa 00 b3 00     v...............
    2d9a:	bc 00 c4 00 cd 00 d6 00 df 00 e8 00 f0 00 f8 00     ................
    2daa:	00 01 08 01 0f 01 16 01 1d 01 24 01 2b 01 32 01     ..........$.+.2.
    2dba:	39 01 3f 01 45 01 4b 01 51 01 57 01 5d 01 63 01     9.?.E.K.Q.W.].c.
    2dca:	69 01 6f 01 75 01 7a 01 7f 01 84 01 89 01 8e 01     i.o.u.z.........
    2dda:	93 01 98 01 9d 01 a2 01 a7 01 ab 01 af 01 b3 01     ................
    2dea:	b7 01 bb 01 bf 01 c3 01 c7 01 cb 01 cf 01 d3 01     ................
    2dfa:	d7 01 db 01 df 01 e2 01 e5 01 e8 01 eb 01 ee 01     ................
    2e0a:	f1 01 f4 01 f7 01 fa 01 fd 01 00 02 03 02 06 02     ................
    2e1a:	09 02 0c 02                                         ....

00002e1e <GearLimitsR>:
    2e1e:	02 00 01 00 d6 02 f4 01 03 00 01 00 67 03 1f 03     ............g...
    2e2e:	03 00 02 00 1e 03 d6 02 04 00 01 00 8a 04 29 04     ..............).
    2e3e:	04 00 02 00 28 04 c8 03 05 00 01 00 ac 05 33 05     ....(.........3.
    2e4e:	05 00 02 00 32 05 ba 04 06 00 01 00 ce 06 3d 06     ....2.........=.
    2e5e:	06 00 02 00 3c 06 ac 05 07 00 01 00 f1 07 48 07     ....<.........H.
    2e6e:	07 00 02 00 47 07 9e 06 08 00 01 00 13 09 52 08     ....G.........R.
    2e7e:	08 00 02 00 51 08 90 07 09 00 02 00 bf 08 82 08     ....Q...........
    2e8e:	0a 00 02 00 c4 09 fc 08                             ........

00002e96 <GearIndexR>:
    2e96:	00 00 01 00 03 00 05 00 07 00 09 00 0b 00 0d 00     ................
    2ea6:	0e 00 0f 00                                         ....

00002eaa <__ctors_end>:
    2eaa:	11 24       	eor	r1, r1
    2eac:	1f be       	out	0x3f, r1	; 63
    2eae:	cf ef       	ldi	r28, 0xFF	; 255
    2eb0:	d0 e1       	ldi	r29, 0x10	; 16
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	cd bf       	out	0x3d, r28	; 61

00002eb6 <__do_copy_data>:
    2eb6:	11 e0       	ldi	r17, 0x01	; 1
    2eb8:	a0 e0       	ldi	r26, 0x00	; 0
    2eba:	b1 e0       	ldi	r27, 0x01	; 1
    2ebc:	e2 ed       	ldi	r30, 0xD2	; 210
    2ebe:	f4 e6       	ldi	r31, 0x64	; 100
    2ec0:	00 e0       	ldi	r16, 0x00	; 0
    2ec2:	0b bf       	out	0x3b, r16	; 59
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <__do_copy_data+0x14>
    2ec6:	07 90       	elpm	r0, Z+
    2ec8:	0d 92       	st	X+, r0
    2eca:	a6 31       	cpi	r26, 0x16	; 22
    2ecc:	b1 07       	cpc	r27, r17
    2ece:	d9 f7       	brne	.-10     	; 0x2ec6 <__do_copy_data+0x10>

00002ed0 <__do_clear_bss>:
    2ed0:	10 e1       	ldi	r17, 0x10	; 16
    2ed2:	a6 e1       	ldi	r26, 0x16	; 22
    2ed4:	b1 e0       	ldi	r27, 0x01	; 1
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <.do_clear_bss_start>

00002ed8 <.do_clear_bss_loop>:
    2ed8:	1d 92       	st	X+, r1

00002eda <.do_clear_bss_start>:
    2eda:	a2 3a       	cpi	r26, 0xA2	; 162
    2edc:	b1 07       	cpc	r27, r17
    2ede:	e1 f7       	brne	.-8      	; 0x2ed8 <.do_clear_bss_loop>
    2ee0:	0e 94 76 17 	call	0x2eec	; 0x2eec <main>
    2ee4:	0c 94 67 32 	jmp	0x64ce	; 0x64ce <_exit>

00002ee8 <__bad_interrupt>:
    2ee8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002eec <main>:
//
// Result   : int, exit code
//
//*****************************************************************************
int main(void)                 
{
    2eec:	1f 93       	push	r17

	
	
	sbi (DDRE, PORTE3);				// PORTE3: set to output
    2eee:	6b 9a       	sbi	0x0d, 3	; 13
	sbi (PORTE, PORTE3);			// used to measure by oscilloscope
    2ef0:	73 9a       	sbi	0x0e, 3	; 14
									// where is serviced the AvrX timer handler
									// and LCD refresh.
									// low = consumed time, high = free time
									// task switching time is not included!	
	
	outp((1<<SE), MCUCR); 			// Enable "Sleep" instruction for idle loop
    2ef2:	11 e0       	ldi	r17, 0x01	; 1
    2ef4:	15 bf       	out	0x35, r17	; 53
		
    AvrXSetKernelStack(0);			// use default SP for AvrX stack
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 9e 30 	call	0x613c	; 0x613c <AvrXSetKernelStack>

    outp((1<<AS2), ASSR);		   	// set Timer2 to use watch crystal
    2efe:	88 e0       	ldi	r24, 0x08	; 8
    2f00:	80 93 b6 00 	sts	0x00B6, r24
    outp(0, TCNT2);
    2f04:	10 92 b2 00 	sts	0x00B2, r1
    outp(5, TCCR2A);  				// prescaler for 32768/128 rate = 1 int/sec
    2f08:	85 e0       	ldi	r24, 0x05	; 5
    2f0a:	80 93 b0 00 	sts	0x00B0, r24
	outp((1<<TOIE2), TIMSK2); 		// enable Timer2 interrupt
    2f0e:	10 93 70 00 	sts	0x0070, r17

    outp(TCNT0_INIT, TCNT0);
    2f12:	8f e3       	ldi	r24, 0x3F	; 63
    2f14:	86 bd       	out	0x26, r24	; 38
    outp(2, TCCR0A);    			// Set up Timer0 for CLK/8 rate
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	84 bd       	out	0x24, r24	; 36
    outp((1<<TOIE0), TIMSK0);     	// Enable Timer0 overflow interrupt
    2f1a:	10 93 6e 00 	sts	0x006E, r17

	cbi(DDRC, PC0);
    2f1e:	38 98       	cbi	0x07, 0	; 7
	cbi(DDRC, PC1);
    2f20:	39 98       	cbi	0x07, 1	; 7
	cbi(DDRC, PC2);
    2f22:	3a 98       	cbi	0x07, 2	; 7
	cbi(DDRC, PC3);
    2f24:	3b 98       	cbi	0x07, 3	; 7

	sbi(PORTC, PC0);
    2f26:	40 9a       	sbi	0x08, 0	; 8
	sbi(PORTC, PC1);
    2f28:	41 9a       	sbi	0x08, 1	; 8
	sbi(PORTC, PC2);
    2f2a:	42 9a       	sbi	0x08, 2	; 8
	sbi(PORTC, PC3);
    2f2c:	43 9a       	sbi	0x08, 3	; 8

	EndCritical();					// Global interupts enable
    2f2e:	78 94       	sei

    AvrXRunTask(TCB(MainTask));    	// start the program main task
    2f30:	86 e9       	ldi	r24, 0x96	; 150
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	0e 94 aa 30 	call	0x6154	; 0x6154 <AvrXRunTask>

    Epilog();                   	// Switch from AvrX Stack to first task
    2f38:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>
									// never returns
    
    return (1);						// added to remove warning
}
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	1f 91       	pop	r17
    2f42:	08 95       	ret

00002f44 <MainTask>:
//*****************************************************************************


AVRX_TIMER(MainTaskTimer);
AVRX_GCC_TASKDEF(MainTask, 200, 6)
{
    2f44:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <LCDInitialize>
	U8 buf[10];

	// do some initialization here
	LCDInitialize();

	LCDStart();
    2f48:	0e 94 18 21 	call	0x4230	; 0x4230 <LCDStart>

	TouchScreenInit();
    2f4c:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <TouchScreenInit>
	
	TouchScreenStart();
    2f50:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <TouchScreenStart>

	TWIInit();
    2f54:	0e 94 2c 2a 	call	0x5458	; 0x5458 <TWIInit>

	TWIStart();
    2f58:	0e 94 38 2a 	call	0x5470	; 0x5470 <TWIStart>

	FMeterInit();
    2f5c:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <FMeterInit>

    // start another task	
	AvrXRunTask(TCB(ClockTask));
    2f60:	81 e8       	ldi	r24, 0x81	; 129
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	0e 94 aa 30 	call	0x6154	; 0x6154 <AvrXRunTask>
	AvrXRunTask(TCB(ADCTask));
    2f68:	88 e8       	ldi	r24, 0x88	; 136
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	0e 94 aa 30 	call	0x6154	; 0x6154 <AvrXRunTask>
	AvrXRunTask(TCB(GearTask));
    2f70:	8f e8       	ldi	r24, 0x8F	; 143
    2f72:	91 e0       	ldi	r25, 0x01	; 1
    2f74:	0e 94 aa 30 	call	0x6154	; 0x6154 <AvrXRunTask>

	// the endless loop of the task
	while (1)
	{

		LCDWriteIcon(0, 10, LINE);
    2f78:	4b e0       	ldi	r20, 0x0B	; 11
    2f7a:	6a e0       	ldi	r22, 0x0A	; 10
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>

		// do the action once each 3s
		AvrXDelay (&MainTaskTimer, mConvertMsToTicks(3000));
    2f82:	60 e3       	ldi	r22, 0x30	; 48
    2f84:	75 e7       	ldi	r23, 0x75	; 117
    2f86:	87 e4       	ldi	r24, 0x47	; 71
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

		if((TWIStopped == 1) && (tobeAdjusted == 0)){
    2f8e:	80 91 8b 10 	lds	r24, 0x108B
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	89 f7       	brne	.-30     	; 0x2f78 <MainTask+0x34>
    2f96:	80 91 7f 10 	lds	r24, 0x107F
    2f9a:	88 23       	and	r24, r24
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <MainTask+0x34>
					if(FuelMode == LITER_MODE){
    2f9e:	80 91 86 10 	lds	r24, 0x1086
    2fa2:	88 23       	and	r24, r24
    2fa4:	41 f5       	brne	.+80     	; 0x2ff6 <MainTask+0xb2>
						if(FuelLevel >147) LCDWriteIcon(0, 16, CLR_TEMP);
    2fa6:	80 91 89 10 	lds	r24, 0x1089
    2faa:	90 91 8a 10 	lds	r25, 0x108A
    2fae:	84 39       	cpi	r24, 0x94	; 148
    2fb0:	91 05       	cpc	r25, r1
    2fb2:	38 f5       	brcc	.+78     	; 0x3002 <MainTask+0xbe>
					}else if(FuelLevel >14) LCDWriteIcon(0, 16, CLR_TEMP);
					LCDWriteIcon(5, 25, CELSIUS);
    2fb4:	4f e0       	ldi	r20, 0x0F	; 15
    2fb6:	69 e1       	ldi	r22, 0x19	; 25
    2fb8:	85 e0       	ldi	r24, 0x05	; 5
    2fba:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
					LCDWriteStrP(0, 2, temp, DISP_NORMAL);
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	49 ec       	ldi	r20, 0xC9	; 201
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	62 e0       	ldi	r22, 0x02	; 2
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
					if((TWIByte & (1<<7)) != 0)	LCDWriteIcon(0, 25, MINUS);
    2fcc:	80 91 8c 10 	lds	r24, 0x108C
    2fd0:	87 fd       	sbrc	r24, 7
    2fd2:	1d c0       	rjmp	.+58     	; 0x300e <MainTask+0xca>
					else LCDWriteIcon(0, 25, CLR_MINUS);
    2fd4:	41 e1       	ldi	r20, 0x11	; 17
    2fd6:	69 e1       	ldi	r22, 0x19	; 25
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
					LCDWriteDigit(1, 25, SMALL_DIGIT, TWIByte, 2);
    2fde:	20 91 8c 10 	lds	r18, 0x108C
    2fe2:	02 e0       	ldi	r16, 0x02	; 2
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	69 e1       	ldi	r22, 0x19	; 25
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>

		TWIStart();
    2ff0:	0e 94 38 2a 	call	0x5470	; 0x5470 <TWIStart>
    2ff4:	c1 cf       	rjmp	.-126    	; 0x2f78 <MainTask+0x34>
		AvrXDelay (&MainTaskTimer, mConvertMsToTicks(3000));

		if((TWIStopped == 1) && (tobeAdjusted == 0)){
					if(FuelMode == LITER_MODE){
						if(FuelLevel >147) LCDWriteIcon(0, 16, CLR_TEMP);
					}else if(FuelLevel >14) LCDWriteIcon(0, 16, CLR_TEMP);
    2ff6:	80 91 89 10 	lds	r24, 0x1089
    2ffa:	90 91 8a 10 	lds	r25, 0x108A
    2ffe:	0f 97       	sbiw	r24, 0x0f	; 15
    3000:	c8 f2       	brcs	.-78     	; 0x2fb4 <MainTask+0x70>
    3002:	40 e1       	ldi	r20, 0x10	; 16
    3004:	60 e1       	ldi	r22, 0x10	; 16
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    300c:	d3 cf       	rjmp	.-90     	; 0x2fb4 <MainTask+0x70>
					LCDWriteIcon(5, 25, CELSIUS);
					LCDWriteStrP(0, 2, temp, DISP_NORMAL);
					if((TWIByte & (1<<7)) != 0)	LCDWriteIcon(0, 25, MINUS);
    300e:	4e e0       	ldi	r20, 0x0E	; 14
    3010:	69 e1       	ldi	r22, 0x19	; 25
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    3018:	e2 cf       	rjmp	.-60     	; 0x2fde <MainTask+0x9a>

0000301a <GearTask>:
}



AVRX_TIMER(GearTaskTimer);
AVRX_GCC_TASKDEF(GearTask, 50, 3){
    301a:	0e 94 bc 2b 	call	0x5778	; 0x5778 <InitGear>


	//Init Gear Modul
	InitGear();

	FMeterStartMeasurement();
    301e:	0e 94 9c 2c 	call	0x5938	; 0x5938 <FMeterStartMeasurement>
		RPM_counter = FMeterReadLastMeasurement(FREQ1);
		

		//Print Speed & RPM
			
			LCDWriteDigit(11, 46, BIG_DIGIT, (Speed/5)*5, 2);
    3022:	15 e0       	ldi	r17, 0x05	; 5
			//LCDWriteDigit(11, 46, BIG_DIGIT, Speed, 2);
			//LCDWriteDigit(1, 58, SMALL_DIGIT, RPM_counter, 4);	

			DetermineRPM(RPM_counter);

			LCDWriteDigit(1, 58, SMALL_DIGIT, (RPM/50)*50, 4);	
    3024:	c2 e3       	ldi	r28, 0x32	; 50
    3026:	d0 e0       	ldi	r29, 0x00	; 0
		//Reading touchscreen values for changing Gear Advisor Mode
		if((TouchScreenValueX>=173)&&(TouchScreenValueX<=605)&&(TouchScreenValueY>=755)&&(TouchScreenValueY<=860)){
			
			if(GearAdvisorMode == ECONOMIC_MODE){
					
				GearAdvisorMode = SPORT_MODE;
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	f8 2e       	mov	r15, r24
    302c:	0f c0       	rjmp	.+30     	; 0x304c <GearTask+0x32>
		}		


	}
	
		Gear_counter++;
    302e:	80 91 16 01 	lds	r24, 0x0116
    3032:	90 91 17 01 	lds	r25, 0x0117
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	90 93 17 01 	sts	0x0117, r25
    303c:	80 93 16 01 	sts	0x0116, r24
		AvrXDelay(&ADCTaskTimer, mConvertMsToTicks(100));
    3040:	68 ee       	ldi	r22, 0xE8	; 232
    3042:	73 e0       	ldi	r23, 0x03	; 3
    3044:	88 ea       	ldi	r24, 0xA8	; 168
    3046:	91 e0       	ldi	r25, 0x01	; 1
    3048:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

	FMeterStartMeasurement();

	while(1){

	if(tobeAdjusted == 0){	// If Clock modul is not in adjustment mode
    304c:	80 91 7f 10 	lds	r24, 0x107F
    3050:	88 23       	and	r24, r24
    3052:	69 f7       	brne	.-38     	; 0x302e <GearTask+0x14>

		//Print Labels
		LCDWriteStrP(17, 8, km, DISP_NORMAL);
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	46 e0       	ldi	r20, 0x06	; 6
    3058:	51 e0       	ldi	r21, 0x01	; 1
    305a:	68 e0       	ldi	r22, 0x08	; 8
    305c:	81 e1       	ldi	r24, 0x11	; 17
    305e:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
		LCDWriteStrP(17, 9, kmh, DISP_NORMAL);
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	4c eb       	ldi	r20, 0xBC	; 188
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	69 e0       	ldi	r22, 0x09	; 9
    306a:	81 e1       	ldi	r24, 0x11	; 17
    306c:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
		LCDWriteStrP(0, 6, rpm, DISP_NORMAL);
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	40 ec       	ldi	r20, 0xC0	; 192
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	66 e0       	ldi	r22, 0x06	; 6
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
		LCDWriteStrP(18, 19, km, DISP_NORMAL);
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	46 e0       	ldi	r20, 0x06	; 6
    3082:	51 e0       	ldi	r21, 0x01	; 1
    3084:	63 e1       	ldi	r22, 0x13	; 19
    3086:	82 e1       	ldi	r24, 0x12	; 18
    3088:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>

		
		RPM_counter = FMeterReadLastMeasurement(FREQ1);
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	0e 94 b7 2c 	call	0x596e	; 0x596e <FMeterReadLastMeasurement>
    3092:	90 93 1c 01 	sts	0x011C, r25
    3096:	80 93 1b 01 	sts	0x011B, r24
		

		//Print Speed & RPM
			
			LCDWriteDigit(11, 46, BIG_DIGIT, (Speed/5)*5, 2);
    309a:	80 91 8d 10 	lds	r24, 0x108D
    309e:	65 e0       	ldi	r22, 0x05	; 5
    30a0:	0e 94 10 32 	call	0x6420	; 0x6420 <__udivmodqi4>
    30a4:	81 9f       	mul	r24, r17
    30a6:	c0 01       	movw	r24, r0
    30a8:	11 24       	eor	r1, r1
    30aa:	02 e0       	ldi	r16, 0x02	; 2
    30ac:	9c 01       	movw	r18, r24
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	6e e2       	ldi	r22, 0x2E	; 46
    30b2:	8b e0       	ldi	r24, 0x0B	; 11
    30b4:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>

			//LCDWriteDigit(11, 46, BIG_DIGIT, Speed, 2);
			//LCDWriteDigit(1, 58, SMALL_DIGIT, RPM_counter, 4);	

			DetermineRPM(RPM_counter);
    30b8:	80 91 1b 01 	lds	r24, 0x011B
    30bc:	90 91 1c 01 	lds	r25, 0x011C
    30c0:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <DetermineRPM>

			LCDWriteDigit(1, 58, SMALL_DIGIT, (RPM/50)*50, 4);	
    30c4:	80 91 94 10 	lds	r24, 0x1094
    30c8:	90 91 95 10 	lds	r25, 0x1095
    30cc:	62 e3       	ldi	r22, 0x32	; 50
    30ce:	70 e0       	ldi	r23, 0x00	; 0
    30d0:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    30d4:	6c 9f       	mul	r22, r28
    30d6:	90 01       	movw	r18, r0
    30d8:	6d 9f       	mul	r22, r29
    30da:	30 0d       	add	r19, r0
    30dc:	7c 9f       	mul	r23, r28
    30de:	30 0d       	add	r19, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	04 e0       	ldi	r16, 0x04	; 4
    30e4:	41 e0       	ldi	r20, 0x01	; 1
    30e6:	6a e3       	ldi	r22, 0x3A	; 58
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
		
		//Print Distance/Trip 
		if(DistanceTripMode == TRIP){
    30ee:	80 91 90 10 	lds	r24, 0x1090
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <GearTask+0xde>
    30f6:	f5 c0       	rjmp	.+490    	; 0x32e2 <GearTask+0x2c8>
				LCDWriteStrP(9, 16, trip, DISP_NORMAL);
				LCDWriteDigit(10, 138, SMALL_DIGIT, (Trip/1000), 4);
			
		}else{

				LCDWriteStrP(9, 16, distance, DISP_NORMAL);
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	4f ee       	ldi	r20, 0xEF	; 239
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	60 e1       	ldi	r22, 0x10	; 16
    3100:	89 e0       	ldi	r24, 0x09	; 9
    3102:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteDigit(10, 138, SMALL_DIGIT, (Distance/1000), 4);
    3106:	80 91 8e 10 	lds	r24, 0x108E
    310a:	90 91 8f 10 	lds	r25, 0x108F
    310e:	68 ee       	ldi	r22, 0xE8	; 232
    3110:	73 e0       	ldi	r23, 0x03	; 3
    3112:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    3116:	9b 01       	movw	r18, r22
    3118:	04 e0       	ldi	r16, 0x04	; 4
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	6a e8       	ldi	r22, 0x8A	; 138
    311e:	8a e0       	ldi	r24, 0x0A	; 10
    3120:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
		}
		

		
		//Indications for Gear Advisor Mode
		if(GearAdvisorMode == ECONOMIC_MODE){
    3124:	80 91 91 10 	lds	r24, 0x1091
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	09 f4       	brne	.+2      	; 0x312e <GearTask+0x114>
    312c:	fb c0       	rjmp	.+502    	; 0x3324 <GearTask+0x30a>
				LCDWriteIcon(18, 12, ECONOMIC_MODE);
		}else{
				LCDWriteIcon(18, 29, SPORT_MODE);
    312e:	43 e0       	ldi	r20, 0x03	; 3
    3130:	6d e1       	ldi	r22, 0x1D	; 29
    3132:	82 e1       	ldi	r24, 0x12	; 18
    3134:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
			
		}
		
		//Indication for Reverse Gear
		if(GearType == REVERSE_GEAR){
    3138:	80 91 92 10 	lds	r24, 0x1092
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	09 f4       	brne	.+2      	; 0x3142 <GearTask+0x128>
    3140:	fb c0       	rjmp	.+502    	; 0x3338 <GearTask+0x31e>
				LCDWriteIcon(11, 12, R_GEAR);	
				LCDWriteIcon(13, 17, CLR_GEAR_ADV);
				LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
		}else{
				LCDWriteIcon(11, 12, CLR_SMALL_DIGIT);
    3142:	41 e0       	ldi	r20, 0x01	; 1
    3144:	6c e0       	ldi	r22, 0x0C	; 12
    3146:	8b e0       	ldi	r24, 0x0B	; 11
    3148:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
		}

		//The Function determines which is the current gear
		DetermineGear();
    314c:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <DetermineGear>


		//Print Current Gear
		if(Gear == 0){
    3150:	20 91 93 10 	lds	r18, 0x1093
    3154:	22 23       	and	r18, r18
    3156:	09 f4       	brne	.+2      	; 0x315a <GearTask+0x140>
    3158:	05 c1       	rjmp	.+522    	; 0x3364 <GearTask+0x34a>
			//Clear
			LCDWriteIcon(13, 17, CLR_GEAR_ADV);
			//Clear
			LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
		}else//Gears are 16, but they are printed in mode: "1..8+-"
			if((Gear)%2 == 0){	//Fast Gear
    315a:	20 fd       	sbrc	r18, 0
    315c:	ad c0       	rjmp	.+346    	; 0x32b8 <GearTask+0x29e>
				LCDWriteDigit(8, 12, BIG_DIGIT, Gear/2, 1);
    315e:	26 95       	lsr	r18
    3160:	01 e0       	ldi	r16, 0x01	; 1
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	6c e0       	ldi	r22, 0x0C	; 12
    3168:	88 e0       	ldi	r24, 0x08	; 8
    316a:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
				LCDWriteIcon(11, 31, FAST_GEAR);
    316e:	44 e0       	ldi	r20, 0x04	; 4
    3170:	6f e1       	ldi	r22, 0x1F	; 31
    3172:	8b e0       	ldi	r24, 0x0B	; 11
    3174:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(11, 37, CLR_HALF_GEAR);
    3178:	43 e1       	ldi	r20, 0x13	; 19
    317a:	65 e2       	ldi	r22, 0x25	; 37
    317c:	8b e0       	ldi	r24, 0x0B	; 11
    317e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(11, 31, CLR_HALF_GEAR);
				LCDWriteIcon(11, 37, SLOW_GEAR);
			}

		//Reading button status for Forward and Reverse Gears
		if ((PINC & (1<<PC0)) == 0)	   GearType = FORWARD_GEAR;
    3182:	30 99       	sbic	0x06, 0	; 6
    3184:	8d c0       	rjmp	.+282    	; 0x32a0 <GearTask+0x286>
    3186:	10 92 92 10 	sts	0x1092, r1
		else if((PINC & (1<<PC1)) == 0) GearType = REVERSE_GEAR;
		else GearType = NEUTRAL_GEAR;
		
		if ((PINC & (1<<PC2)) == 0)	{
    318a:	32 9b       	sbis	0x06, 2	; 6
    318c:	90 c0       	rjmp	.+288    	; 0x32ae <GearTask+0x294>
		}else{
		
			//nothing
		}

		if ((PINC & (1<<PC3)) == 0)	   LCD_EN_HIGH();
    318e:	33 99       	sbic	0x06, 3	; 6
    3190:	77 c0       	rjmp	.+238    	; 0x3280 <GearTask+0x266>
    3192:	46 9a       	sbi	0x08, 6	; 8
		else LCD_EN_LOW();


		if(Gear_counter == 1200){ // 2 mins elapsed - write EEPROM
    3194:	80 91 16 01 	lds	r24, 0x0116
    3198:	90 91 17 01 	lds	r25, 0x0117
    319c:	80 5b       	subi	r24, 0xB0	; 176
    319e:	94 40       	sbci	r25, 0x04	; 4
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <GearTask+0x18a>
    31a2:	77 c0       	rjmp	.+238    	; 0x3292 <GearTask+0x278>
		}



		//Functionality of Gear Advisor
		if((Gear != 0) && (GearType == FORWARD_GEAR))
    31a4:	20 91 93 10 	lds	r18, 0x1093
    31a8:	22 23       	and	r18, r18
    31aa:	19 f1       	breq	.+70     	; 0x31f2 <GearTask+0x1d8>
    31ac:	80 91 92 10 	lds	r24, 0x1092
    31b0:	88 23       	and	r24, r24
    31b2:	f9 f4       	brne	.+62     	; 0x31f2 <GearTask+0x1d8>
		if(GearAdvisorMode == ECONOMIC_MODE){
    31b4:	80 91 91 10 	lds	r24, 0x1091
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	09 f4       	brne	.+2      	; 0x31be <GearTask+0x1a4>
    31bc:	fe c0       	rjmp	.+508    	; 0x33ba <GearTask+0x3a0>
				//Clear
				LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
			
			}
		}else{
			if(RPM<1500){
    31be:	80 91 94 10 	lds	r24, 0x1094
    31c2:	90 91 95 10 	lds	r25, 0x1095
    31c6:	35 e0       	ldi	r19, 0x05	; 5
    31c8:	8c 3d       	cpi	r24, 0xDC	; 220
    31ca:	93 07       	cpc	r25, r19
    31cc:	08 f4       	brcc	.+2      	; 0x31d0 <GearTask+0x1b6>
    31ce:	e8 c0       	rjmp	.+464    	; 0x33a0 <GearTask+0x386>
					LCDWriteIcon(13, 17, CLR_GEAR_ADV);
					//Clear
					LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
			
				}	
			}else if(RPM >2000){
    31d0:	81 5d       	subi	r24, 0xD1	; 209
    31d2:	97 40       	sbci	r25, 0x07	; 7
    31d4:	08 f4       	brcc	.+2      	; 0x31d8 <GearTask+0x1be>
    31d6:	fd c0       	rjmp	.+506    	; 0x33d2 <GearTask+0x3b8>
				if(Gear < 16){
    31d8:	20 31       	cpi	r18, 0x10	; 16
    31da:	08 f0       	brcs	.+2      	; 0x31de <GearTask+0x1c4>
    31dc:	fa c0       	rjmp	.+500    	; 0x33d2 <GearTask+0x3b8>
					LCDWriteIcon(13, 17, GEAR_UP);
    31de:	46 e0       	ldi	r20, 0x06	; 6
				
				}
			}else{
				
				//Clear
				LCDWriteIcon(13, 17, CLR_GEAR_ADV);
    31e0:	61 e1       	ldi	r22, 0x11	; 17
    31e2:	8d e0       	ldi	r24, 0x0D	; 13
    31e4:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				//Clear
				LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
    31e8:	42 e1       	ldi	r20, 0x12	; 18
    31ea:	6e e1       	ldi	r22, 0x1E	; 30
    31ec:	8d e0       	ldi	r24, 0x0D	; 13
    31ee:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
			
			}
		}

		//Reading touchscreen values for changing Gear Advisor Mode
		if((TouchScreenValueX>=173)&&(TouchScreenValueX<=605)&&(TouchScreenValueY>=755)&&(TouchScreenValueY<=860)){
    31f2:	20 91 79 10 	lds	r18, 0x1079
    31f6:	30 91 7a 10 	lds	r19, 0x107A
    31fa:	c9 01       	movw	r24, r18
    31fc:	8d 5a       	subi	r24, 0xAD	; 173
    31fe:	90 40       	sbci	r25, 0x00	; 0
    3200:	81 5b       	subi	r24, 0xB1	; 177
    3202:	91 40       	sbci	r25, 0x01	; 1
    3204:	08 f5       	brcc	.+66     	; 0x3248 <GearTask+0x22e>
    3206:	80 91 77 10 	lds	r24, 0x1077
    320a:	90 91 78 10 	lds	r25, 0x1078
    320e:	42 e0       	ldi	r20, 0x02	; 2
    3210:	83 3f       	cpi	r24, 0xF3	; 243
    3212:	94 07       	cpc	r25, r20
    3214:	c8 f0       	brcs	.+50     	; 0x3248 <GearTask+0x22e>
    3216:	8d 55       	subi	r24, 0x5D	; 93
    3218:	93 40       	sbci	r25, 0x03	; 3
    321a:	b0 f4       	brcc	.+44     	; 0x3248 <GearTask+0x22e>
			
			if(GearAdvisorMode == ECONOMIC_MODE){
    321c:	80 91 91 10 	lds	r24, 0x1091
    3220:	82 30       	cpi	r24, 0x02	; 2
    3222:	09 f4       	brne	.+2      	; 0x3226 <GearTask+0x20c>
    3224:	db c0       	rjmp	.+438    	; 0x33dc <GearTask+0x3c2>
				GearAdvisorMode = SPORT_MODE;
				LCDWriteIcon(18, 12, CLR_SMALL_DIGIT);
				LCDWriteIcon(18, 29, SPORT_MODE);
			}else{
			
				GearAdvisorMode = ECONOMIC_MODE;
    3226:	82 e0       	ldi	r24, 0x02	; 2
    3228:	80 93 91 10 	sts	0x1091, r24
				LCDWriteIcon(18, 29, CLR_SMALL_DIGIT);
    322c:	41 e0       	ldi	r20, 0x01	; 1
    322e:	6d e1       	ldi	r22, 0x1D	; 29
    3230:	82 e1       	ldi	r24, 0x12	; 18
    3232:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(18, 12, ECONOMIC_MODE);
    3236:	42 e0       	ldi	r20, 0x02	; 2
    3238:	6c e0       	ldi	r22, 0x0C	; 12
    323a:	82 e1       	ldi	r24, 0x12	; 18
    323c:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    3240:	20 91 79 10 	lds	r18, 0x1079
    3244:	30 91 7a 10 	lds	r19, 0x107A
			}

		}

		//Reading touchscreen values for changing Distance/Trip
		if((TouchScreenValueX>=190)&&(TouchScreenValueX<=550)&&(TouchScreenValueY>=370)&&(TouchScreenValueY<=470)){
    3248:	2e 5b       	subi	r18, 0xBE	; 190
    324a:	30 40       	sbci	r19, 0x00	; 0
    324c:	29 56       	subi	r18, 0x69	; 105
    324e:	31 40       	sbci	r19, 0x01	; 1
    3250:	08 f0       	brcs	.+2      	; 0x3254 <GearTask+0x23a>
    3252:	ed ce       	rjmp	.-550    	; 0x302e <GearTask+0x14>
    3254:	80 91 77 10 	lds	r24, 0x1077
    3258:	90 91 78 10 	lds	r25, 0x1078
    325c:	21 e0       	ldi	r18, 0x01	; 1
    325e:	82 37       	cpi	r24, 0x72	; 114
    3260:	92 07       	cpc	r25, r18
    3262:	08 f4       	brcc	.+2      	; 0x3266 <GearTask+0x24c>
    3264:	e4 ce       	rjmp	.-568    	; 0x302e <GearTask+0x14>
    3266:	87 5d       	subi	r24, 0xD7	; 215
    3268:	91 40       	sbci	r25, 0x01	; 1
    326a:	08 f0       	brcs	.+2      	; 0x326e <GearTask+0x254>
    326c:	e0 ce       	rjmp	.-576    	; 0x302e <GearTask+0x14>
			
			if(DistanceTripMode == DISTANCE){
    326e:	80 91 90 10 	lds	r24, 0x1090
    3272:	88 23       	and	r24, r24
    3274:	09 f0       	breq	.+2      	; 0x3278 <GearTask+0x25e>
    3276:	af c0       	rjmp	.+350    	; 0x33d6 <GearTask+0x3bc>
			
				DistanceTripMode = TRIP;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	80 93 90 10 	sts	0x1090, r24
    327e:	d7 ce       	rjmp	.-594    	; 0x302e <GearTask+0x14>
		
			//nothing
		}

		if ((PINC & (1<<PC3)) == 0)	   LCD_EN_HIGH();
		else LCD_EN_LOW();
    3280:	46 98       	cbi	0x08, 6	; 8


		if(Gear_counter == 1200){ // 2 mins elapsed - write EEPROM
    3282:	80 91 16 01 	lds	r24, 0x0116
    3286:	90 91 17 01 	lds	r25, 0x0117
    328a:	80 5b       	subi	r24, 0xB0	; 176
    328c:	94 40       	sbci	r25, 0x04	; 4
    328e:	09 f0       	breq	.+2      	; 0x3292 <GearTask+0x278>
    3290:	89 cf       	rjmp	.-238    	; 0x31a4 <GearTask+0x18a>
			SaveTripDist();
    3292:	0e 94 a3 2b 	call	0x5746	; 0x5746 <SaveTripDist>
		
			Gear_counter = 0;
    3296:	10 92 17 01 	sts	0x0117, r1
    329a:	10 92 16 01 	sts	0x0116, r1
    329e:	82 cf       	rjmp	.-252    	; 0x31a4 <GearTask+0x18a>
				LCDWriteIcon(11, 37, SLOW_GEAR);
			}

		//Reading button status for Forward and Reverse Gears
		if ((PINC & (1<<PC0)) == 0)	   GearType = FORWARD_GEAR;
		else if((PINC & (1<<PC1)) == 0) GearType = REVERSE_GEAR;
    32a0:	31 99       	sbic	0x06, 1	; 6
    32a2:	7a c0       	rjmp	.+244    	; 0x3398 <GearTask+0x37e>
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	80 93 92 10 	sts	0x1092, r24
		else GearType = NEUTRAL_GEAR;
		
		if ((PINC & (1<<PC2)) == 0)	{
    32aa:	32 99       	sbic	0x06, 2	; 6
    32ac:	70 cf       	rjmp	.-288    	; 0x318e <GearTask+0x174>
			
			ClearTrip();
    32ae:	0e 94 85 2b 	call	0x570a	; 0x570a <ClearTrip>
		
			SaveTripDist();
    32b2:	0e 94 a3 2b 	call	0x5746	; 0x5746 <SaveTripDist>
    32b6:	6b cf       	rjmp	.-298    	; 0x318e <GearTask+0x174>
			if((Gear)%2 == 0){	//Fast Gear
				LCDWriteDigit(8, 12, BIG_DIGIT, Gear/2, 1);
				LCDWriteIcon(11, 31, FAST_GEAR);
				LCDWriteIcon(11, 37, CLR_HALF_GEAR);
			}else{				//Slow Gear
				LCDWriteDigit(8, 12, BIG_DIGIT, (Gear/2)+1, 1);
    32b8:	26 95       	lsr	r18
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	01 e0       	ldi	r16, 0x01	; 1
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	6c e0       	ldi	r22, 0x0C	; 12
    32c6:	88 e0       	ldi	r24, 0x08	; 8
    32c8:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
				LCDWriteIcon(11, 31, CLR_HALF_GEAR);
    32cc:	43 e1       	ldi	r20, 0x13	; 19
    32ce:	6f e1       	ldi	r22, 0x1F	; 31
    32d0:	8b e0       	ldi	r24, 0x0B	; 11
    32d2:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(11, 37, SLOW_GEAR);
    32d6:	45 e0       	ldi	r20, 0x05	; 5
    32d8:	65 e2       	ldi	r22, 0x25	; 37
    32da:	8b e0       	ldi	r24, 0x0B	; 11
    32dc:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    32e0:	50 cf       	rjmp	.-352    	; 0x3182 <GearTask+0x168>
			LCDWriteDigit(1, 58, SMALL_DIGIT, (RPM/50)*50, 4);	
		
		//Print Distance/Trip 
		if(DistanceTripMode == TRIP){

				LCDWriteStrP(9, 16, clr_distance, DISP_NORMAL);	
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	48 ef       	ldi	r20, 0xF8	; 248
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	60 e1       	ldi	r22, 0x10	; 16
    32ea:	89 e0       	ldi	r24, 0x09	; 9
    32ec:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteStrP(9, 16, trip, DISP_NORMAL);
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	41 e0       	ldi	r20, 0x01	; 1
    32f4:	51 e0       	ldi	r21, 0x01	; 1
    32f6:	60 e1       	ldi	r22, 0x10	; 16
    32f8:	89 e0       	ldi	r24, 0x09	; 9
    32fa:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteDigit(10, 138, SMALL_DIGIT, (Trip/1000), 4);
    32fe:	80 91 96 10 	lds	r24, 0x1096
    3302:	90 91 97 10 	lds	r25, 0x1097
    3306:	68 ee       	ldi	r22, 0xE8	; 232
    3308:	73 e0       	ldi	r23, 0x03	; 3
    330a:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    330e:	9b 01       	movw	r18, r22
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	6a e8       	ldi	r22, 0x8A	; 138
    3314:	8a e0       	ldi	r24, 0x0A	; 10
    3316:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
		}
		

		
		//Indications for Gear Advisor Mode
		if(GearAdvisorMode == ECONOMIC_MODE){
    331a:	80 91 91 10 	lds	r24, 0x1091
    331e:	82 30       	cpi	r24, 0x02	; 2
    3320:	09 f0       	breq	.+2      	; 0x3324 <GearTask+0x30a>
    3322:	05 cf       	rjmp	.-502    	; 0x312e <GearTask+0x114>
				LCDWriteIcon(18, 12, ECONOMIC_MODE);
    3324:	42 e0       	ldi	r20, 0x02	; 2
    3326:	6c e0       	ldi	r22, 0x0C	; 12
    3328:	82 e1       	ldi	r24, 0x12	; 18
    332a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(18, 29, SPORT_MODE);
			
		}
		
		//Indication for Reverse Gear
		if(GearType == REVERSE_GEAR){
    332e:	80 91 92 10 	lds	r24, 0x1092
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	09 f0       	breq	.+2      	; 0x3338 <GearTask+0x31e>
    3336:	05 cf       	rjmp	.-502    	; 0x3142 <GearTask+0x128>
				LCDWriteIcon(11, 12, R_GEAR);	
    3338:	49 e0       	ldi	r20, 0x09	; 9
    333a:	6c e0       	ldi	r22, 0x0C	; 12
    333c:	8b e0       	ldi	r24, 0x0B	; 11
    333e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(13, 17, CLR_GEAR_ADV);
    3342:	42 e1       	ldi	r20, 0x12	; 18
    3344:	61 e1       	ldi	r22, 0x11	; 17
    3346:	8d e0       	ldi	r24, 0x0D	; 13
    3348:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
    334c:	42 e1       	ldi	r20, 0x12	; 18
    334e:	6e e1       	ldi	r22, 0x1E	; 30
    3350:	8d e0       	ldi	r24, 0x0D	; 13
    3352:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
		}else{
				LCDWriteIcon(11, 12, CLR_SMALL_DIGIT);
		}

		//The Function determines which is the current gear
		DetermineGear();
    3356:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <DetermineGear>


		//Print Current Gear
		if(Gear == 0){
    335a:	20 91 93 10 	lds	r18, 0x1093
    335e:	22 23       	and	r18, r18
    3360:	09 f0       	breq	.+2      	; 0x3364 <GearTask+0x34a>
    3362:	fb ce       	rjmp	.-522    	; 0x315a <GearTask+0x140>
			LCDWriteIcon(8, 12, N_GEAR);
    3364:	48 e0       	ldi	r20, 0x08	; 8
    3366:	6c e0       	ldi	r22, 0x0C	; 12
    3368:	88 e0       	ldi	r24, 0x08	; 8
    336a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
			LCDWriteIcon(11, 37, CLR_HALF_GEAR);
    336e:	43 e1       	ldi	r20, 0x13	; 19
    3370:	65 e2       	ldi	r22, 0x25	; 37
    3372:	8b e0       	ldi	r24, 0x0B	; 11
    3374:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
			LCDWriteIcon(11, 31, CLR_HALF_GEAR);
    3378:	43 e1       	ldi	r20, 0x13	; 19
    337a:	6f e1       	ldi	r22, 0x1F	; 31
    337c:	8b e0       	ldi	r24, 0x0B	; 11
    337e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
			//Clear
			LCDWriteIcon(13, 17, CLR_GEAR_ADV);
    3382:	42 e1       	ldi	r20, 0x12	; 18
    3384:	61 e1       	ldi	r22, 0x11	; 17
    3386:	8d e0       	ldi	r24, 0x0D	; 13
    3388:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
			//Clear
			LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
    338c:	42 e1       	ldi	r20, 0x12	; 18
    338e:	6e e1       	ldi	r22, 0x1E	; 30
    3390:	8d e0       	ldi	r24, 0x0D	; 13
    3392:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    3396:	f5 ce       	rjmp	.-534    	; 0x3182 <GearTask+0x168>
			}

		//Reading button status for Forward and Reverse Gears
		if ((PINC & (1<<PC0)) == 0)	   GearType = FORWARD_GEAR;
		else if((PINC & (1<<PC1)) == 0) GearType = REVERSE_GEAR;
		else GearType = NEUTRAL_GEAR;
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	80 93 92 10 	sts	0x1092, r24
    339e:	f5 ce       	rjmp	.-534    	; 0x318a <GearTask+0x170>
				LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
			
			}
		}else{
			if(RPM<1500){
				if(Gear > 1){
    33a0:	22 30       	cpi	r18, 0x02	; 2
    33a2:	b8 f0       	brcs	.+46     	; 0x33d2 <GearTask+0x3b8>
						LCDWriteIcon(13, 30, GEAR_DOWN);
    33a4:	47 e0       	ldi	r20, 0x07	; 7
    33a6:	6e e1       	ldi	r22, 0x1E	; 30
    33a8:	8d e0       	ldi	r24, 0x0D	; 13
    33aa:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
						//Clear
						LCDWriteIcon(13, 17, CLR_GEAR_ADV);
    33ae:	42 e1       	ldi	r20, 0x12	; 18
    33b0:	61 e1       	ldi	r22, 0x11	; 17
    33b2:	8d e0       	ldi	r24, 0x0D	; 13
    33b4:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    33b8:	1c cf       	rjmp	.-456    	; 0x31f2 <GearTask+0x1d8>

		//Functionality of Gear Advisor
		if((Gear != 0) && (GearType == FORWARD_GEAR))
		if(GearAdvisorMode == ECONOMIC_MODE){
					
			if(RPM<1000){
    33ba:	80 91 94 10 	lds	r24, 0x1094
    33be:	90 91 95 10 	lds	r25, 0x1095
    33c2:	33 e0       	ldi	r19, 0x03	; 3
    33c4:	88 3e       	cpi	r24, 0xE8	; 232
    33c6:	93 07       	cpc	r25, r19
    33c8:	58 f3       	brcs	.-42     	; 0x33a0 <GearTask+0x386>
					LCDWriteIcon(13, 17, CLR_GEAR_ADV);
					//Clear
					LCDWriteIcon(13, 30,  CLR_GEAR_ADV);
				
				}
			}else if(RPM >1500){
    33ca:	8d 5d       	subi	r24, 0xDD	; 221
    33cc:	95 40       	sbci	r25, 0x05	; 5
    33ce:	08 f0       	brcs	.+2      	; 0x33d2 <GearTask+0x3b8>
    33d0:	03 cf       	rjmp	.-506    	; 0x31d8 <GearTask+0x1be>
				
				}
			}else{
				
				//Clear
				LCDWriteIcon(13, 17, CLR_GEAR_ADV);
    33d2:	42 e1       	ldi	r20, 0x12	; 18
    33d4:	05 cf       	rjmp	.-502    	; 0x31e0 <GearTask+0x1c6>
			
				DistanceTripMode = TRIP;
			
			}else{
				
				DistanceTripMode = DISTANCE;
    33d6:	10 92 90 10 	sts	0x1090, r1
    33da:	29 ce       	rjmp	.-942    	; 0x302e <GearTask+0x14>
		//Reading touchscreen values for changing Gear Advisor Mode
		if((TouchScreenValueX>=173)&&(TouchScreenValueX<=605)&&(TouchScreenValueY>=755)&&(TouchScreenValueY<=860)){
			
			if(GearAdvisorMode == ECONOMIC_MODE){
					
				GearAdvisorMode = SPORT_MODE;
    33dc:	f0 92 91 10 	sts	0x1091, r15
				LCDWriteIcon(18, 12, CLR_SMALL_DIGIT);
    33e0:	41 e0       	ldi	r20, 0x01	; 1
    33e2:	6c e0       	ldi	r22, 0x0C	; 12
    33e4:	82 e1       	ldi	r24, 0x12	; 18
    33e6:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
				LCDWriteIcon(18, 29, SPORT_MODE);
    33ea:	43 e0       	ldi	r20, 0x03	; 3
    33ec:	6d e1       	ldi	r22, 0x1D	; 29
    33ee:	82 e1       	ldi	r24, 0x12	; 18
    33f0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    33f4:	20 91 79 10 	lds	r18, 0x1079
    33f8:	30 91 7a 10 	lds	r19, 0x107A
    33fc:	25 cf       	rjmp	.-438    	; 0x3248 <GearTask+0x22e>

000033fe <ADCTask>:
	}
}


AVRX_TIMER(ADCTaskTimer);
AVRX_GCC_TASKDEF(ADCTask, 50, 4){
    33fe:	80 91 7f 10 	lds	r24, 0x107F
    3402:	88 23       	and	r24, r24
    3404:	51 f0       	breq	.+20     	; 0x341a <ADCTask+0x1c>
				}
				LCDWriteDigit(0, 98, SMALL_DIGIT, FuelLevel, 4);
			}

				
			AvrXDelay(&ADCTaskTimer, mConvertMsToTicks(100));
    3406:	68 ee       	ldi	r22, 0xE8	; 232
    3408:	73 e0       	ldi	r23, 0x03	; 3
    340a:	88 ea       	ldi	r24, 0xA8	; 168
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>
AVRX_GCC_TASKDEF(ADCTask, 50, 4){

		while(1){
			
		
			if(tobeAdjusted == 0){
    3412:	80 91 7f 10 	lds	r24, 0x107F
    3416:	88 23       	and	r24, r24
    3418:	b1 f7       	brne	.-20     	; 0x3406 <ADCTask+0x8>
				
				TouchScreenMeasure();
    341a:	0e 94 05 28 	call	0x500a	; 0x500a <TouchScreenMeasure>

				//Read touchscreen values for changing fuel mode
				if((TouchScreenValueX>=560)&&(TouchScreenValueX<=896)&&(TouchScreenValueY>=510)&&(TouchScreenValueY<=610)){
    341e:	80 91 79 10 	lds	r24, 0x1079
    3422:	90 91 7a 10 	lds	r25, 0x107A
    3426:	80 53       	subi	r24, 0x30	; 48
    3428:	92 40       	sbci	r25, 0x02	; 2
    342a:	81 55       	subi	r24, 0x51	; 81
    342c:	91 40       	sbci	r25, 0x01	; 1
    342e:	98 f4       	brcc	.+38     	; 0x3456 <ADCTask+0x58>
    3430:	80 91 77 10 	lds	r24, 0x1077
    3434:	90 91 78 10 	lds	r25, 0x1078
    3438:	21 e0       	ldi	r18, 0x01	; 1
    343a:	8e 3f       	cpi	r24, 0xFE	; 254
    343c:	92 07       	cpc	r25, r18
    343e:	58 f0       	brcs	.+22     	; 0x3456 <ADCTask+0x58>
    3440:	83 56       	subi	r24, 0x63	; 99
    3442:	92 40       	sbci	r25, 0x02	; 2
    3444:	40 f4       	brcc	.+16     	; 0x3456 <ADCTask+0x58>
					
					FuelMode = !FuelMode;
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	80 91 86 10 	lds	r24, 0x1086
    344c:	88 23       	and	r24, r24
    344e:	09 f4       	brne	.+2      	; 0x3452 <ADCTask+0x54>
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	90 93 86 10 	sts	0x1086, r25
					
				}		
				
				//Print labels
				LCDWriteStrP(9, 11, cons, DISP_NORMAL);
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	42 ed       	ldi	r20, 0xD2	; 210
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	6b e0       	ldi	r22, 0x0B	; 11
    345e:	89 e0       	ldi	r24, 0x09	; 9
    3460:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteStrP(14, 14, dpoint, DISP_NORMAL);
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	4e ed       	ldi	r20, 0xDE	; 222
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	6e e0       	ldi	r22, 0x0E	; 14
    346c:	8e e0       	ldi	r24, 0x0E	; 14
    346e:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteStrP(18, 13, lph1, DISP_NORMAL);
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	40 ee       	ldi	r20, 0xE0	; 224
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	6d e0       	ldi	r22, 0x0D	; 13
    347a:	82 e1       	ldi	r24, 0x12	; 18
    347c:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteStrP(17, 14, lph2, DISP_NORMAL);
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	43 ee       	ldi	r20, 0xE3	; 227
    3484:	50 e0       	ldi	r21, 0x00	; 0
    3486:	6e e0       	ldi	r22, 0x0E	; 14
    3488:	81 e1       	ldi	r24, 0x11	; 17
    348a:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				LCDWriteStrP(0, 16, kmleft, DISP_NORMAL);
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	47 ee       	ldi	r20, 0xE7	; 231
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	60 e1       	ldi	r22, 0x10	; 16
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>

				//Print data
				LCDWriteStrP(0, 11, fuel, DISP_NORMAL);
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	44 ec       	ldi	r20, 0xC4	; 196
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	6b e0       	ldi	r22, 0x0B	; 11
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				
				Consumption_c = FMeterReadLastMeasurement(FREQ3);
    34aa:	83 e0       	ldi	r24, 0x03	; 3
    34ac:	0e 94 b7 2c 	call	0x596e	; 0x596e <FMeterReadLastMeasurement>
    34b0:	90 93 19 01 	sts	0x0119, r25
    34b4:	80 93 18 01 	sts	0x0118, r24
				Speed_c = FMeterReadLastMeasurement(FREQS);
    34b8:	85 e0       	ldi	r24, 0x05	; 5
    34ba:	0e 94 b7 2c 	call	0x596e	; 0x596e <FMeterReadLastMeasurement>
    34be:	80 93 1a 01 	sts	0x011A, r24
				
				DetermineConsumption(Consumption_c, Speed_c);
    34c2:	60 91 1a 01 	lds	r22, 0x011A
    34c6:	80 91 18 01 	lds	r24, 0x0118
    34ca:	90 91 19 01 	lds	r25, 0x0119
    34ce:	0e 94 bf 29 	call	0x537e	; 0x537e <DetermineConsumption>


				LCDWriteDigit(10, 98, SMALL_DIGIT, Consumption, 2);
    34d2:	20 91 84 10 	lds	r18, 0x1084
    34d6:	30 91 85 10 	lds	r19, 0x1085
    34da:	02 e0       	ldi	r16, 0x02	; 2
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	62 e6       	ldi	r22, 0x62	; 98
    34e0:	8a e0       	ldi	r24, 0x0A	; 10
    34e2:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
				LCDWriteDigit(15, 98, SMALL_DIGIT, Consumption_Dec, 1);
    34e6:	20 91 83 10 	lds	r18, 0x1083
    34ea:	01 e0       	ldi	r16, 0x01	; 1
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	41 e0       	ldi	r20, 0x01	; 1
    34f0:	62 e6       	ldi	r22, 0x62	; 98
    34f2:	8f e0       	ldi	r24, 0x0F	; 15
    34f4:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>

				LCDWriteDigit(1, 138, SMALL_DIGIT, Range, 4);
    34f8:	20 91 87 10 	lds	r18, 0x1087
    34fc:	30 91 88 10 	lds	r19, 0x1088
    3500:	04 e0       	ldi	r16, 0x04	; 4
    3502:	41 e0       	ldi	r20, 0x01	; 1
    3504:	6a e8       	ldi	r22, 0x8A	; 138
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>

				//Call functions
				InitADC();
    350c:	0e 94 36 29 	call	0x526c	; 0x526c <InitADC>
				MeasureADC();
    3510:	0e 94 55 29 	call	0x52aa	; 0x52aa <MeasureADC>

				if(FuelMode == LITER_MODE){
    3514:	80 91 86 10 	lds	r24, 0x1086
    3518:	88 23       	and	r24, r24
    351a:	c1 f0       	breq	.+48     	; 0x354c <ADCTask+0x14e>
						TWIStopped = 0;
						LCDWriteIcon(0, 16, CLR_TEMP);
						LCDWriteIcon(3, 17, FUEL_TANK);
					}else TWIStopped = 1;
				}else{
					LCDWriteStrP(8, 14, perc, DISP_NORMAL);
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	4e ec       	ldi	r20, 0xCE	; 206
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	6e e0       	ldi	r22, 0x0E	; 14
    3524:	88 e0       	ldi	r24, 0x08	; 8
    3526:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
					if(FuelLevel <=14) {
    352a:	20 91 89 10 	lds	r18, 0x1089
    352e:	30 91 8a 10 	lds	r19, 0x108A
    3532:	2f 30       	cpi	r18, 0x0F	; 15
    3534:	31 05       	cpc	r19, r1
    3536:	c0 f0       	brcs	.+48     	; 0x3568 <ADCTask+0x16a>
						TWIStopped = 0;
						LCDWriteIcon(0, 16, CLR_TEMP);
						LCDWriteIcon(3, 17, FUEL_TANK);	
					}else TWIStopped = 1;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	80 93 8b 10 	sts	0x108B, r24
				}
				LCDWriteDigit(0, 98, SMALL_DIGIT, FuelLevel, 4);
    353e:	04 e0       	ldi	r16, 0x04	; 4
    3540:	41 e0       	ldi	r20, 0x01	; 1
    3542:	62 e6       	ldi	r22, 0x62	; 98
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	0e 94 67 26 	call	0x4cce	; 0x4cce <LCDWriteDigit>
    354a:	5d cf       	rjmp	.-326    	; 0x3406 <ADCTask+0x8>
				//Call functions
				InitADC();
				MeasureADC();

				if(FuelMode == LITER_MODE){
					LCDWriteStrP(8, 14, litre, DISP_NORMAL);
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	40 ed       	ldi	r20, 0xD0	; 208
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	6e e0       	ldi	r22, 0x0E	; 14
    3554:	88 e0       	ldi	r24, 0x08	; 8
    3556:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
					if(FuelLevel <=147) {
    355a:	20 91 89 10 	lds	r18, 0x1089
    355e:	30 91 8a 10 	lds	r19, 0x108A
    3562:	24 39       	cpi	r18, 0x94	; 148
    3564:	31 05       	cpc	r19, r1
    3566:	40 f7       	brcc	.-48     	; 0x3538 <ADCTask+0x13a>
						LCDWriteIcon(3, 17, FUEL_TANK);
					}else TWIStopped = 1;
				}else{
					LCDWriteStrP(8, 14, perc, DISP_NORMAL);
					if(FuelLevel <=14) {
						TWIStopped = 0;
    3568:	10 92 8b 10 	sts	0x108B, r1
						LCDWriteIcon(0, 16, CLR_TEMP);
    356c:	40 e1       	ldi	r20, 0x10	; 16
    356e:	60 e1       	ldi	r22, 0x10	; 16
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
						LCDWriteIcon(3, 17, FUEL_TANK);	
    3576:	4a e0       	ldi	r20, 0x0A	; 10
    3578:	61 e1       	ldi	r22, 0x11	; 17
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
    3580:	20 91 89 10 	lds	r18, 0x1089
    3584:	30 91 8a 10 	lds	r19, 0x108A
    3588:	da cf       	rjmp	.-76     	; 0x353e <ADCTask+0x140>

0000358a <ClockTask>:
}



AVRX_TIMER(ClockTaskTimer);
AVRX_GCC_TASKDEF(ClockTask, 200, 5){
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	2a 97       	sbiw	r28, 0x0a	; 10
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
	U8 TimeBuf[10], item=0;
//	U8 buf0[10], buf2[10];
		
//	LCDClearScreen();
	
	ClockInit();
    359e:	0e 94 9f 28 	call	0x513e	; 0x513e <ClockInit>
    35a2:	10 e0       	ldi	r17, 0x00	; 0
    35a4:	e0 e0       	ldi	r30, 0x00	; 0
    35a6:	ae 2e       	mov	r10, r30
    35a8:	e1 e0       	ldi	r30, 0x01	; 1
    35aa:	be 2e       	mov	r11, r30
    35ac:	7e 01       	movw	r14, r28
    35ae:	08 94       	sec
    35b0:	e1 1c       	adc	r14, r1
    35b2:	f1 1c       	adc	r15, r1
				
				AvrXDelay(&ClockTaskTimer,mConvertMsToTicks(962));// All functions in the cycle without AvrXDelay() take 38 ms

				ClockTick();

				LCDWriteStrP(0, 0, days[day-1], DISP_NORMAL);
    35b4:	71 e0       	ldi	r23, 0x01	; 1
    35b6:	c7 2e       	mov	r12, r23
    35b8:	d1 2c       	mov	r13, r1
				sprintf((char *)TimeBuf,"%02u %02u %02u:%02u", date, year, hours, minutes);
				LCDWriteStr(8, 0, TimeBuf, DISP_NORMAL);
				
				if((TouchScreenValueX>=190)&&(TouchScreenValueX<=870)&&(TouchScreenValueY>=878)&&(TouchScreenValueY<=905)){

					tobeAdjusted = 1;
    35ba:	99 24       	eor	r9, r9
    35bc:	93 94       	inc	r9
		}else{
				
				TouchScreenMeasure();

				if(tobeAdjusted == 1){
					tobeAdjusted++;
    35be:	02 e0       	ldi	r16, 0x02	; 2
		LCDWriteStr(9, 12, buf0, DISP_NORMAL);
		sprintf((char *)buf2,"X= %04u",TouchScreenValueX);
		LCDWriteStr(9, 14, buf2, DISP_NORMAL);
*/

		if(tobeAdjusted == 0){
    35c0:	80 91 7f 10 	lds	r24, 0x107F
    35c4:	88 23       	and	r24, r24
    35c6:	09 f4       	brne	.+2      	; 0x35ca <ClockTask+0x40>
    35c8:	f5 c0       	rjmp	.+490    	; 0x37b4 <ClockTask+0x22a>

				}
		
		}else{
				
				TouchScreenMeasure();
    35ca:	0e 94 05 28 	call	0x500a	; 0x500a <TouchScreenMeasure>

				if(tobeAdjusted == 1){
    35ce:	80 91 7f 10 	lds	r24, 0x107F
    35d2:	81 30       	cpi	r24, 0x01	; 1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <ClockTask+0x4e>
    35d6:	7c c1       	rjmp	.+760    	; 0x38d0 <ClockTask+0x346>
					LCDWriteIcon(6, 120, BUTTON_OK);

					LCDWriteStrP(2, 3, adjust, DISP_NORMAL);
				}
			
				LCDWriteStrP(0, 5, days[day-1], DISP_NORMAL);
    35d8:	80 91 7e 10 	lds	r24, 0x107E
    35dc:	a6 01       	movw	r20, r12
    35de:	48 1b       	sub	r20, r24
    35e0:	51 09       	sbc	r21, r1
    35e2:	44 0f       	add	r20, r20
    35e4:	55 1f       	adc	r21, r21
    35e6:	44 0f       	add	r20, r20
    35e8:	55 1f       	adc	r21, r21
    35ea:	50 95       	com	r21
    35ec:	41 95       	neg	r20
    35ee:	5f 4f       	sbci	r21, 0xFF	; 255
    35f0:	47 5f       	subi	r20, 0xF7	; 247
    35f2:	5e 4f       	sbci	r21, 0xFE	; 254
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	65 e0       	ldi	r22, 0x05	; 5
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				
				LCDWriteStrP(4, 5, months[month-1], DISP_NORMAL);
    35fe:	80 91 7b 10 	lds	r24, 0x107B
    3602:	a6 01       	movw	r20, r12
    3604:	48 1b       	sub	r20, r24
    3606:	51 09       	sbc	r21, r1
    3608:	44 0f       	add	r20, r20
    360a:	55 1f       	adc	r21, r21
    360c:	44 0f       	add	r20, r20
    360e:	55 1f       	adc	r21, r21
    3610:	50 95       	com	r21
    3612:	41 95       	neg	r20
    3614:	5f 4f       	sbci	r21, 0xFF	; 255
    3616:	4b 5d       	subi	r20, 0xDB	; 219
    3618:	5e 4f       	sbci	r21, 0xFE	; 254
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	65 e0       	ldi	r22, 0x05	; 5
    361e:	84 e0       	ldi	r24, 0x04	; 4
    3620:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				

				sprintf((char *)TimeBuf,"%02u %02u %02u:%02u", date, year, hours, minutes);
    3624:	80 91 81 10 	lds	r24, 0x1081
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	9f 93       	push	r25
    362c:	8f 93       	push	r24
    362e:	80 91 82 10 	lds	r24, 0x1082
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	9f 93       	push	r25
    3636:	8f 93       	push	r24
    3638:	80 91 7d 10 	lds	r24, 0x107D
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9f 93       	push	r25
    3640:	8f 93       	push	r24
    3642:	80 91 80 10 	lds	r24, 0x1080
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	9f 93       	push	r25
    364a:	8f 93       	push	r24
    364c:	bf 92       	push	r11
    364e:	af 92       	push	r10
    3650:	ff 92       	push	r15
    3652:	ef 92       	push	r14
    3654:	0e 94 77 2d 	call	0x5aee	; 0x5aee <sprintf>
				LCDWriteStr(8, 5, TimeBuf, DISP_NORMAL);
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	a7 01       	movw	r20, r14
    365c:	65 e0       	ldi	r22, 0x05	; 5
    365e:	88 e0       	ldi	r24, 0x08	; 8
    3660:	0e 94 41 21 	call	0x4282	; 0x4282 <LCDWriteStr>
				
				LCDWriteStrP(0, 6, spaces20 , DISP_NORMAL);
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	4c e5       	ldi	r20, 0x5C	; 92
    3668:	51 e0       	ldi	r21, 0x01	; 1
    366a:	66 e0       	ldi	r22, 0x06	; 6
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>

				switch(item){
    3672:	8d b7       	in	r24, 0x3d	; 61
    3674:	9e b7       	in	r25, 0x3e	; 62
    3676:	0c 96       	adiw	r24, 0x0c	; 12
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	9e bf       	out	0x3e, r25	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	8d bf       	out	0x3d, r24	; 61
    3682:	12 30       	cpi	r17, 0x02	; 2
    3684:	09 f4       	brne	.+2      	; 0x3688 <ClockTask+0xfe>
    3686:	3c c1       	rjmp	.+632    	; 0x3900 <ClockTask+0x376>
    3688:	13 30       	cpi	r17, 0x03	; 3
    368a:	08 f0       	brcs	.+2      	; 0x368e <ClockTask+0x104>
    368c:	06 c1       	rjmp	.+524    	; 0x389a <ClockTask+0x310>
    368e:	11 23       	and	r17, r17
    3690:	09 f0       	breq	.+2      	; 0x3694 <ClockTask+0x10a>
    3692:	13 c1       	rjmp	.+550    	; 0x38ba <ClockTask+0x330>
					case 0:	LCDWriteStrP(0, 6, pointers3, DISP_NORMAL);
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	48 e5       	ldi	r20, 0x58	; 88
    3698:	51 e0       	ldi	r21, 0x01	; 1
    369a:	66 e0       	ldi	r22, 0x06	; 6
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
				}


				
				//Up arrow
				if((TouchScreenValueX>=667)&&(TouchScreenValueX<=800)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){
    36a2:	20 91 79 10 	lds	r18, 0x1079
    36a6:	30 91 7a 10 	lds	r19, 0x107A
    36aa:	c9 01       	movw	r24, r18
    36ac:	8b 59       	subi	r24, 0x9B	; 155
    36ae:	92 40       	sbci	r25, 0x02	; 2
    36b0:	86 38       	cpi	r24, 0x86	; 134
    36b2:	91 05       	cpc	r25, r1
    36b4:	d8 f4       	brcc	.+54     	; 0x36ec <ClockTask+0x162>
    36b6:	80 91 77 10 	lds	r24, 0x1077
    36ba:	90 91 78 10 	lds	r25, 0x1078
    36be:	42 e0       	ldi	r20, 0x02	; 2
    36c0:	8c 31       	cpi	r24, 0x1C	; 28
    36c2:	94 07       	cpc	r25, r20
    36c4:	98 f0       	brcs	.+38     	; 0x36ec <ClockTask+0x162>
    36c6:	8c 57       	subi	r24, 0x7C	; 124
    36c8:	92 40       	sbci	r25, 0x02	; 2
    36ca:	80 f4       	brcc	.+32     	; 0x36ec <ClockTask+0x162>

					switch(item){
    36cc:	12 30       	cpi	r17, 0x02	; 2
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <ClockTask+0x148>
    36d0:	9c c1       	rjmp	.+824    	; 0x3a0a <ClockTask+0x480>
    36d2:	13 30       	cpi	r17, 0x03	; 3
    36d4:	08 f0       	brcs	.+2      	; 0x36d8 <ClockTask+0x14e>
    36d6:	36 c1       	rjmp	.+620    	; 0x3944 <ClockTask+0x3ba>
    36d8:	11 23       	and	r17, r17
    36da:	09 f0       	breq	.+2      	; 0x36de <ClockTask+0x154>
    36dc:	54 c1       	rjmp	.+680    	; 0x3986 <ClockTask+0x3fc>
						case 0:	if(day<7)		day++;
    36de:	80 91 7e 10 	lds	r24, 0x107E
    36e2:	87 30       	cpi	r24, 0x07	; 7
    36e4:	18 f4       	brcc	.+6      	; 0x36ec <ClockTask+0x162>
    36e6:	8f 5f       	subi	r24, 0xFF	; 255
    36e8:	80 93 7e 10 	sts	0x107E, r24
								break;
					}
					
				}
				//Down arrow
				if((TouchScreenValueX>=535)&&(TouchScreenValueX<=667)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){
    36ec:	c9 01       	movw	r24, r18
    36ee:	87 51       	subi	r24, 0x17	; 23
    36f0:	92 40       	sbci	r25, 0x02	; 2
    36f2:	85 38       	cpi	r24, 0x85	; 133
    36f4:	91 05       	cpc	r25, r1
    36f6:	d8 f4       	brcc	.+54     	; 0x372e <ClockTask+0x1a4>
    36f8:	80 91 77 10 	lds	r24, 0x1077
    36fc:	90 91 78 10 	lds	r25, 0x1078
    3700:	42 e0       	ldi	r20, 0x02	; 2
    3702:	8c 31       	cpi	r24, 0x1C	; 28
    3704:	94 07       	cpc	r25, r20
    3706:	98 f0       	brcs	.+38     	; 0x372e <ClockTask+0x1a4>
    3708:	8c 57       	subi	r24, 0x7C	; 124
    370a:	92 40       	sbci	r25, 0x02	; 2
    370c:	80 f4       	brcc	.+32     	; 0x372e <ClockTask+0x1a4>

					switch(item){
    370e:	12 30       	cpi	r17, 0x02	; 2
    3710:	09 f4       	brne	.+2      	; 0x3714 <ClockTask+0x18a>
    3712:	57 c1       	rjmp	.+686    	; 0x39c2 <ClockTask+0x438>
    3714:	13 30       	cpi	r17, 0x03	; 3
    3716:	08 f0       	brcs	.+2      	; 0x371a <ClockTask+0x190>
    3718:	26 c1       	rjmp	.+588    	; 0x3966 <ClockTask+0x3dc>
    371a:	11 23       	and	r17, r17
    371c:	09 f0       	breq	.+2      	; 0x3720 <ClockTask+0x196>
    371e:	3f c1       	rjmp	.+638    	; 0x399e <ClockTask+0x414>
						case 0:	if(day>1)		day--;
    3720:	80 91 7e 10 	lds	r24, 0x107E
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	18 f0       	brcs	.+6      	; 0x372e <ClockTask+0x1a4>
    3728:	81 50       	subi	r24, 0x01	; 1
    372a:	80 93 7e 10 	sts	0x107E, r24
								break;
					}

				}
				//Left arrow
				if((TouchScreenValueX>=403)&&(TouchScreenValueX<=535)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){
    372e:	c9 01       	movw	r24, r18
    3730:	83 59       	subi	r24, 0x93	; 147
    3732:	91 40       	sbci	r25, 0x01	; 1
    3734:	85 38       	cpi	r24, 0x85	; 133
    3736:	91 05       	cpc	r25, r1
    3738:	68 f4       	brcc	.+26     	; 0x3754 <ClockTask+0x1ca>
    373a:	80 91 77 10 	lds	r24, 0x1077
    373e:	90 91 78 10 	lds	r25, 0x1078
    3742:	42 e0       	ldi	r20, 0x02	; 2
    3744:	8c 31       	cpi	r24, 0x1C	; 28
    3746:	94 07       	cpc	r25, r20
    3748:	28 f0       	brcs	.+10     	; 0x3754 <ClockTask+0x1ca>
    374a:	8c 57       	subi	r24, 0x7C	; 124
    374c:	92 40       	sbci	r25, 0x02	; 2
    374e:	10 f4       	brcc	.+4      	; 0x3754 <ClockTask+0x1ca>
					
					if(item>0)	item--;
    3750:	11 11       	cpse	r17, r1
    3752:	11 50       	subi	r17, 0x01	; 1
				
				}
				//Right arrow
				if((TouchScreenValueX>=270)&&(TouchScreenValueX<=403)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){
    3754:	c9 01       	movw	r24, r18
    3756:	8e 50       	subi	r24, 0x0E	; 14
    3758:	91 40       	sbci	r25, 0x01	; 1
    375a:	86 38       	cpi	r24, 0x86	; 134
    375c:	91 05       	cpc	r25, r1
    375e:	70 f4       	brcc	.+28     	; 0x377c <ClockTask+0x1f2>
    3760:	80 91 77 10 	lds	r24, 0x1077
    3764:	90 91 78 10 	lds	r25, 0x1078
    3768:	42 e0       	ldi	r20, 0x02	; 2
    376a:	8c 31       	cpi	r24, 0x1C	; 28
    376c:	94 07       	cpc	r25, r20
    376e:	30 f0       	brcs	.+12     	; 0x377c <ClockTask+0x1f2>
    3770:	8c 57       	subi	r24, 0x7C	; 124
    3772:	92 40       	sbci	r25, 0x02	; 2
    3774:	18 f4       	brcc	.+6      	; 0x377c <ClockTask+0x1f2>
					
					if(item<5)	item++;
    3776:	15 30       	cpi	r17, 0x05	; 5
    3778:	08 f4       	brcc	.+2      	; 0x377c <ClockTask+0x1f2>
    377a:	1f 5f       	subi	r17, 0xFF	; 255

				}
				//OK
				if((TouchScreenValueX>=400)&&(TouchScreenValueX<=670)&&(TouchScreenValueY>=400)&&(TouchScreenValueY<=500)){
    377c:	20 59       	subi	r18, 0x90	; 144
    377e:	31 40       	sbci	r19, 0x01	; 1
    3780:	2f 50       	subi	r18, 0x0F	; 15
    3782:	31 40       	sbci	r19, 0x01	; 1
    3784:	60 f4       	brcc	.+24     	; 0x379e <ClockTask+0x214>
    3786:	80 91 77 10 	lds	r24, 0x1077
    378a:	90 91 78 10 	lds	r25, 0x1078
    378e:	21 e0       	ldi	r18, 0x01	; 1
    3790:	80 39       	cpi	r24, 0x90	; 144
    3792:	92 07       	cpc	r25, r18
    3794:	20 f0       	brcs	.+8      	; 0x379e <ClockTask+0x214>
    3796:	85 5f       	subi	r24, 0xF5	; 245
    3798:	91 40       	sbci	r25, 0x01	; 1
    379a:	08 f4       	brcc	.+2      	; 0x379e <ClockTask+0x214>
    379c:	c9 c0       	rjmp	.+402    	; 0x3930 <ClockTask+0x3a6>
					
					LCDClearScreen();
					
				}

				AvrXDelay(&ClockTaskTimer,mConvertMsToTicks(100));
    379e:	68 ee       	ldi	r22, 0xE8	; 232
    37a0:	73 e0       	ldi	r23, 0x03	; 3
    37a2:	81 e4       	ldi	r24, 0x41	; 65
    37a4:	91 e0       	ldi	r25, 0x01	; 1
    37a6:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>
		LCDWriteStr(9, 12, buf0, DISP_NORMAL);
		sprintf((char *)buf2,"X= %04u",TouchScreenValueX);
		LCDWriteStr(9, 14, buf2, DISP_NORMAL);
*/

		if(tobeAdjusted == 0){
    37aa:	80 91 7f 10 	lds	r24, 0x107F
    37ae:	88 23       	and	r24, r24
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <ClockTask+0x22a>
    37b2:	0b cf       	rjmp	.-490    	; 0x35ca <ClockTask+0x40>
		
				ClockStart();
    37b4:	0e 94 b3 28 	call	0x5166	; 0x5166 <ClockStart>
				
				AvrXDelay(&ClockTaskTimer,mConvertMsToTicks(962));// All functions in the cycle without AvrXDelay() take 38 ms
    37b8:	64 e9       	ldi	r22, 0x94	; 148
    37ba:	75 e2       	ldi	r23, 0x25	; 37
    37bc:	81 e4       	ldi	r24, 0x41	; 65
    37be:	91 e0       	ldi	r25, 0x01	; 1
    37c0:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

				ClockTick();
    37c4:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <ClockTick>

				LCDWriteStrP(0, 0, days[day-1], DISP_NORMAL);
    37c8:	80 91 7e 10 	lds	r24, 0x107E
    37cc:	a6 01       	movw	r20, r12
    37ce:	48 1b       	sub	r20, r24
    37d0:	51 09       	sbc	r21, r1
    37d2:	44 0f       	add	r20, r20
    37d4:	55 1f       	adc	r21, r21
    37d6:	44 0f       	add	r20, r20
    37d8:	55 1f       	adc	r21, r21
    37da:	50 95       	com	r21
    37dc:	41 95       	neg	r20
    37de:	5f 4f       	sbci	r21, 0xFF	; 255
    37e0:	47 5f       	subi	r20, 0xF7	; 247
    37e2:	5e 4f       	sbci	r21, 0xFE	; 254
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
			
				LCDWriteStrP(4, 0, months[month-1], DISP_NORMAL);
    37ee:	80 91 7b 10 	lds	r24, 0x107B
    37f2:	a6 01       	movw	r20, r12
    37f4:	48 1b       	sub	r20, r24
    37f6:	51 09       	sbc	r21, r1
    37f8:	44 0f       	add	r20, r20
    37fa:	55 1f       	adc	r21, r21
    37fc:	44 0f       	add	r20, r20
    37fe:	55 1f       	adc	r21, r21
    3800:	50 95       	com	r21
    3802:	41 95       	neg	r20
    3804:	5f 4f       	sbci	r21, 0xFF	; 255
    3806:	4b 5d       	subi	r20, 0xDB	; 219
    3808:	5e 4f       	sbci	r21, 0xFE	; 254
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	84 e0       	ldi	r24, 0x04	; 4
    3810:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>

				sprintf((char *)TimeBuf,"%02u %02u %02u:%02u", date, year, hours, minutes);
    3814:	80 91 81 10 	lds	r24, 0x1081
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9f 93       	push	r25
    381c:	8f 93       	push	r24
    381e:	80 91 82 10 	lds	r24, 0x1082
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	80 91 7d 10 	lds	r24, 0x107D
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	9f 93       	push	r25
    3830:	8f 93       	push	r24
    3832:	80 91 80 10 	lds	r24, 0x1080
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	bf 92       	push	r11
    383e:	af 92       	push	r10
    3840:	ff 92       	push	r15
    3842:	ef 92       	push	r14
    3844:	0e 94 77 2d 	call	0x5aee	; 0x5aee <sprintf>
				LCDWriteStr(8, 0, TimeBuf, DISP_NORMAL);
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	a7 01       	movw	r20, r14
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	88 e0       	ldi	r24, 0x08	; 8
    3850:	0e 94 41 21 	call	0x4282	; 0x4282 <LCDWriteStr>
				
				if((TouchScreenValueX>=190)&&(TouchScreenValueX<=870)&&(TouchScreenValueY>=878)&&(TouchScreenValueY<=905)){
    3854:	80 91 79 10 	lds	r24, 0x1079
    3858:	90 91 7a 10 	lds	r25, 0x107A
    385c:	8e 5b       	subi	r24, 0xBE	; 190
    385e:	90 40       	sbci	r25, 0x00	; 0
    3860:	2d b7       	in	r18, 0x3d	; 61
    3862:	3e b7       	in	r19, 0x3e	; 62
    3864:	24 5f       	subi	r18, 0xF4	; 244
    3866:	3f 4f       	sbci	r19, 0xFF	; 255
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	3e bf       	out	0x3e, r19	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	2d bf       	out	0x3d, r18	; 61
    3872:	89 5a       	subi	r24, 0xA9	; 169
    3874:	92 40       	sbci	r25, 0x02	; 2
    3876:	08 f0       	brcs	.+2      	; 0x387a <ClockTask+0x2f0>
    3878:	a3 ce       	rjmp	.-698    	; 0x35c0 <ClockTask+0x36>
    387a:	80 91 77 10 	lds	r24, 0x1077
    387e:	90 91 78 10 	lds	r25, 0x1078
    3882:	43 e0       	ldi	r20, 0x03	; 3
    3884:	8e 36       	cpi	r24, 0x6E	; 110
    3886:	94 07       	cpc	r25, r20
    3888:	08 f4       	brcc	.+2      	; 0x388c <ClockTask+0x302>
    388a:	9a ce       	rjmp	.-716    	; 0x35c0 <ClockTask+0x36>
    388c:	8a 58       	subi	r24, 0x8A	; 138
    388e:	93 40       	sbci	r25, 0x03	; 3
    3890:	08 f0       	brcs	.+2      	; 0x3894 <ClockTask+0x30a>
    3892:	96 ce       	rjmp	.-724    	; 0x35c0 <ClockTask+0x36>

					tobeAdjusted = 1;
    3894:	90 92 7f 10 	sts	0x107F, r9
    3898:	93 ce       	rjmp	.-730    	; 0x35c0 <ClockTask+0x36>
				sprintf((char *)TimeBuf,"%02u %02u %02u:%02u", date, year, hours, minutes);
				LCDWriteStr(8, 5, TimeBuf, DISP_NORMAL);
				
				LCDWriteStrP(0, 6, spaces20 , DISP_NORMAL);

				switch(item){
    389a:	14 30       	cpi	r17, 0x04	; 4
    389c:	09 f4       	brne	.+2      	; 0x38a0 <ClockTask+0x316>
    389e:	40 c0       	rjmp	.+128    	; 0x3920 <ClockTask+0x396>
    38a0:	14 30       	cpi	r17, 0x04	; 4
    38a2:	b0 f1       	brcs	.+108    	; 0x3910 <ClockTask+0x386>
    38a4:	15 30       	cpi	r17, 0x05	; 5
    38a6:	09 f0       	breq	.+2      	; 0x38aa <ClockTask+0x320>
    38a8:	fc ce       	rjmp	.-520    	; 0x36a2 <ClockTask+0x118>
							break;
					case 3: LCDWriteStrP(11, 6, pointers2, DISP_NORMAL);
							break;
					case 4: LCDWriteStrP(14, 6, pointers2, DISP_NORMAL);
							break;
					case 5: LCDWriteStrP(17, 6, pointers2, DISP_NORMAL);
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	45 e5       	ldi	r20, 0x55	; 85
    38ae:	51 e0       	ldi	r21, 0x01	; 1
    38b0:	66 e0       	ldi	r22, 0x06	; 6
    38b2:	81 e1       	ldi	r24, 0x11	; 17
    38b4:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
    38b8:	f4 ce       	rjmp	.-536    	; 0x36a2 <ClockTask+0x118>
				sprintf((char *)TimeBuf,"%02u %02u %02u:%02u", date, year, hours, minutes);
				LCDWriteStr(8, 5, TimeBuf, DISP_NORMAL);
				
				LCDWriteStrP(0, 6, spaces20 , DISP_NORMAL);

				switch(item){
    38ba:	11 30       	cpi	r17, 0x01	; 1
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <ClockTask+0x336>
    38be:	f1 ce       	rjmp	.-542    	; 0x36a2 <ClockTask+0x118>
					case 0:	LCDWriteStrP(0, 6, pointers3, DISP_NORMAL);
							break;
					case 1:	LCDWriteStrP(4, 6, pointers3, DISP_NORMAL);
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	48 e5       	ldi	r20, 0x58	; 88
    38c4:	51 e0       	ldi	r21, 0x01	; 1
    38c6:	66 e0       	ldi	r22, 0x06	; 6
    38c8:	84 e0       	ldi	r24, 0x04	; 4
    38ca:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
    38ce:	e9 ce       	rjmp	.-558    	; 0x36a2 <ClockTask+0x118>
		}else{
				
				TouchScreenMeasure();

				if(tobeAdjusted == 1){
					tobeAdjusted++;
    38d0:	00 93 7f 10 	sts	0x107F, r16
						
					ClockStop();
    38d4:	0e 94 b7 28 	call	0x516e	; 0x516e <ClockStop>

					LCDClearScreen();
    38d8:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <LCDClearScreen>
					
					LCDWriteIcon(2, 80, ARROWS_PAD);
    38dc:	4d e0       	ldi	r20, 0x0D	; 13
    38de:	60 e5       	ldi	r22, 0x50	; 80
    38e0:	82 e0       	ldi	r24, 0x02	; 2
    38e2:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
					LCDWriteIcon(6, 120, BUTTON_OK);
    38e6:	4c e0       	ldi	r20, 0x0C	; 12
    38e8:	68 e7       	ldi	r22, 0x78	; 120
    38ea:	86 e0       	ldi	r24, 0x06	; 6
    38ec:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>

					LCDWriteStrP(2, 3, adjust, DISP_NORMAL);
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	41 e7       	ldi	r20, 0x71	; 113
    38f4:	51 e0       	ldi	r21, 0x01	; 1
    38f6:	63 e0       	ldi	r22, 0x03	; 3
    38f8:	82 e0       	ldi	r24, 0x02	; 2
    38fa:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
    38fe:	6c ce       	rjmp	.-808    	; 0x35d8 <ClockTask+0x4e>
				switch(item){
					case 0:	LCDWriteStrP(0, 6, pointers3, DISP_NORMAL);
							break;
					case 1:	LCDWriteStrP(4, 6, pointers3, DISP_NORMAL);
							break;
					case 2: LCDWriteStrP(8, 6, pointers2, DISP_NORMAL);
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	45 e5       	ldi	r20, 0x55	; 85
    3904:	51 e0       	ldi	r21, 0x01	; 1
    3906:	66 e0       	ldi	r22, 0x06	; 6
    3908:	88 e0       	ldi	r24, 0x08	; 8
    390a:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
    390e:	c9 ce       	rjmp	.-622    	; 0x36a2 <ClockTask+0x118>
							break;
					case 3: LCDWriteStrP(11, 6, pointers2, DISP_NORMAL);
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	45 e5       	ldi	r20, 0x55	; 85
    3914:	51 e0       	ldi	r21, 0x01	; 1
    3916:	66 e0       	ldi	r22, 0x06	; 6
    3918:	8b e0       	ldi	r24, 0x0B	; 11
    391a:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
    391e:	c1 ce       	rjmp	.-638    	; 0x36a2 <ClockTask+0x118>
							break;
					case 4: LCDWriteStrP(14, 6, pointers2, DISP_NORMAL);
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	45 e5       	ldi	r20, 0x55	; 85
    3924:	51 e0       	ldi	r21, 0x01	; 1
    3926:	66 e0       	ldi	r22, 0x06	; 6
    3928:	8e e0       	ldi	r24, 0x0E	; 14
    392a:	0e 94 0f 23 	call	0x461e	; 0x461e <LCDWriteStrP>
    392e:	b9 ce       	rjmp	.-654    	; 0x36a2 <ClockTask+0x118>

				}
				//OK
				if((TouchScreenValueX>=400)&&(TouchScreenValueX<=670)&&(TouchScreenValueY>=400)&&(TouchScreenValueY<=500)){
					
					seconds = 0;
    3930:	10 92 7c 10 	sts	0x107C, r1

					item = 0;

					ClockStart();
    3934:	0e 94 b3 28 	call	0x5166	; 0x5166 <ClockStart>

					tobeAdjusted = 0;
    3938:	10 92 7f 10 	sts	0x107F, r1
					
					LCDClearScreen();
    393c:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <LCDClearScreen>
    3940:	10 e0       	ldi	r17, 0x00	; 0
    3942:	2d cf       	rjmp	.-422    	; 0x379e <ClockTask+0x214>

				
				//Up arrow
				if((TouchScreenValueX>=667)&&(TouchScreenValueX<=800)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){

					switch(item){
    3944:	14 30       	cpi	r17, 0x04	; 4
    3946:	09 f4       	brne	.+2      	; 0x394a <ClockTask+0x3c0>
    3948:	57 c0       	rjmp	.+174    	; 0x39f8 <ClockTask+0x46e>
    394a:	14 30       	cpi	r17, 0x04	; 4
    394c:	a0 f1       	brcs	.+104    	; 0x39b6 <ClockTask+0x42c>
    394e:	15 30       	cpi	r17, 0x05	; 5
    3950:	09 f0       	breq	.+2      	; 0x3954 <ClockTask+0x3ca>
    3952:	cc ce       	rjmp	.-616    	; 0x36ec <ClockTask+0x162>
								break;
						case 3: year++;
								break;
						case 4: if(hours<23)	hours++;
								break;
						case 5: if(minutes<59)	minutes++;
    3954:	80 91 81 10 	lds	r24, 0x1081
    3958:	8b 33       	cpi	r24, 0x3B	; 59
    395a:	08 f0       	brcs	.+2      	; 0x395e <ClockTask+0x3d4>
    395c:	c7 ce       	rjmp	.-626    	; 0x36ec <ClockTask+0x162>
    395e:	8f 5f       	subi	r24, 0xFF	; 255
    3960:	80 93 81 10 	sts	0x1081, r24
    3964:	c3 ce       	rjmp	.-634    	; 0x36ec <ClockTask+0x162>
					
				}
				//Down arrow
				if((TouchScreenValueX>=535)&&(TouchScreenValueX<=667)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){

					switch(item){
    3966:	14 30       	cpi	r17, 0x04	; 4
    3968:	f1 f1       	breq	.+124    	; 0x39e6 <ClockTask+0x45c>
    396a:	14 30       	cpi	r17, 0x04	; 4
    396c:	98 f1       	brcs	.+102    	; 0x39d4 <ClockTask+0x44a>
    396e:	15 30       	cpi	r17, 0x05	; 5
    3970:	09 f0       	breq	.+2      	; 0x3974 <ClockTask+0x3ea>
    3972:	dd ce       	rjmp	.-582    	; 0x372e <ClockTask+0x1a4>
								break;
						case 3: if(year>0)		year--;
								break;
						case 4: if(hours>0)		hours--;
								break;
						case 5: if(minutes>0)	minutes--;
    3974:	80 91 81 10 	lds	r24, 0x1081
    3978:	88 23       	and	r24, r24
    397a:	09 f4       	brne	.+2      	; 0x397e <ClockTask+0x3f4>
    397c:	d8 ce       	rjmp	.-592    	; 0x372e <ClockTask+0x1a4>
    397e:	81 50       	subi	r24, 0x01	; 1
    3980:	80 93 81 10 	sts	0x1081, r24
    3984:	d4 ce       	rjmp	.-600    	; 0x372e <ClockTask+0x1a4>

				
				//Up arrow
				if((TouchScreenValueX>=667)&&(TouchScreenValueX<=800)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){

					switch(item){
    3986:	11 30       	cpi	r17, 0x01	; 1
    3988:	09 f0       	breq	.+2      	; 0x398c <ClockTask+0x402>
    398a:	b0 ce       	rjmp	.-672    	; 0x36ec <ClockTask+0x162>
						case 0:	if(day<7)		day++;
								break;
						case 1:	if(month<12)	month++;
    398c:	80 91 7b 10 	lds	r24, 0x107B
    3990:	8c 30       	cpi	r24, 0x0C	; 12
    3992:	08 f0       	brcs	.+2      	; 0x3996 <ClockTask+0x40c>
    3994:	ab ce       	rjmp	.-682    	; 0x36ec <ClockTask+0x162>
    3996:	8f 5f       	subi	r24, 0xFF	; 255
    3998:	80 93 7b 10 	sts	0x107B, r24
    399c:	a7 ce       	rjmp	.-690    	; 0x36ec <ClockTask+0x162>
					
				}
				//Down arrow
				if((TouchScreenValueX>=535)&&(TouchScreenValueX<=667)&&(TouchScreenValueY>=540)&&(TouchScreenValueY<=635)){

					switch(item){
    399e:	11 30       	cpi	r17, 0x01	; 1
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <ClockTask+0x41a>
    39a2:	c5 ce       	rjmp	.-630    	; 0x372e <ClockTask+0x1a4>
						case 0:	if(day>1)		day--;
								break;
						case 1:	if(month>1)		month--;
    39a4:	80 91 7b 10 	lds	r24, 0x107B
    39a8:	82 30       	cpi	r24, 0x02	; 2
    39aa:	08 f4       	brcc	.+2      	; 0x39ae <ClockTask+0x424>
    39ac:	c0 ce       	rjmp	.-640    	; 0x372e <ClockTask+0x1a4>
    39ae:	81 50       	subi	r24, 0x01	; 1
    39b0:	80 93 7b 10 	sts	0x107B, r24
    39b4:	bc ce       	rjmp	.-648    	; 0x372e <ClockTask+0x1a4>
								break;
						case 1:	if(month<12)	month++;
								break;
						case 2:	if(date<EndOfMonth(month, year))	date++;
								break;
						case 3: year++;
    39b6:	80 91 7d 10 	lds	r24, 0x107D
    39ba:	8f 5f       	subi	r24, 0xFF	; 255
    39bc:	80 93 7d 10 	sts	0x107D, r24
    39c0:	95 ce       	rjmp	.-726    	; 0x36ec <ClockTask+0x162>
					switch(item){
						case 0:	if(day>1)		day--;
								break;
						case 1:	if(month>1)		month--;
								break;
						case 2:	if(date>1)		date--;
    39c2:	80 91 80 10 	lds	r24, 0x1080
    39c6:	82 30       	cpi	r24, 0x02	; 2
    39c8:	08 f4       	brcc	.+2      	; 0x39cc <ClockTask+0x442>
    39ca:	b1 ce       	rjmp	.-670    	; 0x372e <ClockTask+0x1a4>
    39cc:	81 50       	subi	r24, 0x01	; 1
    39ce:	80 93 80 10 	sts	0x1080, r24
    39d2:	ad ce       	rjmp	.-678    	; 0x372e <ClockTask+0x1a4>
								break;
						case 3: if(year>0)		year--;
    39d4:	80 91 7d 10 	lds	r24, 0x107D
    39d8:	88 23       	and	r24, r24
    39da:	09 f4       	brne	.+2      	; 0x39de <ClockTask+0x454>
    39dc:	a8 ce       	rjmp	.-688    	; 0x372e <ClockTask+0x1a4>
    39de:	81 50       	subi	r24, 0x01	; 1
    39e0:	80 93 7d 10 	sts	0x107D, r24
    39e4:	a4 ce       	rjmp	.-696    	; 0x372e <ClockTask+0x1a4>
								break;
						case 4: if(hours>0)		hours--;
    39e6:	80 91 82 10 	lds	r24, 0x1082
    39ea:	88 23       	and	r24, r24
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <ClockTask+0x466>
    39ee:	9f ce       	rjmp	.-706    	; 0x372e <ClockTask+0x1a4>
    39f0:	81 50       	subi	r24, 0x01	; 1
    39f2:	80 93 82 10 	sts	0x1082, r24
    39f6:	9b ce       	rjmp	.-714    	; 0x372e <ClockTask+0x1a4>
								break;
						case 2:	if(date<EndOfMonth(month, year))	date++;
								break;
						case 3: year++;
								break;
						case 4: if(hours<23)	hours++;
    39f8:	80 91 82 10 	lds	r24, 0x1082
    39fc:	87 31       	cpi	r24, 0x17	; 23
    39fe:	08 f0       	brcs	.+2      	; 0x3a02 <ClockTask+0x478>
    3a00:	75 ce       	rjmp	.-790    	; 0x36ec <ClockTask+0x162>
    3a02:	8f 5f       	subi	r24, 0xFF	; 255
    3a04:	80 93 82 10 	sts	0x1082, r24
    3a08:	71 ce       	rjmp	.-798    	; 0x36ec <ClockTask+0x162>
					switch(item){
						case 0:	if(day<7)		day++;
								break;
						case 1:	if(month<12)	month++;
								break;
						case 2:	if(date<EndOfMonth(month, year))	date++;
    3a0a:	60 91 7d 10 	lds	r22, 0x107D
    3a0e:	80 91 7b 10 	lds	r24, 0x107B
    3a12:	0e 94 ba 28 	call	0x5174	; 0x5174 <EndOfMonth>
    3a16:	90 91 80 10 	lds	r25, 0x1080
    3a1a:	98 17       	cp	r25, r24
    3a1c:	18 f4       	brcc	.+6      	; 0x3a24 <ClockTask+0x49a>
    3a1e:	9f 5f       	subi	r25, 0xFF	; 255
    3a20:	90 93 80 10 	sts	0x1080, r25
    3a24:	20 91 79 10 	lds	r18, 0x1079
    3a28:	30 91 7a 10 	lds	r19, 0x107A
    3a2c:	5f ce       	rjmp	.-834    	; 0x36ec <ClockTask+0x162>

00003a2e <__vector_10>:
//
// Result   : none
//
//*****************************************************************************
AVRX_SIGINT(SIG_OVERFLOW2)
{
    3a2e:	0e 94 19 30 	call	0x6032	; 0x6032 <IntProlog>
    IntProlog();                // Switch to kernel stack/context		

    outp(0, TCNT2);				// reload the timer 
    3a32:	10 92 b2 00 	sts	0x00B2, r1
    
    Epilog();                   // Return to tasks
    3a36:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>

00003a3a <__vector_17>:
}
    3a3a:	0e 94 19 30 	call	0x6032	; 0x6032 <IntProlog>
{
//	cbi (PORTE, PORTE2);

    IntProlog();                // Switch to kernel stack/context		

    outp(TCNT0_INIT, TCNT0);	// reload the timer 
    3a3e:	8f e3       	ldi	r24, 0x3F	; 63
    3a40:	86 bd       	out	0x26, r24	; 38

    LCDTick();					// Call LCD refresh function
    3a42:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LCDTick>

	FMeterTick();
    3a46:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <FMeterTick>

    AvrXTimerHandler();		    // Call Time queue manager
    3a4a:	0e 94 30 31 	call	0x6260	; 0x6260 <AvrXTimerHandler>
	
//	sbi (PORTE, PORTE2);

    Epilog();                   // Return to tasks
    3a4e:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>

00003a52 <__vector_35>:
}
    3a52:	0e 94 19 30 	call	0x6032	; 0x6032 <IntProlog>

AVRX_SIGINT(TWI_vect){

	IntProlog();                // Switch to kernel stack/context		
	
	switch(TW_STATUS){
    3a56:	80 91 b9 00 	lds	r24, 0x00B9
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	88 7f       	andi	r24, 0xF8	; 248
    3a5e:	90 70       	andi	r25, 0x00	; 0
    3a60:	88 35       	cpi	r24, 0x58	; 88
    3a62:	91 05       	cpc	r25, r1
    3a64:	e1 f0       	breq	.+56     	; 0x3a9e <__vector_35+0x4c>
    3a66:	89 35       	cpi	r24, 0x59	; 89
    3a68:	91 05       	cpc	r25, r1
    3a6a:	34 f4       	brge	.+12     	; 0x3a78 <__vector_35+0x26>
    3a6c:	88 30       	cpi	r24, 0x08	; 8
    3a6e:	91 05       	cpc	r25, r1
    3a70:	89 f0       	breq	.+34     	; 0x3a94 <__vector_35+0x42>
    3a72:	80 34       	cpi	r24, 0x40	; 64
    3a74:	91 05       	cpc	r25, r1
    3a76:	11 f0       	breq	.+4      	; 0x3a7c <__vector_35+0x2a>
						TWIByte = TWDR;
						TWIStop();
						break;			
	};
	
    Epilog();                   // Return to tasks
    3a78:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>



}
    3a7c:	80 91 bc 00 	lds	r24, 0x00BC
    3a80:	8f 7d       	andi	r24, 0xDF	; 223
    3a82:	80 93 bc 00 	sts	0x00BC, r24
						TWISLA(SLAR);
						break;
		
		case TW_MR_SLA_ACK:
						cbi(TWCR, TWSTA);
						sbi(TWCR, TWINT);
    3a86:	80 91 bc 00 	lds	r24, 0x00BC
    3a8a:	80 68       	ori	r24, 0x80	; 128
    3a8c:	80 93 bc 00 	sts	0x00BC, r24
						TWIByte = TWDR;
						TWIStop();
						break;			
	};
	
    Epilog();                   // Return to tasks
    3a90:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>



}
    3a94:	81 e9       	ldi	r24, 0x91	; 145
    3a96:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <TWISLA>
						TWIByte = TWDR;
						TWIStop();
						break;			
	};
	
    Epilog();                   // Return to tasks
    3a9a:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>



}
    3a9e:	80 91 bb 00 	lds	r24, 0x00BB
    3aa2:	80 93 8c 10 	sts	0x108C, r24
						sbi(TWCR, TWINT);
						break;

		case TW_MR_DATA_NACK:
						TWIByte = TWDR;
						TWIStop();
    3aa6:	0e 94 43 2a 	call	0x5486	; 0x5486 <TWIStop>
						break;			
	};
	
    Epilog();                   // Return to tasks
    3aaa:	0e 94 65 30 	call	0x60ca	; 0x60ca <Epilog>

00003aae <__vector_5>:



}
    3aae:	1f 92       	push	r1
    3ab0:	0f 92       	push	r0
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	0f 92       	push	r0
    3ab6:	0b b6       	in	r0, 0x3b	; 59
    3ab8:	0f 92       	push	r0
    3aba:	11 24       	eor	r1, r1
    3abc:	2f 93       	push	r18
    3abe:	3f 93       	push	r19
    3ac0:	4f 93       	push	r20
    3ac2:	5f 93       	push	r21
    3ac4:	6f 93       	push	r22
    3ac6:	7f 93       	push	r23
    3ac8:	8f 93       	push	r24
    3aca:	9f 93       	push	r25
    3acc:	af 93       	push	r26
    3ace:	bf 93       	push	r27
    3ad0:	ef 93       	push	r30
    3ad2:	ff 93       	push	r31
static volatile U8	Speed_c = 0;


ISR(INT4_vect){

	FMeterIntTick();
    3ad4:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <FMeterIntTick>

}
    3ad8:	ff 91       	pop	r31
    3ada:	ef 91       	pop	r30
    3adc:	bf 91       	pop	r27
    3ade:	af 91       	pop	r26
    3ae0:	9f 91       	pop	r25
    3ae2:	8f 91       	pop	r24
    3ae4:	7f 91       	pop	r23
    3ae6:	6f 91       	pop	r22
    3ae8:	5f 91       	pop	r21
    3aea:	4f 91       	pop	r20
    3aec:	3f 91       	pop	r19
    3aee:	2f 91       	pop	r18
    3af0:	0f 90       	pop	r0
    3af2:	0b be       	out	0x3b, r0	; 59
    3af4:	0f 90       	pop	r0
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	0f 90       	pop	r0
    3afa:	1f 90       	pop	r1
    3afc:	18 95       	reti

00003afe <LCDTick>:
//
// Result   : none
//
//*****************************************************************************
void LCDTick (void)
{
    3afe:	80 91 1d 01 	lds	r24, 0x011D
    3b02:	88 23       	and	r24, r24
    3b04:	71 f1       	breq	.+92     	; 0x3b62 <LCDTick+0x64>
	{

		for(j=0; j<LCD_WIDTH_BYTES; j++) 
		{
			// get current byte
			b = LCDFrameBuffer[RowCounter+j];
    3b06:	40 91 1e 01 	lds	r20, 0x011E
    3b0a:	50 91 1f 01 	lds	r21, 0x011F
    3b0e:	fa 01       	movw	r30, r20
    3b10:	e9 50       	subi	r30, 0x09	; 9
    3b12:	fc 4f       	sbci	r31, 0xFC	; 252
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	21 91       	ld	r18, Z+

			// set CP strobe to high
			LCD_CP_HIGH();
    3b18:	2f 9a       	sbi	0x05, 7	; 5

			// send high-order nibble HHHHxxxx on the data bus
	    	mCat2(PORT,LCD_PORT) = (mCat2(PORT,LCD_PORT) & 0xF0) | (b >> 4);
    3b1a:	82 b1       	in	r24, 0x02	; 2
    3b1c:	92 2f       	mov	r25, r18
    3b1e:	92 95       	swap	r25
    3b20:	9f 70       	andi	r25, 0x0F	; 15
    3b22:	80 7f       	andi	r24, 0xF0	; 240
    3b24:	98 2b       	or	r25, r24
    3b26:	92 b9       	out	0x02, r25	; 2

			// set CP strobe to low (latch data into LCD row buffer)
		   	LCD_CP_LOW();
    3b28:	2f 98       	cbi	0x05, 7	; 5

			// set CP strobe to high
		  	LCD_CP_HIGH();
    3b2a:	2f 9a       	sbi	0x05, 7	; 5

			// send low-order nibble xxxxLLLL on the data bus
		  	mCat2(PORT,LCD_PORT) = (mCat2(PORT,LCD_PORT) & 0xF0) | (b & 0x0F);
    3b2c:	82 b1       	in	r24, 0x02	; 2
    3b2e:	2f 70       	andi	r18, 0x0F	; 15
    3b30:	80 7f       	andi	r24, 0xF0	; 240
    3b32:	28 2b       	or	r18, r24
    3b34:	22 b9       	out	0x02, r18	; 2

			// set CP strobe to low (latch data into LCD row buffer)
		  	LCD_CP_LOW();
    3b36:	2f 98       	cbi	0x05, 7	; 5
	U8  b;

	if (LCDInitialized != 0)
	{

		for(j=0; j<LCD_WIDTH_BYTES; j++) 
    3b38:	3f 5f       	subi	r19, 0xFF	; 255
    3b3a:	34 31       	cpi	r19, 0x14	; 20
    3b3c:	61 f7       	brne	.-40     	; 0x3b16 <LCDTick+0x18>
			// set CP strobe to low (latch data into LCD row buffer)
		  	LCD_CP_LOW();
		 }

         // Latch the sent row into LCD
	     LCD_LP_HIGH();
    3b3e:	15 9a       	sbi	0x02, 5	; 2

		 // when running on 16 MHz, pulse is too short without some delay
		 asm volatile ("nop\n");
    3b40:	00 00       	nop

	     LCD_LP_LOW();
    3b42:	15 98       	cbi	0x02, 5	; 2

		 // remove the new frame signal if it was set
	     LCD_FLM_LOW();
    3b44:	14 98       	cbi	0x02, 4	; 2


		 RowCounter += LCD_WIDTH_BYTES;
    3b46:	ca 01       	movw	r24, r20
    3b48:	44 96       	adiw	r24, 0x14	; 20
    3b4a:	90 93 1f 01 	sts	0x011F, r25
    3b4e:	80 93 1e 01 	sts	0x011E, r24
		 if (RowCounter >= LCD_BUFFER_SIZE)
    3b52:	80 58       	subi	r24, 0x80	; 128
    3b54:	9c 40       	sbci	r25, 0x0C	; 12
    3b56:	28 f0       	brcs	.+10     	; 0x3b62 <LCDTick+0x64>
		 {
		 	RowCounter = 0;
    3b58:	10 92 1f 01 	sts	0x011F, r1
    3b5c:	10 92 1e 01 	sts	0x011E, r1
			// set FLM (new frame) signal to active
	       	LCD_FLM_HIGH();
    3b60:	14 9a       	sbi	0x02, 4	; 2
    3b62:	08 95       	ret

00003b64 <LCDInitialize>:
//
// Result   : none
//
//*****************************************************************************
void LCDInitialize (void)
{
    3b64:	10 92 1d 01 	sts	0x011D, r1
	// say LCD is not initialized during initialization sequence
	LCDInitialized = 0;

	// Initialize the peripherals:
	// CP signal inactive
	LCD_CP_HIGH();
    3b68:	2f 9a       	sbi	0x05, 7	; 5
	// CP pin: make it output -- sbi (DDRB,PORTB7); or DDRB = DDRB | 1<<DDB7;
	sbi (mCat2(DDR,LCD_PORT_CP),mCat3(PORT,LCD_PORT_CP,LCD_PIN_CP));
    3b6a:	27 9a       	sbi	0x04, 7	; 4

	// Data port: make all 8 pins outputs
	mCat2(DDR,LCD_PORT) = 0xFF;
    3b6c:	8f ef       	ldi	r24, 0xFF	; 255
    3b6e:	81 b9       	out	0x01, r24	; 1
	// Data port + some control signals (macros not used for single instruction)
	mCat2(PORT,LCD_PORT) = 0;
    3b70:	12 b8       	out	0x02, r1	; 2

	// EN signal
	LCD_EN_LOW();
    3b72:	46 98       	cbi	0x08, 6	; 8
	// EN pin: make it output
	sbi (mCat2(DDR,LCD_PORT_EN),mCat3(PORT,LCD_PORT_EN,LCD_PIN_EN));
    3b74:	3e 9a       	sbi	0x07, 6	; 7
}
    3b76:	08 95       	ret

00003b78 <LCDWriteChar>:
//
// Result   : none
//
//*****************************************************************************
void LCDWriteChar (U8 x, U8 y, U8 ch, U8 inv)
{
    3b78:	85 31       	cpi	r24, 0x15	; 21
    3b7a:	08 f0       	brcs	.+2      	; 0x3b7e <LCDWriteChar+0x6>
    3b7c:	8d c1       	rjmp	.+794    	; 0x3e98 <LCDWriteChar+0x320>
    3b7e:	65 31       	cpi	r22, 0x15	; 21
    3b80:	08 f0       	brcs	.+2      	; 0x3b84 <LCDWriteChar+0xc>
    3b82:	8a c1       	rjmp	.+788    	; 0x3e98 <LCDWriteChar+0x320>
    3b84:	40 32       	cpi	r20, 0x20	; 32
    3b86:	08 f4       	brcc	.+2      	; 0x3b8a <LCDWriteChar+0x12>
    3b88:	87 c1       	rjmp	.+782    	; 0x3e98 <LCDWriteChar+0x320>
    3b8a:	40 3a       	cpi	r20, 0xA0	; 160
    3b8c:	08 f0       	brcs	.+2      	; 0x3b90 <LCDWriteChar+0x18>
    3b8e:	84 c1       	rjmp	.+776    	; 0x3e98 <LCDWriteChar+0x320>
		(ch >= FONT_START_CHAR)	&&
		(ch < (FONT_NUM_CHARS + FONT_START_CHAR))
	   )
	{
		// adjust vertical position from char lines to pixels
		y = y * FONT_CHAR_HEIGHT;
    3b90:	40 52       	subi	r20, 0x20	; 32
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	44 0f       	add	r20, r20
    3b96:	55 1f       	adc	r21, r21
    3b98:	44 0f       	add	r20, r20
    3b9a:	55 1f       	adc	r21, r21
    3b9c:	44 0f       	add	r20, r20
    3b9e:	55 1f       	adc	r21, r21
    3ba0:	66 0f       	add	r22, r22
    3ba2:	66 0f       	add	r22, r22
    3ba4:	66 0f       	add	r22, r22
    3ba6:	70 e0       	ldi	r23, 0x00	; 0
    3ba8:	a8 2f       	mov	r26, r24
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	21 30       	cpi	r18, 0x01	; 1
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <LCDWriteChar+0x3a>
    3bb0:	b6 c0       	rjmp	.+364    	; 0x3d1e <LCDWriteChar+0x1a6>

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3bb2:	fa 01       	movw	r30, r20
    3bb4:	e3 56       	subi	r30, 0x63	; 99
    3bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb8:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3bba:	fb 01       	movw	r30, r22
    3bbc:	ee 0f       	add	r30, r30
    3bbe:	ff 1f       	adc	r31, r31
    3bc0:	ee 0f       	add	r30, r30
    3bc2:	ff 1f       	adc	r31, r31
    3bc4:	cf 01       	movw	r24, r30
    3bc6:	88 0f       	add	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	88 0f       	add	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	e8 0f       	add	r30, r24
    3bd0:	f9 1f       	adc	r31, r25
    3bd2:	ea 0f       	add	r30, r26
    3bd4:	fb 1f       	adc	r31, r27
    3bd6:	e9 50       	subi	r30, 0x09	; 9
    3bd8:	fc 4f       	sbci	r31, 0xFC	; 252
    3bda:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3bdc:	fa 01       	movw	r30, r20
    3bde:	e2 56       	subi	r30, 0x62	; 98
    3be0:	fe 4f       	sbci	r31, 0xFE	; 254
    3be2:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3be4:	6f 5f       	subi	r22, 0xFF	; 255
    3be6:	7f 4f       	sbci	r23, 0xFF	; 255
    3be8:	fb 01       	movw	r30, r22
    3bea:	ee 0f       	add	r30, r30
    3bec:	ff 1f       	adc	r31, r31
    3bee:	ee 0f       	add	r30, r30
    3bf0:	ff 1f       	adc	r31, r31
    3bf2:	cf 01       	movw	r24, r30
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	e8 0f       	add	r30, r24
    3bfe:	f9 1f       	adc	r31, r25
    3c00:	ea 0f       	add	r30, r26
    3c02:	fb 1f       	adc	r31, r27
    3c04:	e9 50       	subi	r30, 0x09	; 9
    3c06:	fc 4f       	sbci	r31, 0xFC	; 252
    3c08:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3c0a:	fa 01       	movw	r30, r20
    3c0c:	e1 56       	subi	r30, 0x61	; 97
    3c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c10:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3c12:	6f 5f       	subi	r22, 0xFF	; 255
    3c14:	7f 4f       	sbci	r23, 0xFF	; 255
    3c16:	fb 01       	movw	r30, r22
    3c18:	ee 0f       	add	r30, r30
    3c1a:	ff 1f       	adc	r31, r31
    3c1c:	ee 0f       	add	r30, r30
    3c1e:	ff 1f       	adc	r31, r31
    3c20:	cf 01       	movw	r24, r30
    3c22:	88 0f       	add	r24, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	e8 0f       	add	r30, r24
    3c2c:	f9 1f       	adc	r31, r25
    3c2e:	ea 0f       	add	r30, r26
    3c30:	fb 1f       	adc	r31, r27
    3c32:	e9 50       	subi	r30, 0x09	; 9
    3c34:	fc 4f       	sbci	r31, 0xFC	; 252
    3c36:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3c38:	fa 01       	movw	r30, r20
    3c3a:	e0 56       	subi	r30, 0x60	; 96
    3c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3e:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3c40:	6f 5f       	subi	r22, 0xFF	; 255
    3c42:	7f 4f       	sbci	r23, 0xFF	; 255
    3c44:	fb 01       	movw	r30, r22
    3c46:	ee 0f       	add	r30, r30
    3c48:	ff 1f       	adc	r31, r31
    3c4a:	ee 0f       	add	r30, r30
    3c4c:	ff 1f       	adc	r31, r31
    3c4e:	cf 01       	movw	r24, r30
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	e8 0f       	add	r30, r24
    3c5a:	f9 1f       	adc	r31, r25
    3c5c:	ea 0f       	add	r30, r26
    3c5e:	fb 1f       	adc	r31, r27
    3c60:	e9 50       	subi	r30, 0x09	; 9
    3c62:	fc 4f       	sbci	r31, 0xFC	; 252
    3c64:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3c66:	fa 01       	movw	r30, r20
    3c68:	ef 55       	subi	r30, 0x5F	; 95
    3c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6c:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3c6e:	6f 5f       	subi	r22, 0xFF	; 255
    3c70:	7f 4f       	sbci	r23, 0xFF	; 255
    3c72:	fb 01       	movw	r30, r22
    3c74:	ee 0f       	add	r30, r30
    3c76:	ff 1f       	adc	r31, r31
    3c78:	ee 0f       	add	r30, r30
    3c7a:	ff 1f       	adc	r31, r31
    3c7c:	cf 01       	movw	r24, r30
    3c7e:	88 0f       	add	r24, r24
    3c80:	99 1f       	adc	r25, r25
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	e8 0f       	add	r30, r24
    3c88:	f9 1f       	adc	r31, r25
    3c8a:	ea 0f       	add	r30, r26
    3c8c:	fb 1f       	adc	r31, r27
    3c8e:	e9 50       	subi	r30, 0x09	; 9
    3c90:	fc 4f       	sbci	r31, 0xFC	; 252
    3c92:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3c94:	fa 01       	movw	r30, r20
    3c96:	ee 55       	subi	r30, 0x5E	; 94
    3c98:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9a:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3c9c:	6f 5f       	subi	r22, 0xFF	; 255
    3c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca0:	fb 01       	movw	r30, r22
    3ca2:	ee 0f       	add	r30, r30
    3ca4:	ff 1f       	adc	r31, r31
    3ca6:	ee 0f       	add	r30, r30
    3ca8:	ff 1f       	adc	r31, r31
    3caa:	cf 01       	movw	r24, r30
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	e8 0f       	add	r30, r24
    3cb6:	f9 1f       	adc	r31, r25
    3cb8:	ea 0f       	add	r30, r26
    3cba:	fb 1f       	adc	r31, r27
    3cbc:	e9 50       	subi	r30, 0x09	; 9
    3cbe:	fc 4f       	sbci	r31, 0xFC	; 252
    3cc0:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3cc2:	fa 01       	movw	r30, r20
    3cc4:	ed 55       	subi	r30, 0x5D	; 93
    3cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc8:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3cca:	6f 5f       	subi	r22, 0xFF	; 255
    3ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cce:	fb 01       	movw	r30, r22
    3cd0:	ee 0f       	add	r30, r30
    3cd2:	ff 1f       	adc	r31, r31
    3cd4:	ee 0f       	add	r30, r30
    3cd6:	ff 1f       	adc	r31, r31
    3cd8:	cf 01       	movw	r24, r30
    3cda:	88 0f       	add	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	88 0f       	add	r24, r24
    3ce0:	99 1f       	adc	r25, r25
    3ce2:	e8 0f       	add	r30, r24
    3ce4:	f9 1f       	adc	r31, r25
    3ce6:	ea 0f       	add	r30, r26
    3ce8:	fb 1f       	adc	r31, r27
    3cea:	e9 50       	subi	r30, 0x09	; 9
    3cec:	fc 4f       	sbci	r31, 0xFC	; 252
    3cee:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3cf0:	4c 55       	subi	r20, 0x5C	; 92
    3cf2:	5e 4f       	sbci	r21, 0xFE	; 254
    3cf4:	fa 01       	movw	r30, r20
    3cf6:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    3cf8:	fb 01       	movw	r30, r22
    3cfa:	31 96       	adiw	r30, 0x01	; 1
    3cfc:	ee 0f       	add	r30, r30
    3cfe:	ff 1f       	adc	r31, r31
    3d00:	ee 0f       	add	r30, r30
    3d02:	ff 1f       	adc	r31, r31
    3d04:	cf 01       	movw	r24, r30
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	88 0f       	add	r24, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	e8 0f       	add	r30, r24
    3d10:	f9 1f       	adc	r31, r25
    3d12:	ea 0f       	add	r30, r26
    3d14:	fb 1f       	adc	r31, r27
    3d16:	e9 50       	subi	r30, 0x09	; 9
    3d18:	fc 4f       	sbci	r31, 0xFC	; 252
    3d1a:	20 83       	st	Z, r18
    3d1c:	08 95       	ret

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3d1e:	fa 01       	movw	r30, r20
    3d20:	e3 56       	subi	r30, 0x63	; 99
    3d22:	fe 4f       	sbci	r31, 0xFE	; 254
    3d24:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3d26:	fb 01       	movw	r30, r22
    3d28:	ee 0f       	add	r30, r30
    3d2a:	ff 1f       	adc	r31, r31
    3d2c:	ee 0f       	add	r30, r30
    3d2e:	ff 1f       	adc	r31, r31
    3d30:	cf 01       	movw	r24, r30
    3d32:	88 0f       	add	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	e8 0f       	add	r30, r24
    3d3c:	f9 1f       	adc	r31, r25
    3d3e:	ea 0f       	add	r30, r26
    3d40:	fb 1f       	adc	r31, r27
    3d42:	e9 50       	subi	r30, 0x09	; 9
    3d44:	fc 4f       	sbci	r31, 0xFC	; 252
    3d46:	20 95       	com	r18
    3d48:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3d4a:	fa 01       	movw	r30, r20
    3d4c:	e2 56       	subi	r30, 0x62	; 98
    3d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d50:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3d52:	6f 5f       	subi	r22, 0xFF	; 255
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	fb 01       	movw	r30, r22
    3d58:	ee 0f       	add	r30, r30
    3d5a:	ff 1f       	adc	r31, r31
    3d5c:	ee 0f       	add	r30, r30
    3d5e:	ff 1f       	adc	r31, r31
    3d60:	cf 01       	movw	r24, r30
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	88 0f       	add	r24, r24
    3d68:	99 1f       	adc	r25, r25
    3d6a:	e8 0f       	add	r30, r24
    3d6c:	f9 1f       	adc	r31, r25
    3d6e:	ea 0f       	add	r30, r26
    3d70:	fb 1f       	adc	r31, r27
    3d72:	e9 50       	subi	r30, 0x09	; 9
    3d74:	fc 4f       	sbci	r31, 0xFC	; 252
    3d76:	20 95       	com	r18
    3d78:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3d7a:	fa 01       	movw	r30, r20
    3d7c:	e1 56       	subi	r30, 0x61	; 97
    3d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d80:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3d82:	6f 5f       	subi	r22, 0xFF	; 255
    3d84:	7f 4f       	sbci	r23, 0xFF	; 255
    3d86:	fb 01       	movw	r30, r22
    3d88:	ee 0f       	add	r30, r30
    3d8a:	ff 1f       	adc	r31, r31
    3d8c:	ee 0f       	add	r30, r30
    3d8e:	ff 1f       	adc	r31, r31
    3d90:	cf 01       	movw	r24, r30
    3d92:	88 0f       	add	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	88 0f       	add	r24, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	e8 0f       	add	r30, r24
    3d9c:	f9 1f       	adc	r31, r25
    3d9e:	ea 0f       	add	r30, r26
    3da0:	fb 1f       	adc	r31, r27
    3da2:	e9 50       	subi	r30, 0x09	; 9
    3da4:	fc 4f       	sbci	r31, 0xFC	; 252
    3da6:	20 95       	com	r18
    3da8:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3daa:	fa 01       	movw	r30, r20
    3dac:	e0 56       	subi	r30, 0x60	; 96
    3dae:	fe 4f       	sbci	r31, 0xFE	; 254
    3db0:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3db2:	6f 5f       	subi	r22, 0xFF	; 255
    3db4:	7f 4f       	sbci	r23, 0xFF	; 255
    3db6:	fb 01       	movw	r30, r22
    3db8:	ee 0f       	add	r30, r30
    3dba:	ff 1f       	adc	r31, r31
    3dbc:	ee 0f       	add	r30, r30
    3dbe:	ff 1f       	adc	r31, r31
    3dc0:	cf 01       	movw	r24, r30
    3dc2:	88 0f       	add	r24, r24
    3dc4:	99 1f       	adc	r25, r25
    3dc6:	88 0f       	add	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	e8 0f       	add	r30, r24
    3dcc:	f9 1f       	adc	r31, r25
    3dce:	ea 0f       	add	r30, r26
    3dd0:	fb 1f       	adc	r31, r27
    3dd2:	e9 50       	subi	r30, 0x09	; 9
    3dd4:	fc 4f       	sbci	r31, 0xFC	; 252
    3dd6:	20 95       	com	r18
    3dd8:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3dda:	fa 01       	movw	r30, r20
    3ddc:	ef 55       	subi	r30, 0x5F	; 95
    3dde:	fe 4f       	sbci	r31, 0xFE	; 254
    3de0:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3de2:	6f 5f       	subi	r22, 0xFF	; 255
    3de4:	7f 4f       	sbci	r23, 0xFF	; 255
    3de6:	fb 01       	movw	r30, r22
    3de8:	ee 0f       	add	r30, r30
    3dea:	ff 1f       	adc	r31, r31
    3dec:	ee 0f       	add	r30, r30
    3dee:	ff 1f       	adc	r31, r31
    3df0:	cf 01       	movw	r24, r30
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	e8 0f       	add	r30, r24
    3dfc:	f9 1f       	adc	r31, r25
    3dfe:	ea 0f       	add	r30, r26
    3e00:	fb 1f       	adc	r31, r27
    3e02:	e9 50       	subi	r30, 0x09	; 9
    3e04:	fc 4f       	sbci	r31, 0xFC	; 252
    3e06:	20 95       	com	r18
    3e08:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3e0a:	fa 01       	movw	r30, r20
    3e0c:	ee 55       	subi	r30, 0x5E	; 94
    3e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e10:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3e12:	6f 5f       	subi	r22, 0xFF	; 255
    3e14:	7f 4f       	sbci	r23, 0xFF	; 255
    3e16:	fb 01       	movw	r30, r22
    3e18:	ee 0f       	add	r30, r30
    3e1a:	ff 1f       	adc	r31, r31
    3e1c:	ee 0f       	add	r30, r30
    3e1e:	ff 1f       	adc	r31, r31
    3e20:	cf 01       	movw	r24, r30
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	e8 0f       	add	r30, r24
    3e2c:	f9 1f       	adc	r31, r25
    3e2e:	ea 0f       	add	r30, r26
    3e30:	fb 1f       	adc	r31, r27
    3e32:	e9 50       	subi	r30, 0x09	; 9
    3e34:	fc 4f       	sbci	r31, 0xFC	; 252
    3e36:	20 95       	com	r18
    3e38:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3e3a:	fa 01       	movw	r30, r20
    3e3c:	ed 55       	subi	r30, 0x5D	; 93
    3e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e40:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3e42:	6f 5f       	subi	r22, 0xFF	; 255
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	fb 01       	movw	r30, r22
    3e48:	ee 0f       	add	r30, r30
    3e4a:	ff 1f       	adc	r31, r31
    3e4c:	ee 0f       	add	r30, r30
    3e4e:	ff 1f       	adc	r31, r31
    3e50:	cf 01       	movw	r24, r30
    3e52:	88 0f       	add	r24, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	88 0f       	add	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	e8 0f       	add	r30, r24
    3e5c:	f9 1f       	adc	r31, r25
    3e5e:	ea 0f       	add	r30, r26
    3e60:	fb 1f       	adc	r31, r27
    3e62:	e9 50       	subi	r30, 0x09	; 9
    3e64:	fc 4f       	sbci	r31, 0xFC	; 252
    3e66:	20 95       	com	r18
    3e68:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    3e6a:	4c 55       	subi	r20, 0x5C	; 92
    3e6c:	5e 4f       	sbci	r21, 0xFE	; 254
    3e6e:	fa 01       	movw	r30, r20
    3e70:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    3e72:	fb 01       	movw	r30, r22
    3e74:	31 96       	adiw	r30, 0x01	; 1
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	ee 0f       	add	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	cf 01       	movw	r24, r30
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	e8 0f       	add	r30, r24
    3e8a:	f9 1f       	adc	r31, r25
    3e8c:	ea 0f       	add	r30, r26
    3e8e:	fb 1f       	adc	r31, r27
    3e90:	e9 50       	subi	r30, 0x09	; 9
    3e92:	fc 4f       	sbci	r31, 0xFC	; 252
    3e94:	20 95       	com	r18
    3e96:	20 83       	st	Z, r18
    3e98:	08 95       	ret

00003e9a <LCDCopyScreen>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void LCDCopyScreen	(void){
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	90 e0       	ldi	r25, 0x00	; 0

	int i;

	for(i=0;i<3200;i++)
		LCDFrameBuffer[i] = pgm_read_byte(&screen[i]);
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	e3 51       	subi	r30, 0x13	; 19
    3ea2:	fb 4f       	sbci	r31, 0xFB	; 251
    3ea4:	e4 91       	lpm	r30, Z+
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	a9 50       	subi	r26, 0x09	; 9
    3eaa:	bc 4f       	sbci	r27, 0xFC	; 252
    3eac:	ec 93       	st	X, r30
//*****************************************************************************
void LCDCopyScreen	(void){

	int i;

	for(i=0;i<3200;i++)
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	2c e0       	ldi	r18, 0x0C	; 12
    3eb2:	80 38       	cpi	r24, 0x80	; 128
    3eb4:	92 07       	cpc	r25, r18
    3eb6:	99 f7       	brne	.-26     	; 0x3e9e <LCDCopyScreen+0x4>
		LCDFrameBuffer[i] = pgm_read_byte(&screen[i]);

}
    3eb8:	08 95       	ret

00003eba <LCDWriteDigit_>:
//			  digit			-> Digit to be printed(0..9)
//
// Result   : none
//
//*****************************************************************************
void LCDWriteDigit_	(U8 x, U8 y, U8 digit_type, U8 digit){
    3eba:	cf 92       	push	r12
    3ebc:	df 92       	push	r13
    3ebe:	ef 92       	push	r14
    3ec0:	ff 92       	push	r15
    3ec2:	0f 93       	push	r16
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29

	U16 i, pos;

	//determine start position
	pos = y*LINE_NUM_CHARS + x;
    3eca:	94 e1       	ldi	r25, 0x14	; 20
    3ecc:	69 9f       	mul	r22, r25
    3ece:	e0 01       	movw	r28, r0
    3ed0:	11 24       	eor	r1, r1
    3ed2:	c8 0f       	add	r28, r24
    3ed4:	d1 1d       	adc	r29, r1
    3ed6:	64 2f       	mov	r22, r20
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	66 0f       	add	r22, r22
    3edc:	77 1f       	adc	r23, r23
    3ede:	66 0f       	add	r22, r22
    3ee0:	77 1f       	adc	r23, r23
    3ee2:	fd e9       	ldi	r31, 0x9D	; 157
    3ee4:	ef 2e       	mov	r14, r31
    3ee6:	f4 e0       	ldi	r31, 0x04	; 4
    3ee8:	ff 2e       	mov	r15, r31
    3eea:	e6 0e       	add	r14, r22
    3eec:	f7 1e       	adc	r15, r23
			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
		
				//print digit
				if(digit_type == BIG_DIGIT)
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	83 e6       	ldi	r24, 0x63	; 99
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	28 9f       	mul	r18, r24
    3ef6:	80 01       	movw	r16, r0
    3ef8:	29 9f       	mul	r18, r25
    3efa:	10 0d       	add	r17, r0
    3efc:	38 9f       	mul	r19, r24
    3efe:	10 0d       	add	r17, r0
    3f00:	11 24       	eor	r1, r1
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
    3f02:	c9 01       	movw	r24, r18
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	82 0f       	add	r24, r18
    3f0a:	93 1f       	adc	r25, r19
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	ee 0f       	add	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	ee 0f       	add	r30, r30
    3f14:	ff 1f       	adc	r31, r31
    3f16:	ee 0f       	add	r30, r30
    3f18:	ff 1f       	adc	r31, r31
    3f1a:	e8 1b       	sub	r30, r24
    3f1c:	f9 0b       	sbc	r31, r25
    3f1e:	ee 0f       	add	r30, r30
    3f20:	ff 1f       	adc	r31, r31
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    3f22:	db 01       	movw	r26, r22
    3f24:	a1 56       	subi	r26, 0x61	; 97
    3f26:	bb 4f       	sbci	r27, 0xFB	; 251
    3f28:	44 23       	and	r20, r20
    3f2a:	79 f5       	brne	.+94     	; 0x3f8a <LCDWriteDigit_+0xd0>
    3f2c:	03 59       	subi	r16, 0x93	; 147
    3f2e:	1e 4e       	sbci	r17, 0xEE	; 238
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    3f34:	f7 01       	movw	r30, r14
    3f36:	84 91       	lpm	r24, Z+
    3f38:	e8 2e       	mov	r14, r24
    3f3a:	ff 24       	eor	r15, r15
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    3f3c:	fd 01       	movw	r30, r26
    3f3e:	44 91       	lpm	r20, Z+
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    3f40:	c4 2e       	mov	r12, r20
    3f42:	dd 24       	eor	r13, r13
    3f44:	05 c0       	rjmp	.+10     	; 0x3f50 <LCDWriteDigit_+0x96>
    3f46:	65 96       	adiw	r28, 0x15	; 21
    3f48:	cc 19       	sub	r28, r12
    3f4a:	dd 09       	sbc	r29, r13
				else
					pos++;
    3f4c:	0f 5f       	subi	r16, 0xFF	; 255
    3f4e:	1f 4f       	sbci	r17, 0xFF	; 255

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    3f50:	2e 15       	cp	r18, r14
    3f52:	3f 05       	cpc	r19, r15
    3f54:	88 f4       	brcc	.+34     	; 0x3f78 <LCDWriteDigit_+0xbe>
		
				//print digit
				if(digit_type == BIG_DIGIT)
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
    3f56:	f8 01       	movw	r30, r16
    3f58:	84 91       	lpm	r24, Z+
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e9 50       	subi	r30, 0x09	; 9
    3f5e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f60:	80 83       	st	Z, r24
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    3f62:	2f 5f       	subi	r18, 0xFF	; 255
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	c9 01       	movw	r24, r18
    3f68:	64 2f       	mov	r22, r20
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    3f70:	89 2b       	or	r24, r25
    3f72:	49 f3       	breq	.-46     	; 0x3f46 <LCDWriteDigit_+0x8c>
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
				else
					pos++;
    3f74:	21 96       	adiw	r28, 0x01	; 1
    3f76:	ea cf       	rjmp	.-44     	; 0x3f4c <LCDWriteDigit_+0x92>

			}

}
    3f78:	df 91       	pop	r29
    3f7a:	cf 91       	pop	r28
    3f7c:	1f 91       	pop	r17
    3f7e:	0f 91       	pop	r16
    3f80:	ff 90       	pop	r15
    3f82:	ef 90       	pop	r14
    3f84:	df 90       	pop	r13
    3f86:	cf 90       	pop	r12
    3f88:	08 95       	ret
    3f8a:	8f 01       	movw	r16, r30
    3f8c:	05 5b       	subi	r16, 0xB5	; 181
    3f8e:	1a 4e       	sbci	r17, 0xEA	; 234
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    3f94:	f7 01       	movw	r30, r14
    3f96:	84 91       	lpm	r24, Z+
    3f98:	e8 2e       	mov	r14, r24
    3f9a:	ff 24       	eor	r15, r15
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    3f9c:	fd 01       	movw	r30, r26
    3f9e:	44 91       	lpm	r20, Z+
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    3fa0:	c4 2e       	mov	r12, r20
    3fa2:	dd 24       	eor	r13, r13
    3fa4:	03 c0       	rjmp	.+6      	; 0x3fac <LCDWriteDigit_+0xf2>
				else
					pos++;
    3fa6:	21 96       	adiw	r28, 0x01	; 1
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    3fa8:	0f 5f       	subi	r16, 0xFF	; 255
    3faa:	1f 4f       	sbci	r17, 0xFF	; 255

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    3fac:	2e 15       	cp	r18, r14
    3fae:	3f 05       	cpc	r19, r15
    3fb0:	18 f7       	brcc	.-58     	; 0x3f78 <LCDWriteDigit_+0xbe>
		
				//print digit
				if(digit_type == BIG_DIGIT)
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
    3fb2:	f8 01       	movw	r30, r16
    3fb4:	84 91       	lpm	r24, Z+
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	e9 50       	subi	r30, 0x09	; 9
    3fba:	fc 4f       	sbci	r31, 0xFC	; 252
    3fbc:	80 83       	st	Z, r24
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    3fbe:	2f 5f       	subi	r18, 0xFF	; 255
    3fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc2:	c9 01       	movw	r24, r18
    3fc4:	64 2f       	mov	r22, r20
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    3fcc:	89 2b       	or	r24, r25
    3fce:	59 f7       	brne	.-42     	; 0x3fa6 <LCDWriteDigit_+0xec>
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    3fd0:	65 96       	adiw	r28, 0x15	; 21
    3fd2:	cc 19       	sub	r28, r12
    3fd4:	dd 09       	sbc	r29, r13
    3fd6:	e8 cf       	rjmp	.-48     	; 0x3fa8 <LCDWriteDigit_+0xee>

00003fd8 <LCDWriteIcon>:
//							   (Definitions available in lcd_driver.h)
//
// Result   : none
//
//*****************************************************************************
void LCDWriteIcon	(U8 x, U8 y, U8 icon){
    3fd8:	af 92       	push	r10
    3fda:	bf 92       	push	r11
    3fdc:	cf 92       	push	r12
    3fde:	df 92       	push	r13
    3fe0:	ef 92       	push	r14
    3fe2:	ff 92       	push	r15
    3fe4:	0f 93       	push	r16
    3fe6:	1f 93       	push	r17
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29

	U16 i, pos;

	//calculating the initial position
	pos = y*LINE_NUM_CHARS + x;
    3fec:	94 e1       	ldi	r25, 0x14	; 20
    3fee:	69 9f       	mul	r22, r25
    3ff0:	e0 01       	movw	r28, r0
    3ff2:	11 24       	eor	r1, r1
    3ff4:	c8 0f       	add	r28, r24
    3ff6:	d1 1d       	adc	r29, r1
    3ff8:	e4 2f       	mov	r30, r20
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	ee 0f       	add	r30, r30
    3ffe:	ff 1f       	adc	r31, r31
    4000:	ee 0f       	add	r30, r30
    4002:	ff 1f       	adc	r31, r31
				case CLR_HALF_GEAR:	LCDFrameBuffer[pos] = pgm_read_byte(&array21[i]);
									break;
			}

			//if WIDTH of the icon is reached -> go to next line in FrameBuffer array
			if(((i+1)%pgm_read_byte(&SizeWidthValues[icon][WIDTH]))==0)
    4004:	cf 01       	movw	r24, r30
    4006:	81 56       	subi	r24, 0x61	; 97
    4008:	9b 4f       	sbci	r25, 0xFB	; 251
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
void LCDWriteIcon	(U8 x, U8 y, U8 icon){

	U16 i, pos;

	//calculating the initial position
	pos = y*LINE_NUM_CHARS + x;
    400e:	e3 56       	subi	r30, 0x63	; 99
    4010:	fb 4f       	sbci	r31, 0xFB	; 251
		
		//Loop for each byte in the icon
		for(i=0;i<pgm_read_word(&SizeWidthValues[icon][SIZE]);i++){
    4012:	e5 90       	lpm	r14, Z+
    4014:	f4 90       	lpm	r15, Z+
	
			//Determining which array in FLASH to be used;
			//Coping each byte into appropriate place in FrameBuffer array
			switch(icon){
    4016:	04 2f       	mov	r16, r20
    4018:	10 e0       	ldi	r17, 0x00	; 0
    401a:	ba e4       	ldi	r27, 0x4A	; 74
    401c:	ab 2e       	mov	r10, r27
    401e:	b0 e0       	ldi	r27, 0x00	; 0
    4020:	bb 2e       	mov	r11, r27
    4022:	a0 0e       	add	r10, r16
    4024:	b1 1e       	adc	r11, r17
				case CLR_HALF_GEAR:	LCDFrameBuffer[pos] = pgm_read_byte(&array21[i]);
									break;
			}

			//if WIDTH of the icon is reached -> go to next line in FrameBuffer array
			if(((i+1)%pgm_read_byte(&SizeWidthValues[icon][WIDTH]))==0)
    4026:	fc 01       	movw	r30, r24
    4028:	44 91       	lpm	r20, Z+
				
				//new line
				pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[icon][WIDTH])+1;
    402a:	c4 2e       	mov	r12, r20
    402c:	dd 24       	eor	r13, r13

	//calculating the initial position
	pos = y*LINE_NUM_CHARS + x;
		
		//Loop for each byte in the icon
		for(i=0;i<pgm_read_word(&SizeWidthValues[icon][SIZE]);i++){
    402e:	2e 15       	cp	r18, r14
    4030:	3f 05       	cpc	r19, r15
    4032:	08 f5       	brcc	.+66     	; 0x4076 <LCDWriteIcon+0x9e>
	
			//Determining which array in FLASH to be used;
			//Coping each byte into appropriate place in FrameBuffer array
			switch(icon){
    4034:	04 31       	cpi	r16, 0x14	; 20
    4036:	11 05       	cpc	r17, r1
    4038:	78 f4       	brcc	.+30     	; 0x4058 <LCDWriteIcon+0x80>
    403a:	f5 01       	movw	r30, r10
    403c:	ee 0f       	add	r30, r30
    403e:	ff 1f       	adc	r31, r31
    4040:	05 90       	lpm	r0, Z+
    4042:	f4 91       	lpm	r31, Z+
    4044:	e0 2d       	mov	r30, r0
    4046:	09 94       	ijmp
									break;
				case CLR_MINUS:		LCDFrameBuffer[pos] = pgm_read_byte(&array19[i]);
									break;
				case CLR_GEAR_ADV:	LCDFrameBuffer[pos] = pgm_read_byte(&array20[i]);
									break;
				case CLR_HALF_GEAR:	LCDFrameBuffer[pos] = pgm_read_byte(&array21[i]);
    4048:	f9 01       	movw	r30, r18
    404a:	ea 5f       	subi	r30, 0xFA	; 250
    404c:	f2 4e       	sbci	r31, 0xE2	; 226
    404e:	e4 91       	lpm	r30, Z+
    4050:	de 01       	movw	r26, r28
    4052:	a9 50       	subi	r26, 0x09	; 9
    4054:	bc 4f       	sbci	r27, 0xFC	; 252
    4056:	ec 93       	st	X, r30
									break;
			}

			//if WIDTH of the icon is reached -> go to next line in FrameBuffer array
			if(((i+1)%pgm_read_byte(&SizeWidthValues[icon][WIDTH]))==0)
    4058:	2f 5f       	subi	r18, 0xFF	; 255
    405a:	3f 4f       	sbci	r19, 0xFF	; 255
    405c:	c9 01       	movw	r24, r18
    405e:	64 2f       	mov	r22, r20
    4060:	70 e0       	ldi	r23, 0x00	; 0
    4062:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    4066:	89 2b       	or	r24, r25
    4068:	89 f4       	brne	.+34     	; 0x408c <LCDWriteIcon+0xb4>
				
				//new line
				pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[icon][WIDTH])+1;
    406a:	65 96       	adiw	r28, 0x15	; 21
    406c:	cc 19       	sub	r28, r12
    406e:	dd 09       	sbc	r29, r13

	//calculating the initial position
	pos = y*LINE_NUM_CHARS + x;
		
		//Loop for each byte in the icon
		for(i=0;i<pgm_read_word(&SizeWidthValues[icon][SIZE]);i++){
    4070:	2e 15       	cp	r18, r14
    4072:	3f 05       	cpc	r19, r15
    4074:	f8 f2       	brcs	.-66     	; 0x4034 <LCDWriteIcon+0x5c>
			else
				
				//continue on the same row - WIDTH now reached
				pos++;
		}
}
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	bf 90       	pop	r11
    4088:	af 90       	pop	r10
    408a:	08 95       	ret
				//new line
				pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[icon][WIDTH])+1;
			else
				
				//continue on the same row - WIDTH now reached
				pos++;
    408c:	21 96       	adiw	r28, 0x01	; 1
    408e:	cf cf       	rjmp	.-98     	; 0x402e <LCDWriteIcon+0x56>
									break;
				case CLR_TEMP:		LCDFrameBuffer[pos] = pgm_read_byte(&array18[i]);
									break;
				case CLR_MINUS:		LCDFrameBuffer[pos] = pgm_read_byte(&array19[i]);
									break;
				case CLR_GEAR_ADV:	LCDFrameBuffer[pos] = pgm_read_byte(&array20[i]);
    4090:	f9 01       	movw	r30, r18
    4092:	e6 52       	subi	r30, 0x26	; 38
    4094:	f3 4e       	sbci	r31, 0xE3	; 227
    4096:	e4 91       	lpm	r30, Z+
    4098:	de 01       	movw	r26, r28
    409a:	a9 50       	subi	r26, 0x09	; 9
    409c:	bc 4f       	sbci	r27, 0xFC	; 252
    409e:	ec 93       	st	X, r30
    40a0:	db cf       	rjmp	.-74     	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case CELSIUS:		LCDFrameBuffer[pos] = pgm_read_byte(&array17[i]);
									break;
				case CLR_TEMP:		LCDFrameBuffer[pos] = pgm_read_byte(&array18[i]);
									break;
				case CLR_MINUS:		LCDFrameBuffer[pos] = pgm_read_byte(&array19[i]);
    40a2:	f9 01       	movw	r30, r18
    40a4:	eb 53       	subi	r30, 0x3B	; 59
    40a6:	f3 4e       	sbci	r31, 0xE3	; 227
    40a8:	e4 91       	lpm	r30, Z+
    40aa:	de 01       	movw	r26, r28
    40ac:	a9 50       	subi	r26, 0x09	; 9
    40ae:	bc 4f       	sbci	r27, 0xFC	; 252
    40b0:	ec 93       	st	X, r30
    40b2:	d2 cf       	rjmp	.-92     	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case MINUS:			LCDFrameBuffer[pos] = pgm_read_byte(&array16[i]);
									break;
				case CELSIUS:		LCDFrameBuffer[pos] = pgm_read_byte(&array17[i]);
									break;
				case CLR_TEMP:		LCDFrameBuffer[pos] = pgm_read_byte(&array18[i]);
    40b4:	f9 01       	movw	r30, r18
    40b6:	e4 51       	subi	r30, 0x14	; 20
    40b8:	f4 4e       	sbci	r31, 0xE4	; 228
    40ba:	e4 91       	lpm	r30, Z+
    40bc:	de 01       	movw	r26, r28
    40be:	a9 50       	subi	r26, 0x09	; 9
    40c0:	bc 4f       	sbci	r27, 0xFC	; 252
    40c2:	ec 93       	st	X, r30
    40c4:	c9 cf       	rjmp	.-110    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case ARROWS_PAD:	LCDFrameBuffer[pos] = pgm_read_byte(&array13[i]);
									break;
				case MINUS:			LCDFrameBuffer[pos] = pgm_read_byte(&array16[i]);
									break;
				case CELSIUS:		LCDFrameBuffer[pos] = pgm_read_byte(&array17[i]);
    40c6:	f9 01       	movw	r30, r18
    40c8:	ee 53       	subi	r30, 0x3E	; 62
    40ca:	f4 4e       	sbci	r31, 0xE4	; 228
    40cc:	e4 91       	lpm	r30, Z+
    40ce:	de 01       	movw	r26, r28
    40d0:	a9 50       	subi	r26, 0x09	; 9
    40d2:	bc 4f       	sbci	r27, 0xFC	; 252
    40d4:	ec 93       	st	X, r30
    40d6:	c0 cf       	rjmp	.-128    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case BUTTON_OK:		LCDFrameBuffer[pos] = pgm_read_byte(&array12[i]);
									break;
				case ARROWS_PAD:	LCDFrameBuffer[pos] = pgm_read_byte(&array13[i]);
									break;
				case MINUS:			LCDFrameBuffer[pos] = pgm_read_byte(&array16[i]);
    40d8:	f9 01       	movw	r30, r18
    40da:	e3 55       	subi	r30, 0x53	; 83
    40dc:	f4 4e       	sbci	r31, 0xE4	; 228
    40de:	e4 91       	lpm	r30, Z+
    40e0:	de 01       	movw	r26, r28
    40e2:	a9 50       	subi	r26, 0x09	; 9
    40e4:	bc 4f       	sbci	r27, 0xFC	; 252
    40e6:	ec 93       	st	X, r30
    40e8:	b7 cf       	rjmp	.-146    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case LINE:			LCDFrameBuffer[pos] = pgm_read_byte(&array11[i]);
									break;
				case BUTTON_OK:		LCDFrameBuffer[pos] = pgm_read_byte(&array12[i]);
									break;
				case ARROWS_PAD:	LCDFrameBuffer[pos] = pgm_read_byte(&array13[i]);
    40ea:	f9 01       	movw	r30, r18
    40ec:	e0 5c       	subi	r30, 0xC0	; 192
    40ee:	f6 4e       	sbci	r31, 0xE6	; 230
    40f0:	e4 91       	lpm	r30, Z+
    40f2:	de 01       	movw	r26, r28
    40f4:	a9 50       	subi	r26, 0x09	; 9
    40f6:	bc 4f       	sbci	r27, 0xFC	; 252
    40f8:	ec 93       	st	X, r30
    40fa:	ae cf       	rjmp	.-164    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case FUEL_TANK:		LCDFrameBuffer[pos] = pgm_read_byte(&array10[i]);
									break;
				case LINE:			LCDFrameBuffer[pos] = pgm_read_byte(&array11[i]);
									break;
				case BUTTON_OK:		LCDFrameBuffer[pos] = pgm_read_byte(&array12[i]);
    40fc:	f9 01       	movw	r30, r18
    40fe:	e0 5b       	subi	r30, 0xB0	; 176
    4100:	f7 4e       	sbci	r31, 0xE7	; 231
    4102:	e4 91       	lpm	r30, Z+
    4104:	de 01       	movw	r26, r28
    4106:	a9 50       	subi	r26, 0x09	; 9
    4108:	bc 4f       	sbci	r27, 0xFC	; 252
    410a:	ec 93       	st	X, r30
    410c:	a5 cf       	rjmp	.-182    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case R_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array9[i]);
									break;
				case FUEL_TANK:		LCDFrameBuffer[pos] = pgm_read_byte(&array10[i]);
									break;
				case LINE:			LCDFrameBuffer[pos] = pgm_read_byte(&array11[i]);
    410e:	f9 01       	movw	r30, r18
    4110:	e4 5c       	subi	r30, 0xC4	; 196
    4112:	f7 4e       	sbci	r31, 0xE7	; 231
    4114:	e4 91       	lpm	r30, Z+
    4116:	de 01       	movw	r26, r28
    4118:	a9 50       	subi	r26, 0x09	; 9
    411a:	bc 4f       	sbci	r27, 0xFC	; 252
    411c:	ec 93       	st	X, r30
    411e:	9c cf       	rjmp	.-200    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case N_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array8[i]);
									break;
				case R_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array9[i]);
									break;
				case FUEL_TANK:		LCDFrameBuffer[pos] = pgm_read_byte(&array10[i]);
    4120:	f9 01       	movw	r30, r18
    4122:	ee 5e       	subi	r30, 0xEE	; 238
    4124:	f7 4e       	sbci	r31, 0xE7	; 231
    4126:	e4 91       	lpm	r30, Z+
    4128:	de 01       	movw	r26, r28
    412a:	a9 50       	subi	r26, 0x09	; 9
    412c:	bc 4f       	sbci	r27, 0xFC	; 252
    412e:	ec 93       	st	X, r30
    4130:	93 cf       	rjmp	.-218    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case GEAR_DOWN:		LCDFrameBuffer[pos] = pgm_read_byte(&array7[i]);
									break;
				case N_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array8[i]);
									break;
				case R_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array9[i]);
    4132:	f9 01       	movw	r30, r18
    4134:	ee 50       	subi	r30, 0x0E	; 14
    4136:	f8 4e       	sbci	r31, 0xE8	; 232
    4138:	e4 91       	lpm	r30, Z+
    413a:	de 01       	movw	r26, r28
    413c:	a9 50       	subi	r26, 0x09	; 9
    413e:	bc 4f       	sbci	r27, 0xFC	; 252
    4140:	ec 93       	st	X, r30
    4142:	8a cf       	rjmp	.-236    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case GEAR_UP:		LCDFrameBuffer[pos] = pgm_read_byte(&array6[i]);
									break;
				case GEAR_DOWN:		LCDFrameBuffer[pos] = pgm_read_byte(&array7[i]);
									break;
				case N_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array8[i]);
    4144:	f9 01       	movw	r30, r18
    4146:	e1 57       	subi	r30, 0x71	; 113
    4148:	f8 4e       	sbci	r31, 0xE8	; 232
    414a:	e4 91       	lpm	r30, Z+
    414c:	de 01       	movw	r26, r28
    414e:	a9 50       	subi	r26, 0x09	; 9
    4150:	bc 4f       	sbci	r27, 0xFC	; 252
    4152:	ec 93       	st	X, r30
    4154:	81 cf       	rjmp	.-254    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case SLOW_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array5[i]);
									break;
				case GEAR_UP:		LCDFrameBuffer[pos] = pgm_read_byte(&array6[i]);
									break;
				case GEAR_DOWN:		LCDFrameBuffer[pos] = pgm_read_byte(&array7[i]);
    4156:	f9 01       	movw	r30, r18
    4158:	ed 59       	subi	r30, 0x9D	; 157
    415a:	f8 4e       	sbci	r31, 0xE8	; 232
    415c:	e4 91       	lpm	r30, Z+
    415e:	de 01       	movw	r26, r28
    4160:	a9 50       	subi	r26, 0x09	; 9
    4162:	bc 4f       	sbci	r27, 0xFC	; 252
    4164:	ec 93       	st	X, r30
    4166:	78 cf       	rjmp	.-272    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case FAST_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array4[i]);
									break;
				case SLOW_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array5[i]);
									break;
				case GEAR_UP:		LCDFrameBuffer[pos] = pgm_read_byte(&array6[i]);
    4168:	f9 01       	movw	r30, r18
    416a:	e9 5c       	subi	r30, 0xC9	; 201
    416c:	f8 4e       	sbci	r31, 0xE8	; 232
    416e:	e4 91       	lpm	r30, Z+
    4170:	de 01       	movw	r26, r28
    4172:	a9 50       	subi	r26, 0x09	; 9
    4174:	bc 4f       	sbci	r27, 0xFC	; 252
    4176:	ec 93       	st	X, r30
    4178:	6f cf       	rjmp	.-290    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case SPORT_MODE:	LCDFrameBuffer[pos] = pgm_read_byte(&array3[i]);
									break;
				case FAST_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array4[i]);
									break;
				case SLOW_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array5[i]);
    417a:	f9 01       	movw	r30, r18
    417c:	ed 5c       	subi	r30, 0xCD	; 205
    417e:	f8 4e       	sbci	r31, 0xE8	; 232
    4180:	e4 91       	lpm	r30, Z+
    4182:	de 01       	movw	r26, r28
    4184:	a9 50       	subi	r26, 0x09	; 9
    4186:	bc 4f       	sbci	r27, 0xFC	; 252
    4188:	ec 93       	st	X, r30
    418a:	66 cf       	rjmp	.-308    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case ECONOMIC_MODE: LCDFrameBuffer[pos] = pgm_read_byte(&array2[i]);
									break;
				case SPORT_MODE:	LCDFrameBuffer[pos] = pgm_read_byte(&array3[i]);
									break;
				case FAST_GEAR:		LCDFrameBuffer[pos] = pgm_read_byte(&array4[i]);
    418c:	f9 01       	movw	r30, r18
    418e:	e1 5d       	subi	r30, 0xD1	; 209
    4190:	f8 4e       	sbci	r31, 0xE8	; 232
    4192:	e4 91       	lpm	r30, Z+
    4194:	de 01       	movw	r26, r28
    4196:	a9 50       	subi	r26, 0x09	; 9
    4198:	bc 4f       	sbci	r27, 0xFC	; 252
    419a:	ec 93       	st	X, r30
    419c:	5d cf       	rjmp	.-326    	; 0x4058 <LCDWriteIcon+0x80>
									break;
				case CLR_SMALL_DIGIT:LCDFrameBuffer[pos] = pgm_read_byte(&array15[i]);
									break;
				case ECONOMIC_MODE: LCDFrameBuffer[pos] = pgm_read_byte(&array2[i]);
									break;
				case SPORT_MODE:	LCDFrameBuffer[pos] = pgm_read_byte(&array3[i]);
    419e:	f9 01       	movw	r30, r18
    41a0:	e1 5f       	subi	r30, 0xF1	; 241
    41a2:	f8 4e       	sbci	r31, 0xE8	; 232
    41a4:	e4 91       	lpm	r30, Z+
    41a6:	de 01       	movw	r26, r28
    41a8:	a9 50       	subi	r26, 0x09	; 9
    41aa:	bc 4f       	sbci	r27, 0xFC	; 252
    41ac:	ec 93       	st	X, r30
    41ae:	54 cf       	rjmp	.-344    	; 0x4058 <LCDWriteIcon+0x80>
			switch(icon){
				case CLR_BIG_DIGIT:	LCDFrameBuffer[pos] = pgm_read_byte(&array14[i]);
									break;
				case CLR_SMALL_DIGIT:LCDFrameBuffer[pos] = pgm_read_byte(&array15[i]);
									break;
				case ECONOMIC_MODE: LCDFrameBuffer[pos] = pgm_read_byte(&array2[i]);
    41b0:	f9 01       	movw	r30, r18
    41b2:	e1 51       	subi	r30, 0x11	; 17
    41b4:	f9 4e       	sbci	r31, 0xE9	; 233
    41b6:	e4 91       	lpm	r30, Z+
    41b8:	de 01       	movw	r26, r28
    41ba:	a9 50       	subi	r26, 0x09	; 9
    41bc:	bc 4f       	sbci	r27, 0xFC	; 252
    41be:	ec 93       	st	X, r30
    41c0:	4b cf       	rjmp	.-362    	; 0x4058 <LCDWriteIcon+0x80>
			//Determining which array in FLASH to be used;
			//Coping each byte into appropriate place in FrameBuffer array
			switch(icon){
				case CLR_BIG_DIGIT:	LCDFrameBuffer[pos] = pgm_read_byte(&array14[i]);
									break;
				case CLR_SMALL_DIGIT:LCDFrameBuffer[pos] = pgm_read_byte(&array15[i]);
    41c2:	f9 01       	movw	r30, r18
    41c4:	ed 57       	subi	r30, 0x7D	; 125
    41c6:	f4 4e       	sbci	r31, 0xE4	; 228
    41c8:	e4 91       	lpm	r30, Z+
    41ca:	de 01       	movw	r26, r28
    41cc:	a9 50       	subi	r26, 0x09	; 9
    41ce:	bc 4f       	sbci	r27, 0xFC	; 252
    41d0:	ec 93       	st	X, r30
    41d2:	42 cf       	rjmp	.-380    	; 0x4058 <LCDWriteIcon+0x80>
		for(i=0;i<pgm_read_word(&SizeWidthValues[icon][SIZE]);i++){
	
			//Determining which array in FLASH to be used;
			//Coping each byte into appropriate place in FrameBuffer array
			switch(icon){
				case CLR_BIG_DIGIT:	LCDFrameBuffer[pos] = pgm_read_byte(&array14[i]);
    41d4:	f9 01       	movw	r30, r18
    41d6:	e0 5e       	subi	r30, 0xE0	; 224
    41d8:	f4 4e       	sbci	r31, 0xE4	; 228
    41da:	e4 91       	lpm	r30, Z+
    41dc:	de 01       	movw	r26, r28
    41de:	a9 50       	subi	r26, 0x09	; 9
    41e0:	bc 4f       	sbci	r27, 0xFC	; 252
    41e2:	ec 93       	st	X, r30
    41e4:	39 cf       	rjmp	.-398    	; 0x4058 <LCDWriteIcon+0x80>

000041e6 <LCDClearScreen>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void LCDClearScreen	(void){
    41e6:	80 e8       	ldi	r24, 0x80	; 128
    41e8:	9c e0       	ldi	r25, 0x0C	; 12
    41ea:	e7 ef       	ldi	r30, 0xF7	; 247
    41ec:	f3 e0       	ldi	r31, 0x03	; 3
    41ee:	df 01       	movw	r26, r30
    41f0:	9c 01       	movw	r18, r24
    41f2:	1d 92       	st	X+, r1
    41f4:	21 50       	subi	r18, 0x01	; 1
    41f6:	30 40       	sbci	r19, 0x00	; 0
    41f8:	e1 f7       	brne	.-8      	; 0x41f2 <LCDClearScreen+0xc>

	// clear screen
	memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));

}
    41fa:	08 95       	ret

000041fc <LCDStop>:
//
// Result   : none
//
//*****************************************************************************
void LCDStop (void)
{
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
	// say LCD is not initialized (stops the refresh)
	LCDInitialized = 0;
    4200:	10 92 1d 01 	sts	0x011D, r1

	// wait the delay: Olimex source code
	AvrXDelay(&LCDInitTimer, mConvertMsToTicks(LCD_INIT_DELAY));
    4204:	01 ef       	ldi	r16, 0xF1	; 241
    4206:	13 e0       	ldi	r17, 0x03	; 3
    4208:	6a e0       	ldi	r22, 0x0A	; 10
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	c8 01       	movw	r24, r16
    420e:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

	// Set DISP pin to low
	LCD_DISP_LOW();
    4212:	16 98       	cbi	0x02, 6	; 2

	// wait the delay: Olimex source code
	AvrXDelay(&LCDInitTimer, mConvertMsToTicks(LCD_INIT_DELAY));
    4214:	6a e0       	ldi	r22, 0x0A	; 10
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	c8 01       	movw	r24, r16
    421a:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

	// Set VHH pin to low
	LCD_VHH_LOW();
    421e:	17 98       	cbi	0x02, 7	; 2

	// wait the delay: Olimex source code
	AvrXDelay(&LCDInitTimer, mConvertMsToTicks(LCD_INIT_DELAY));
    4220:	6a e0       	ldi	r22, 0x0A	; 10
    4222:	70 e0       	ldi	r23, 0x00	; 0
    4224:	c8 01       	movw	r24, r16
    4226:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>
}
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	08 95       	ret

00004230 <LCDStart>:
//
// Result   : none
//
//*****************************************************************************
void LCDStart (void)
{
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
	// Clear the frame buffer
	memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));
    4234:	80 e8       	ldi	r24, 0x80	; 128
    4236:	9c e0       	ldi	r25, 0x0C	; 12
    4238:	e7 ef       	ldi	r30, 0xF7	; 247
    423a:	f3 e0       	ldi	r31, 0x03	; 3
    423c:	df 01       	movw	r26, r30
    423e:	9c 01       	movw	r18, r24
    4240:	1d 92       	st	X+, r1
    4242:	21 50       	subi	r18, 0x01	; 1
    4244:	30 40       	sbci	r19, 0x00	; 0
    4246:	e1 f7       	brne	.-8      	; 0x4240 <LCDStart+0x10>

	// wait the delay: Olimex source code
	AvrXDelay(&LCDInitTimer, mConvertMsToTicks(LCD_INIT_DELAY));
    4248:	01 ef       	ldi	r16, 0xF1	; 241
    424a:	13 e0       	ldi	r17, 0x03	; 3
    424c:	6a e0       	ldi	r22, 0x0A	; 10
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	c8 01       	movw	r24, r16
    4252:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

	// Set VHH pin to high
	LCD_VHH_HIGH();
    4256:	17 9a       	sbi	0x02, 7	; 2

	// wait the delay: Olimex source code
	AvrXDelay(&LCDInitTimer, mConvertMsToTicks(LCD_INIT_DELAY));
    4258:	6a e0       	ldi	r22, 0x0A	; 10
    425a:	70 e0       	ldi	r23, 0x00	; 0
    425c:	c8 01       	movw	r24, r16
    425e:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

	// Set DISP pin to high
	LCD_DISP_HIGH();
    4262:	16 9a       	sbi	0x02, 6	; 2

	// wait the delay: Olimex source code
	AvrXDelay(&LCDInitTimer, mConvertMsToTicks(LCD_INIT_DELAY));
    4264:	6a e0       	ldi	r22, 0x0A	; 10
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	c8 01       	movw	r24, r16
    426a:	0e 94 03 31 	call	0x6206	; 0x6206 <AvrXDelay>

	// Initialize refresh function
	RowCounter = 0;
    426e:	10 92 1f 01 	sts	0x011F, r1
    4272:	10 92 1e 01 	sts	0x011E, r1

	// enable the refresh function: LCD is now usable
	LCDInitialized = 1;
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	80 93 1d 01 	sts	0x011D, r24
}
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	08 95       	ret

00004282 <LCDWriteStr>:
//			  C_LF:  line feed:       move to the next line
//			  C_CLS: clear screen:	  clear whole screen contents
//
//*****************************************************************************
void LCDWriteStr (U8 x, U8 y, U8 * str, U8 inv)
{
    4282:	cf 92       	push	r12
    4284:	df 92       	push	r13
    4286:	ef 92       	push	r14
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	98 2f       	mov	r25, r24
    4294:	f6 2e       	mov	r15, r22
    4296:	da 01       	movw	r26, r20
    4298:	e2 2e       	mov	r14, r18
    429a:	11 96       	adiw	r26, 0x01	; 1
						// line feed
						y++;
					break;
				case C_CLS:
						// clear screen
						memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));
    429c:	57 ef       	ldi	r21, 0xF7	; 247
    429e:	c5 2e       	mov	r12, r21
    42a0:	53 e0       	ldi	r21, 0x03	; 3
    42a2:	d5 2e       	mov	r13, r21
    42a4:	c0 e8       	ldi	r28, 0x80	; 128
    42a6:	dc e0       	ldi	r29, 0x0C	; 12
//			  C_CLS: clear screen:	  clear whole screen contents
//
//*****************************************************************************
void LCDWriteStr (U8 x, U8 y, U8 * str, U8 inv)
{
	while (*str)
    42a8:	8e 91       	ld	r24, -X
    42aa:	11 96       	adiw	r26, 0x01	; 1
    42ac:	88 23       	and	r24, r24
    42ae:	89 f0       	breq	.+34     	; 0x42d2 <LCDWriteStr+0x50>
	{
		// process control codes
		if (*str < FONT_START_CHAR)
    42b0:	80 32       	cpi	r24, 0x20	; 32
    42b2:	d0 f4       	brcc	.+52     	; 0x42e8 <LCDWriteStr+0x66>
		{
			switch(*str)
    42b4:	8d 30       	cpi	r24, 0x0D	; 13
    42b6:	09 f4       	brne	.+2      	; 0x42ba <LCDWriteStr+0x38>
    42b8:	f2 c0       	rjmp	.+484    	; 0x449e <LCDWriteStr+0x21c>
    42ba:	8b 31       	cpi	r24, 0x1B	; 27
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <LCDWriteStr+0x3e>
    42be:	e8 c0       	rjmp	.+464    	; 0x4490 <LCDWriteStr+0x20e>
    42c0:	8a 30       	cpi	r24, 0x0A	; 10
    42c2:	81 f0       	breq	.+32     	; 0x42e4 <LCDWriteStr+0x62>
						// line feed
						y++;
					break;
				case C_CLS:
						// clear screen
						memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));
    42c4:	19 2f       	mov	r17, r25

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    42c6:	11 96       	adiw	r26, 0x01	; 1
    42c8:	91 2f       	mov	r25, r17
//			  C_CLS: clear screen:	  clear whole screen contents
//
//*****************************************************************************
void LCDWriteStr (U8 x, U8 y, U8 * str, U8 inv)
{
	while (*str)
    42ca:	8e 91       	ld	r24, -X
    42cc:	11 96       	adiw	r26, 0x01	; 1
    42ce:	88 23       	and	r24, r24
    42d0:	79 f7       	brne	.-34     	; 0x42b0 <LCDWriteStr+0x2e>
			// and adjust horizontal position and next character
			// display the current character
			LCDWriteChar(x++, y, *str++, inv);
		}
	}
}
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	1f 91       	pop	r17
    42d8:	0f 91       	pop	r16
    42da:	ff 90       	pop	r15
    42dc:	ef 90       	pop	r14
    42de:	df 90       	pop	r13
    42e0:	cf 90       	pop	r12
    42e2:	08 95       	ret
						// carriage return
						x = 0;
					break;
				case C_LF:
						// line feed
						y++;
    42e4:	f3 94       	inc	r15
    42e6:	ee cf       	rjmp	.-36     	; 0x42c4 <LCDWriteStr+0x42>
		}
		else
		{
			// and adjust horizontal position and next character
			// display the current character
			LCDWriteChar(x++, y, *str++, inv);
    42e8:	19 2f       	mov	r17, r25
    42ea:	1f 5f       	subi	r17, 0xFF	; 255
	U8 	c;
	U8  ch_line;
	U16 fb_index;

	// validity check of incoming data
	if (
    42ec:	95 31       	cpi	r25, 0x15	; 21
    42ee:	58 f7       	brcc	.-42     	; 0x42c6 <LCDWriteStr+0x44>
    42f0:	34 e1       	ldi	r19, 0x14	; 20
    42f2:	3f 15       	cp	r19, r15
    42f4:	40 f3       	brcs	.-48     	; 0x42c6 <LCDWriteStr+0x44>
    42f6:	80 3a       	cpi	r24, 0xA0	; 160
    42f8:	30 f7       	brcc	.-52     	; 0x42c6 <LCDWriteStr+0x44>
    42fa:	80 52       	subi	r24, 0x20	; 32
    42fc:	28 2f       	mov	r18, r24
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	22 0f       	add	r18, r18
    4302:	33 1f       	adc	r19, r19
    4304:	22 0f       	add	r18, r18
    4306:	33 1f       	adc	r19, r19
    4308:	22 0f       	add	r18, r18
    430a:	33 1f       	adc	r19, r19
    430c:	8f 2d       	mov	r24, r15
    430e:	88 0f       	add	r24, r24
    4310:	88 0f       	add	r24, r24
    4312:	88 0f       	add	r24, r24
    4314:	48 2f       	mov	r20, r24
    4316:	50 e0       	ldi	r21, 0x00	; 0
    4318:	69 2f       	mov	r22, r25
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	e8 16       	cp	r14, r24
    4320:	09 f4       	brne	.+2      	; 0x4324 <LCDWriteStr+0xa2>
    4322:	bf c0       	rjmp	.+382    	; 0x44a2 <LCDWriteStr+0x220>

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4324:	f9 01       	movw	r30, r18
    4326:	e3 56       	subi	r30, 0x63	; 99
    4328:	fe 4f       	sbci	r31, 0xFE	; 254
    432a:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    432c:	fa 01       	movw	r30, r20
    432e:	ee 0f       	add	r30, r30
    4330:	ff 1f       	adc	r31, r31
    4332:	ee 0f       	add	r30, r30
    4334:	ff 1f       	adc	r31, r31
    4336:	cf 01       	movw	r24, r30
    4338:	88 0f       	add	r24, r24
    433a:	99 1f       	adc	r25, r25
    433c:	88 0f       	add	r24, r24
    433e:	99 1f       	adc	r25, r25
    4340:	e8 0f       	add	r30, r24
    4342:	f9 1f       	adc	r31, r25
    4344:	e6 0f       	add	r30, r22
    4346:	f7 1f       	adc	r31, r23
    4348:	e9 50       	subi	r30, 0x09	; 9
    434a:	fc 4f       	sbci	r31, 0xFC	; 252
    434c:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    434e:	f9 01       	movw	r30, r18
    4350:	e2 56       	subi	r30, 0x62	; 98
    4352:	fe 4f       	sbci	r31, 0xFE	; 254
    4354:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4356:	4f 5f       	subi	r20, 0xFF	; 255
    4358:	5f 4f       	sbci	r21, 0xFF	; 255
    435a:	fa 01       	movw	r30, r20
    435c:	ee 0f       	add	r30, r30
    435e:	ff 1f       	adc	r31, r31
    4360:	ee 0f       	add	r30, r30
    4362:	ff 1f       	adc	r31, r31
    4364:	cf 01       	movw	r24, r30
    4366:	88 0f       	add	r24, r24
    4368:	99 1f       	adc	r25, r25
    436a:	88 0f       	add	r24, r24
    436c:	99 1f       	adc	r25, r25
    436e:	e8 0f       	add	r30, r24
    4370:	f9 1f       	adc	r31, r25
    4372:	e6 0f       	add	r30, r22
    4374:	f7 1f       	adc	r31, r23
    4376:	e9 50       	subi	r30, 0x09	; 9
    4378:	fc 4f       	sbci	r31, 0xFC	; 252
    437a:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    437c:	f9 01       	movw	r30, r18
    437e:	e1 56       	subi	r30, 0x61	; 97
    4380:	fe 4f       	sbci	r31, 0xFE	; 254
    4382:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4384:	4f 5f       	subi	r20, 0xFF	; 255
    4386:	5f 4f       	sbci	r21, 0xFF	; 255
    4388:	fa 01       	movw	r30, r20
    438a:	ee 0f       	add	r30, r30
    438c:	ff 1f       	adc	r31, r31
    438e:	ee 0f       	add	r30, r30
    4390:	ff 1f       	adc	r31, r31
    4392:	cf 01       	movw	r24, r30
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	88 0f       	add	r24, r24
    439a:	99 1f       	adc	r25, r25
    439c:	e8 0f       	add	r30, r24
    439e:	f9 1f       	adc	r31, r25
    43a0:	e6 0f       	add	r30, r22
    43a2:	f7 1f       	adc	r31, r23
    43a4:	e9 50       	subi	r30, 0x09	; 9
    43a6:	fc 4f       	sbci	r31, 0xFC	; 252
    43a8:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    43aa:	f9 01       	movw	r30, r18
    43ac:	e0 56       	subi	r30, 0x60	; 96
    43ae:	fe 4f       	sbci	r31, 0xFE	; 254
    43b0:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    43b2:	4f 5f       	subi	r20, 0xFF	; 255
    43b4:	5f 4f       	sbci	r21, 0xFF	; 255
    43b6:	fa 01       	movw	r30, r20
    43b8:	ee 0f       	add	r30, r30
    43ba:	ff 1f       	adc	r31, r31
    43bc:	ee 0f       	add	r30, r30
    43be:	ff 1f       	adc	r31, r31
    43c0:	cf 01       	movw	r24, r30
    43c2:	88 0f       	add	r24, r24
    43c4:	99 1f       	adc	r25, r25
    43c6:	88 0f       	add	r24, r24
    43c8:	99 1f       	adc	r25, r25
    43ca:	e8 0f       	add	r30, r24
    43cc:	f9 1f       	adc	r31, r25
    43ce:	e6 0f       	add	r30, r22
    43d0:	f7 1f       	adc	r31, r23
    43d2:	e9 50       	subi	r30, 0x09	; 9
    43d4:	fc 4f       	sbci	r31, 0xFC	; 252
    43d6:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    43d8:	f9 01       	movw	r30, r18
    43da:	ef 55       	subi	r30, 0x5F	; 95
    43dc:	fe 4f       	sbci	r31, 0xFE	; 254
    43de:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    43e0:	4f 5f       	subi	r20, 0xFF	; 255
    43e2:	5f 4f       	sbci	r21, 0xFF	; 255
    43e4:	fa 01       	movw	r30, r20
    43e6:	ee 0f       	add	r30, r30
    43e8:	ff 1f       	adc	r31, r31
    43ea:	ee 0f       	add	r30, r30
    43ec:	ff 1f       	adc	r31, r31
    43ee:	cf 01       	movw	r24, r30
    43f0:	88 0f       	add	r24, r24
    43f2:	99 1f       	adc	r25, r25
    43f4:	88 0f       	add	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	e8 0f       	add	r30, r24
    43fa:	f9 1f       	adc	r31, r25
    43fc:	e6 0f       	add	r30, r22
    43fe:	f7 1f       	adc	r31, r23
    4400:	e9 50       	subi	r30, 0x09	; 9
    4402:	fc 4f       	sbci	r31, 0xFC	; 252
    4404:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4406:	f9 01       	movw	r30, r18
    4408:	ee 55       	subi	r30, 0x5E	; 94
    440a:	fe 4f       	sbci	r31, 0xFE	; 254
    440c:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    440e:	4f 5f       	subi	r20, 0xFF	; 255
    4410:	5f 4f       	sbci	r21, 0xFF	; 255
    4412:	fa 01       	movw	r30, r20
    4414:	ee 0f       	add	r30, r30
    4416:	ff 1f       	adc	r31, r31
    4418:	ee 0f       	add	r30, r30
    441a:	ff 1f       	adc	r31, r31
    441c:	cf 01       	movw	r24, r30
    441e:	88 0f       	add	r24, r24
    4420:	99 1f       	adc	r25, r25
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	e8 0f       	add	r30, r24
    4428:	f9 1f       	adc	r31, r25
    442a:	e6 0f       	add	r30, r22
    442c:	f7 1f       	adc	r31, r23
    442e:	e9 50       	subi	r30, 0x09	; 9
    4430:	fc 4f       	sbci	r31, 0xFC	; 252
    4432:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4434:	f9 01       	movw	r30, r18
    4436:	ed 55       	subi	r30, 0x5D	; 93
    4438:	fe 4f       	sbci	r31, 0xFE	; 254
    443a:	04 91       	lpm	r16, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    443c:	4f 5f       	subi	r20, 0xFF	; 255
    443e:	5f 4f       	sbci	r21, 0xFF	; 255
    4440:	fa 01       	movw	r30, r20
    4442:	ee 0f       	add	r30, r30
    4444:	ff 1f       	adc	r31, r31
    4446:	ee 0f       	add	r30, r30
    4448:	ff 1f       	adc	r31, r31
    444a:	cf 01       	movw	r24, r30
    444c:	88 0f       	add	r24, r24
    444e:	99 1f       	adc	r25, r25
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	e8 0f       	add	r30, r24
    4456:	f9 1f       	adc	r31, r25
    4458:	e6 0f       	add	r30, r22
    445a:	f7 1f       	adc	r31, r23
    445c:	e9 50       	subi	r30, 0x09	; 9
    445e:	fc 4f       	sbci	r31, 0xFC	; 252
    4460:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4462:	2c 55       	subi	r18, 0x5C	; 92
    4464:	3e 4f       	sbci	r19, 0xFE	; 254
    4466:	f9 01       	movw	r30, r18
    4468:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    446a:	fa 01       	movw	r30, r20
    446c:	31 96       	adiw	r30, 0x01	; 1
    446e:	ee 0f       	add	r30, r30
    4470:	ff 1f       	adc	r31, r31
    4472:	ee 0f       	add	r30, r30
    4474:	ff 1f       	adc	r31, r31
    4476:	cf 01       	movw	r24, r30
    4478:	88 0f       	add	r24, r24
    447a:	99 1f       	adc	r25, r25
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	e8 0f       	add	r30, r24
    4482:	f9 1f       	adc	r31, r25
    4484:	e6 0f       	add	r30, r22
    4486:	f7 1f       	adc	r31, r23
    4488:	e9 50       	subi	r30, 0x09	; 9
    448a:	fc 4f       	sbci	r31, 0xFC	; 252
    448c:	20 83       	st	Z, r18
    448e:	1b cf       	rjmp	.-458    	; 0x42c6 <LCDWriteStr+0x44>
						// line feed
						y++;
					break;
				case C_CLS:
						// clear screen
						memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));
    4490:	f6 01       	movw	r30, r12
    4492:	9e 01       	movw	r18, r28
    4494:	11 92       	st	Z+, r1
    4496:	21 50       	subi	r18, 0x01	; 1
    4498:	30 40       	sbci	r19, 0x00	; 0
    449a:	e1 f7       	brne	.-8      	; 0x4494 <LCDWriteStr+0x212>
    449c:	13 cf       	rjmp	.-474    	; 0x42c4 <LCDWriteStr+0x42>
	while (*str)
	{
		// process control codes
		if (*str < FONT_START_CHAR)
		{
			switch(*str)
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	11 cf       	rjmp	.-478    	; 0x42c4 <LCDWriteStr+0x42>

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    44a2:	f9 01       	movw	r30, r18
    44a4:	e3 56       	subi	r30, 0x63	; 99
    44a6:	fe 4f       	sbci	r31, 0xFE	; 254
    44a8:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    44aa:	fa 01       	movw	r30, r20
    44ac:	ee 0f       	add	r30, r30
    44ae:	ff 1f       	adc	r31, r31
    44b0:	ee 0f       	add	r30, r30
    44b2:	ff 1f       	adc	r31, r31
    44b4:	cf 01       	movw	r24, r30
    44b6:	88 0f       	add	r24, r24
    44b8:	99 1f       	adc	r25, r25
    44ba:	88 0f       	add	r24, r24
    44bc:	99 1f       	adc	r25, r25
    44be:	e8 0f       	add	r30, r24
    44c0:	f9 1f       	adc	r31, r25
    44c2:	e6 0f       	add	r30, r22
    44c4:	f7 1f       	adc	r31, r23
    44c6:	e9 50       	subi	r30, 0x09	; 9
    44c8:	fc 4f       	sbci	r31, 0xFC	; 252
    44ca:	00 95       	com	r16
    44cc:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    44ce:	f9 01       	movw	r30, r18
    44d0:	e2 56       	subi	r30, 0x62	; 98
    44d2:	fe 4f       	sbci	r31, 0xFE	; 254
    44d4:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    44d6:	4f 5f       	subi	r20, 0xFF	; 255
    44d8:	5f 4f       	sbci	r21, 0xFF	; 255
    44da:	fa 01       	movw	r30, r20
    44dc:	ee 0f       	add	r30, r30
    44de:	ff 1f       	adc	r31, r31
    44e0:	ee 0f       	add	r30, r30
    44e2:	ff 1f       	adc	r31, r31
    44e4:	cf 01       	movw	r24, r30
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	e8 0f       	add	r30, r24
    44f0:	f9 1f       	adc	r31, r25
    44f2:	e6 0f       	add	r30, r22
    44f4:	f7 1f       	adc	r31, r23
    44f6:	e9 50       	subi	r30, 0x09	; 9
    44f8:	fc 4f       	sbci	r31, 0xFC	; 252
    44fa:	00 95       	com	r16
    44fc:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    44fe:	f9 01       	movw	r30, r18
    4500:	e1 56       	subi	r30, 0x61	; 97
    4502:	fe 4f       	sbci	r31, 0xFE	; 254
    4504:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4506:	4f 5f       	subi	r20, 0xFF	; 255
    4508:	5f 4f       	sbci	r21, 0xFF	; 255
    450a:	fa 01       	movw	r30, r20
    450c:	ee 0f       	add	r30, r30
    450e:	ff 1f       	adc	r31, r31
    4510:	ee 0f       	add	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	cf 01       	movw	r24, r30
    4516:	88 0f       	add	r24, r24
    4518:	99 1f       	adc	r25, r25
    451a:	88 0f       	add	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	e8 0f       	add	r30, r24
    4520:	f9 1f       	adc	r31, r25
    4522:	e6 0f       	add	r30, r22
    4524:	f7 1f       	adc	r31, r23
    4526:	e9 50       	subi	r30, 0x09	; 9
    4528:	fc 4f       	sbci	r31, 0xFC	; 252
    452a:	00 95       	com	r16
    452c:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    452e:	f9 01       	movw	r30, r18
    4530:	e0 56       	subi	r30, 0x60	; 96
    4532:	fe 4f       	sbci	r31, 0xFE	; 254
    4534:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4536:	4f 5f       	subi	r20, 0xFF	; 255
    4538:	5f 4f       	sbci	r21, 0xFF	; 255
    453a:	fa 01       	movw	r30, r20
    453c:	ee 0f       	add	r30, r30
    453e:	ff 1f       	adc	r31, r31
    4540:	ee 0f       	add	r30, r30
    4542:	ff 1f       	adc	r31, r31
    4544:	cf 01       	movw	r24, r30
    4546:	88 0f       	add	r24, r24
    4548:	99 1f       	adc	r25, r25
    454a:	88 0f       	add	r24, r24
    454c:	99 1f       	adc	r25, r25
    454e:	e8 0f       	add	r30, r24
    4550:	f9 1f       	adc	r31, r25
    4552:	e6 0f       	add	r30, r22
    4554:	f7 1f       	adc	r31, r23
    4556:	e9 50       	subi	r30, 0x09	; 9
    4558:	fc 4f       	sbci	r31, 0xFC	; 252
    455a:	00 95       	com	r16
    455c:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    455e:	f9 01       	movw	r30, r18
    4560:	ef 55       	subi	r30, 0x5F	; 95
    4562:	fe 4f       	sbci	r31, 0xFE	; 254
    4564:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4566:	4f 5f       	subi	r20, 0xFF	; 255
    4568:	5f 4f       	sbci	r21, 0xFF	; 255
    456a:	fa 01       	movw	r30, r20
    456c:	ee 0f       	add	r30, r30
    456e:	ff 1f       	adc	r31, r31
    4570:	ee 0f       	add	r30, r30
    4572:	ff 1f       	adc	r31, r31
    4574:	cf 01       	movw	r24, r30
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	e8 0f       	add	r30, r24
    4580:	f9 1f       	adc	r31, r25
    4582:	e6 0f       	add	r30, r22
    4584:	f7 1f       	adc	r31, r23
    4586:	e9 50       	subi	r30, 0x09	; 9
    4588:	fc 4f       	sbci	r31, 0xFC	; 252
    458a:	00 95       	com	r16
    458c:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    458e:	f9 01       	movw	r30, r18
    4590:	ee 55       	subi	r30, 0x5E	; 94
    4592:	fe 4f       	sbci	r31, 0xFE	; 254
    4594:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4596:	4f 5f       	subi	r20, 0xFF	; 255
    4598:	5f 4f       	sbci	r21, 0xFF	; 255
    459a:	fa 01       	movw	r30, r20
    459c:	ee 0f       	add	r30, r30
    459e:	ff 1f       	adc	r31, r31
    45a0:	ee 0f       	add	r30, r30
    45a2:	ff 1f       	adc	r31, r31
    45a4:	cf 01       	movw	r24, r30
    45a6:	88 0f       	add	r24, r24
    45a8:	99 1f       	adc	r25, r25
    45aa:	88 0f       	add	r24, r24
    45ac:	99 1f       	adc	r25, r25
    45ae:	e8 0f       	add	r30, r24
    45b0:	f9 1f       	adc	r31, r25
    45b2:	e6 0f       	add	r30, r22
    45b4:	f7 1f       	adc	r31, r23
    45b6:	e9 50       	subi	r30, 0x09	; 9
    45b8:	fc 4f       	sbci	r31, 0xFC	; 252
    45ba:	00 95       	com	r16
    45bc:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    45be:	f9 01       	movw	r30, r18
    45c0:	ed 55       	subi	r30, 0x5D	; 93
    45c2:	fe 4f       	sbci	r31, 0xFE	; 254
    45c4:	04 91       	lpm	r16, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    45c6:	4f 5f       	subi	r20, 0xFF	; 255
    45c8:	5f 4f       	sbci	r21, 0xFF	; 255
    45ca:	fa 01       	movw	r30, r20
    45cc:	ee 0f       	add	r30, r30
    45ce:	ff 1f       	adc	r31, r31
    45d0:	ee 0f       	add	r30, r30
    45d2:	ff 1f       	adc	r31, r31
    45d4:	cf 01       	movw	r24, r30
    45d6:	88 0f       	add	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	88 0f       	add	r24, r24
    45dc:	99 1f       	adc	r25, r25
    45de:	e8 0f       	add	r30, r24
    45e0:	f9 1f       	adc	r31, r25
    45e2:	e6 0f       	add	r30, r22
    45e4:	f7 1f       	adc	r31, r23
    45e6:	e9 50       	subi	r30, 0x09	; 9
    45e8:	fc 4f       	sbci	r31, 0xFC	; 252
    45ea:	00 95       	com	r16
    45ec:	00 83       	st	Z, r16

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    45ee:	2c 55       	subi	r18, 0x5C	; 92
    45f0:	3e 4f       	sbci	r19, 0xFE	; 254
    45f2:	f9 01       	movw	r30, r18
    45f4:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    45f6:	fa 01       	movw	r30, r20
    45f8:	31 96       	adiw	r30, 0x01	; 1
    45fa:	ee 0f       	add	r30, r30
    45fc:	ff 1f       	adc	r31, r31
    45fe:	ee 0f       	add	r30, r30
    4600:	ff 1f       	adc	r31, r31
    4602:	cf 01       	movw	r24, r30
    4604:	88 0f       	add	r24, r24
    4606:	99 1f       	adc	r25, r25
    4608:	88 0f       	add	r24, r24
    460a:	99 1f       	adc	r25, r25
    460c:	e8 0f       	add	r30, r24
    460e:	f9 1f       	adc	r31, r25
    4610:	e6 0f       	add	r30, r22
    4612:	f7 1f       	adc	r31, r23
    4614:	e9 50       	subi	r30, 0x09	; 9
    4616:	fc 4f       	sbci	r31, 0xFC	; 252
    4618:	20 95       	com	r18
    461a:	20 83       	st	Z, r18
    461c:	54 ce       	rjmp	.-856    	; 0x42c6 <LCDWriteStr+0x44>

0000461e <LCDWriteStrP>:
//			  C_LF:  line feed:       move to the next line
//			  C_CLS: clear screen:	  clear whole screen contents
//
//*****************************************************************************
void LCDWriteStrP (U8 x, U8 y, FLASH U8 * strP, U8 inv)
{
    461e:	cf 92       	push	r12
    4620:	df 92       	push	r13
    4622:	ef 92       	push	r14
    4624:	ff 92       	push	r15
    4626:	0f 93       	push	r16
    4628:	1f 93       	push	r17
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	78 2f       	mov	r23, r24
    4630:	16 2f       	mov	r17, r22
    4632:	02 2f       	mov	r16, r18
    4634:	4f 5f       	subi	r20, 0xFF	; 255
    4636:	5f 4f       	sbci	r21, 0xFF	; 255
						// line feed
						y++;
					break;
				case C_CLS:
						// clear screen
						memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));
    4638:	37 ef       	ldi	r19, 0xF7	; 247
    463a:	c3 2e       	mov	r12, r19
    463c:	33 e0       	ldi	r19, 0x03	; 3
    463e:	d3 2e       	mov	r13, r19
    4640:	20 e8       	ldi	r18, 0x80	; 128
    4642:	e2 2e       	mov	r14, r18
    4644:	2c e0       	ldi	r18, 0x0C	; 12
    4646:	f2 2e       	mov	r15, r18
    4648:	0b c0       	rjmp	.+22     	; 0x4660 <LCDWriteStrP+0x42>
		}

		// process control codes
		if (ch < FONT_START_CHAR)
		{
			switch(ch)
    464a:	8d 30       	cpi	r24, 0x0D	; 13
    464c:	09 f4       	brne	.+2      	; 0x4650 <LCDWriteStrP+0x32>
    464e:	e7 c0       	rjmp	.+462    	; 0x481e <LCDWriteStrP+0x200>
    4650:	8b 31       	cpi	r24, 0x1B	; 27
    4652:	09 f4       	brne	.+2      	; 0x4656 <LCDWriteStrP+0x38>
    4654:	de c0       	rjmp	.+444    	; 0x4812 <LCDWriteStrP+0x1f4>
    4656:	8a 30       	cpi	r24, 0x0A	; 10
    4658:	09 f4       	brne	.+2      	; 0x465c <LCDWriteStrP+0x3e>
						// carriage return
						x = 0;
					break;
				case C_LF:
						// line feed
						y++;
    465a:	1f 5f       	subi	r17, 0xFF	; 255
//			  C_LF:  line feed:       move to the next line
//			  C_CLS: clear screen:	  clear whole screen contents
//
//*****************************************************************************
void LCDWriteStrP (U8 x, U8 y, FLASH U8 * strP, U8 inv)
{
    465c:	4f 5f       	subi	r20, 0xFF	; 255
    465e:	5f 4f       	sbci	r21, 0xFF	; 255
	

	while (1)
	{
		// read next char
		ch = pgm_read_byte(strP);
    4660:	41 50       	subi	r20, 0x01	; 1
    4662:	50 40       	sbci	r21, 0x00	; 0
    4664:	fa 01       	movw	r30, r20
    4666:	84 91       	lpm	r24, Z+
    4668:	4f 5f       	subi	r20, 0xFF	; 255
    466a:	5f 4f       	sbci	r21, 0xFF	; 255

		// exit the loop at the end of the string
		if (ch == 0)
    466c:	88 23       	and	r24, r24
    466e:	09 f4       	brne	.+2      	; 0x4672 <LCDWriteStrP+0x54>
    4670:	d8 c0       	rjmp	.+432    	; 0x4822 <LCDWriteStrP+0x204>
		{
			break;
		}

		// process control codes
		if (ch < FONT_START_CHAR)
    4672:	80 32       	cpi	r24, 0x20	; 32
    4674:	50 f3       	brcs	.-44     	; 0x464a <LCDWriteStrP+0x2c>
	U8 	c;
	U8  ch_line;
	U16 fb_index;

	// validity check of incoming data
	if (
    4676:	75 31       	cpi	r23, 0x15	; 21
    4678:	08 f0       	brcs	.+2      	; 0x467c <LCDWriteStrP+0x5e>
    467a:	c9 c0       	rjmp	.+402    	; 0x480e <LCDWriteStrP+0x1f0>
    467c:	15 31       	cpi	r17, 0x15	; 21
    467e:	08 f0       	brcs	.+2      	; 0x4682 <LCDWriteStrP+0x64>
    4680:	c6 c0       	rjmp	.+396    	; 0x480e <LCDWriteStrP+0x1f0>
    4682:	80 3a       	cpi	r24, 0xA0	; 160
    4684:	08 f0       	brcs	.+2      	; 0x4688 <LCDWriteStrP+0x6a>
    4686:	c3 c0       	rjmp	.+390    	; 0x480e <LCDWriteStrP+0x1f0>
    4688:	80 52       	subi	r24, 0x20	; 32
    468a:	28 2f       	mov	r18, r24
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	22 0f       	add	r18, r18
    4690:	33 1f       	adc	r19, r19
    4692:	22 0f       	add	r18, r18
    4694:	33 1f       	adc	r19, r19
    4696:	22 0f       	add	r18, r18
    4698:	33 1f       	adc	r19, r19
    469a:	81 2f       	mov	r24, r17
    469c:	88 0f       	add	r24, r24
    469e:	88 0f       	add	r24, r24
    46a0:	88 0f       	add	r24, r24
    46a2:	a8 2f       	mov	r26, r24
    46a4:	b0 e0       	ldi	r27, 0x00	; 0
    46a6:	c7 2f       	mov	r28, r23
    46a8:	d0 e0       	ldi	r29, 0x00	; 0
    46aa:	01 30       	cpi	r16, 0x01	; 1
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <LCDWriteStrP+0x92>
    46ae:	c2 c0       	rjmp	.+388    	; 0x4834 <LCDWriteStrP+0x216>

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    46b0:	f9 01       	movw	r30, r18
    46b2:	e3 56       	subi	r30, 0x63	; 99
    46b4:	fe 4f       	sbci	r31, 0xFE	; 254
    46b6:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    46b8:	fd 01       	movw	r30, r26
    46ba:	ee 0f       	add	r30, r30
    46bc:	ff 1f       	adc	r31, r31
    46be:	ee 0f       	add	r30, r30
    46c0:	ff 1f       	adc	r31, r31
    46c2:	cf 01       	movw	r24, r30
    46c4:	88 0f       	add	r24, r24
    46c6:	99 1f       	adc	r25, r25
    46c8:	88 0f       	add	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	e8 0f       	add	r30, r24
    46ce:	f9 1f       	adc	r31, r25
    46d0:	ec 0f       	add	r30, r28
    46d2:	fd 1f       	adc	r31, r29
    46d4:	e9 50       	subi	r30, 0x09	; 9
    46d6:	fc 4f       	sbci	r31, 0xFC	; 252
    46d8:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    46da:	f9 01       	movw	r30, r18
    46dc:	e2 56       	subi	r30, 0x62	; 98
    46de:	fe 4f       	sbci	r31, 0xFE	; 254
    46e0:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    46e2:	11 96       	adiw	r26, 0x01	; 1
    46e4:	fd 01       	movw	r30, r26
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	ee 0f       	add	r30, r30
    46ec:	ff 1f       	adc	r31, r31
    46ee:	cf 01       	movw	r24, r30
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	e8 0f       	add	r30, r24
    46fa:	f9 1f       	adc	r31, r25
    46fc:	ec 0f       	add	r30, r28
    46fe:	fd 1f       	adc	r31, r29
    4700:	e9 50       	subi	r30, 0x09	; 9
    4702:	fc 4f       	sbci	r31, 0xFC	; 252
    4704:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4706:	f9 01       	movw	r30, r18
    4708:	e1 56       	subi	r30, 0x61	; 97
    470a:	fe 4f       	sbci	r31, 0xFE	; 254
    470c:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    470e:	11 96       	adiw	r26, 0x01	; 1
    4710:	fd 01       	movw	r30, r26
    4712:	ee 0f       	add	r30, r30
    4714:	ff 1f       	adc	r31, r31
    4716:	ee 0f       	add	r30, r30
    4718:	ff 1f       	adc	r31, r31
    471a:	cf 01       	movw	r24, r30
    471c:	88 0f       	add	r24, r24
    471e:	99 1f       	adc	r25, r25
    4720:	88 0f       	add	r24, r24
    4722:	99 1f       	adc	r25, r25
    4724:	e8 0f       	add	r30, r24
    4726:	f9 1f       	adc	r31, r25
    4728:	ec 0f       	add	r30, r28
    472a:	fd 1f       	adc	r31, r29
    472c:	e9 50       	subi	r30, 0x09	; 9
    472e:	fc 4f       	sbci	r31, 0xFC	; 252
    4730:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4732:	f9 01       	movw	r30, r18
    4734:	e0 56       	subi	r30, 0x60	; 96
    4736:	fe 4f       	sbci	r31, 0xFE	; 254
    4738:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    473a:	11 96       	adiw	r26, 0x01	; 1
    473c:	fd 01       	movw	r30, r26
    473e:	ee 0f       	add	r30, r30
    4740:	ff 1f       	adc	r31, r31
    4742:	ee 0f       	add	r30, r30
    4744:	ff 1f       	adc	r31, r31
    4746:	cf 01       	movw	r24, r30
    4748:	88 0f       	add	r24, r24
    474a:	99 1f       	adc	r25, r25
    474c:	88 0f       	add	r24, r24
    474e:	99 1f       	adc	r25, r25
    4750:	e8 0f       	add	r30, r24
    4752:	f9 1f       	adc	r31, r25
    4754:	ec 0f       	add	r30, r28
    4756:	fd 1f       	adc	r31, r29
    4758:	e9 50       	subi	r30, 0x09	; 9
    475a:	fc 4f       	sbci	r31, 0xFC	; 252
    475c:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    475e:	f9 01       	movw	r30, r18
    4760:	ef 55       	subi	r30, 0x5F	; 95
    4762:	fe 4f       	sbci	r31, 0xFE	; 254
    4764:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4766:	11 96       	adiw	r26, 0x01	; 1
    4768:	fd 01       	movw	r30, r26
    476a:	ee 0f       	add	r30, r30
    476c:	ff 1f       	adc	r31, r31
    476e:	ee 0f       	add	r30, r30
    4770:	ff 1f       	adc	r31, r31
    4772:	cf 01       	movw	r24, r30
    4774:	88 0f       	add	r24, r24
    4776:	99 1f       	adc	r25, r25
    4778:	88 0f       	add	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	e8 0f       	add	r30, r24
    477e:	f9 1f       	adc	r31, r25
    4780:	ec 0f       	add	r30, r28
    4782:	fd 1f       	adc	r31, r29
    4784:	e9 50       	subi	r30, 0x09	; 9
    4786:	fc 4f       	sbci	r31, 0xFC	; 252
    4788:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    478a:	f9 01       	movw	r30, r18
    478c:	ee 55       	subi	r30, 0x5E	; 94
    478e:	fe 4f       	sbci	r31, 0xFE	; 254
    4790:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4792:	11 96       	adiw	r26, 0x01	; 1
    4794:	fd 01       	movw	r30, r26
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	ee 0f       	add	r30, r30
    479c:	ff 1f       	adc	r31, r31
    479e:	cf 01       	movw	r24, r30
    47a0:	88 0f       	add	r24, r24
    47a2:	99 1f       	adc	r25, r25
    47a4:	88 0f       	add	r24, r24
    47a6:	99 1f       	adc	r25, r25
    47a8:	e8 0f       	add	r30, r24
    47aa:	f9 1f       	adc	r31, r25
    47ac:	ec 0f       	add	r30, r28
    47ae:	fd 1f       	adc	r31, r29
    47b0:	e9 50       	subi	r30, 0x09	; 9
    47b2:	fc 4f       	sbci	r31, 0xFC	; 252
    47b4:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    47b6:	f9 01       	movw	r30, r18
    47b8:	ed 55       	subi	r30, 0x5D	; 93
    47ba:	fe 4f       	sbci	r31, 0xFE	; 254
    47bc:	64 91       	lpm	r22, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    47be:	11 96       	adiw	r26, 0x01	; 1
    47c0:	fd 01       	movw	r30, r26
    47c2:	ee 0f       	add	r30, r30
    47c4:	ff 1f       	adc	r31, r31
    47c6:	ee 0f       	add	r30, r30
    47c8:	ff 1f       	adc	r31, r31
    47ca:	cf 01       	movw	r24, r30
    47cc:	88 0f       	add	r24, r24
    47ce:	99 1f       	adc	r25, r25
    47d0:	88 0f       	add	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	e8 0f       	add	r30, r24
    47d6:	f9 1f       	adc	r31, r25
    47d8:	ec 0f       	add	r30, r28
    47da:	fd 1f       	adc	r31, r29
    47dc:	e9 50       	subi	r30, 0x09	; 9
    47de:	fc 4f       	sbci	r31, 0xFC	; 252
    47e0:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    47e2:	2c 55       	subi	r18, 0x5C	; 92
    47e4:	3e 4f       	sbci	r19, 0xFE	; 254
    47e6:	f9 01       	movw	r30, r18
    47e8:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    47ea:	fd 01       	movw	r30, r26
    47ec:	31 96       	adiw	r30, 0x01	; 1
    47ee:	ee 0f       	add	r30, r30
    47f0:	ff 1f       	adc	r31, r31
    47f2:	ee 0f       	add	r30, r30
    47f4:	ff 1f       	adc	r31, r31
    47f6:	cf 01       	movw	r24, r30
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	88 0f       	add	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	e8 0f       	add	r30, r24
    4802:	f9 1f       	adc	r31, r25
    4804:	ec 0f       	add	r30, r28
    4806:	fd 1f       	adc	r31, r29
    4808:	e9 50       	subi	r30, 0x09	; 9
    480a:	fc 4f       	sbci	r31, 0xFC	; 252
    480c:	20 83       	st	Z, r18
		}
		else
		{
			// and adjust horizontal position and next character
			// display the current character
			LCDWriteChar(x++, y, ch, inv);
    480e:	7f 5f       	subi	r23, 0xFF	; 255
    4810:	25 cf       	rjmp	.-438    	; 0x465c <LCDWriteStrP+0x3e>
						// line feed
						y++;
					break;
				case C_CLS:
						// clear screen
						memset (LCDFrameBuffer, 0, sizeof(LCDFrameBuffer));
    4812:	f6 01       	movw	r30, r12
    4814:	c7 01       	movw	r24, r14
    4816:	11 92       	st	Z+, r1
    4818:	01 97       	sbiw	r24, 0x01	; 1
    481a:	e9 f7       	brne	.-6      	; 0x4816 <LCDWriteStrP+0x1f8>
    481c:	1f cf       	rjmp	.-450    	; 0x465c <LCDWriteStrP+0x3e>
		}

		// process control codes
		if (ch < FONT_START_CHAR)
		{
			switch(ch)
    481e:	70 e0       	ldi	r23, 0x00	; 0
    4820:	1d cf       	rjmp	.-454    	; 0x465c <LCDWriteStrP+0x3e>

			// adjust the pointer for the next character
			strP++;
		}
	}
}
    4822:	df 91       	pop	r29
    4824:	cf 91       	pop	r28
    4826:	1f 91       	pop	r17
    4828:	0f 91       	pop	r16
    482a:	ff 90       	pop	r15
    482c:	ef 90       	pop	r14
    482e:	df 90       	pop	r13
    4830:	cf 90       	pop	r12
    4832:	08 95       	ret

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4834:	f9 01       	movw	r30, r18
    4836:	e3 56       	subi	r30, 0x63	; 99
    4838:	fe 4f       	sbci	r31, 0xFE	; 254
    483a:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    483c:	fd 01       	movw	r30, r26
    483e:	ee 0f       	add	r30, r30
    4840:	ff 1f       	adc	r31, r31
    4842:	ee 0f       	add	r30, r30
    4844:	ff 1f       	adc	r31, r31
    4846:	cf 01       	movw	r24, r30
    4848:	88 0f       	add	r24, r24
    484a:	99 1f       	adc	r25, r25
    484c:	88 0f       	add	r24, r24
    484e:	99 1f       	adc	r25, r25
    4850:	e8 0f       	add	r30, r24
    4852:	f9 1f       	adc	r31, r25
    4854:	ec 0f       	add	r30, r28
    4856:	fd 1f       	adc	r31, r29
    4858:	e9 50       	subi	r30, 0x09	; 9
    485a:	fc 4f       	sbci	r31, 0xFC	; 252
    485c:	60 95       	com	r22
    485e:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4860:	f9 01       	movw	r30, r18
    4862:	e2 56       	subi	r30, 0x62	; 98
    4864:	fe 4f       	sbci	r31, 0xFE	; 254
    4866:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4868:	11 96       	adiw	r26, 0x01	; 1
    486a:	fd 01       	movw	r30, r26
    486c:	ee 0f       	add	r30, r30
    486e:	ff 1f       	adc	r31, r31
    4870:	ee 0f       	add	r30, r30
    4872:	ff 1f       	adc	r31, r31
    4874:	cf 01       	movw	r24, r30
    4876:	88 0f       	add	r24, r24
    4878:	99 1f       	adc	r25, r25
    487a:	88 0f       	add	r24, r24
    487c:	99 1f       	adc	r25, r25
    487e:	e8 0f       	add	r30, r24
    4880:	f9 1f       	adc	r31, r25
    4882:	ec 0f       	add	r30, r28
    4884:	fd 1f       	adc	r31, r29
    4886:	e9 50       	subi	r30, 0x09	; 9
    4888:	fc 4f       	sbci	r31, 0xFC	; 252
    488a:	60 95       	com	r22
    488c:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    488e:	f9 01       	movw	r30, r18
    4890:	e1 56       	subi	r30, 0x61	; 97
    4892:	fe 4f       	sbci	r31, 0xFE	; 254
    4894:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4896:	11 96       	adiw	r26, 0x01	; 1
    4898:	fd 01       	movw	r30, r26
    489a:	ee 0f       	add	r30, r30
    489c:	ff 1f       	adc	r31, r31
    489e:	ee 0f       	add	r30, r30
    48a0:	ff 1f       	adc	r31, r31
    48a2:	cf 01       	movw	r24, r30
    48a4:	88 0f       	add	r24, r24
    48a6:	99 1f       	adc	r25, r25
    48a8:	88 0f       	add	r24, r24
    48aa:	99 1f       	adc	r25, r25
    48ac:	e8 0f       	add	r30, r24
    48ae:	f9 1f       	adc	r31, r25
    48b0:	ec 0f       	add	r30, r28
    48b2:	fd 1f       	adc	r31, r29
    48b4:	e9 50       	subi	r30, 0x09	; 9
    48b6:	fc 4f       	sbci	r31, 0xFC	; 252
    48b8:	60 95       	com	r22
    48ba:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    48bc:	f9 01       	movw	r30, r18
    48be:	e0 56       	subi	r30, 0x60	; 96
    48c0:	fe 4f       	sbci	r31, 0xFE	; 254
    48c2:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    48c4:	11 96       	adiw	r26, 0x01	; 1
    48c6:	fd 01       	movw	r30, r26
    48c8:	ee 0f       	add	r30, r30
    48ca:	ff 1f       	adc	r31, r31
    48cc:	ee 0f       	add	r30, r30
    48ce:	ff 1f       	adc	r31, r31
    48d0:	cf 01       	movw	r24, r30
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	88 0f       	add	r24, r24
    48d8:	99 1f       	adc	r25, r25
    48da:	e8 0f       	add	r30, r24
    48dc:	f9 1f       	adc	r31, r25
    48de:	ec 0f       	add	r30, r28
    48e0:	fd 1f       	adc	r31, r29
    48e2:	e9 50       	subi	r30, 0x09	; 9
    48e4:	fc 4f       	sbci	r31, 0xFC	; 252
    48e6:	60 95       	com	r22
    48e8:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    48ea:	f9 01       	movw	r30, r18
    48ec:	ef 55       	subi	r30, 0x5F	; 95
    48ee:	fe 4f       	sbci	r31, 0xFE	; 254
    48f0:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    48f2:	11 96       	adiw	r26, 0x01	; 1
    48f4:	fd 01       	movw	r30, r26
    48f6:	ee 0f       	add	r30, r30
    48f8:	ff 1f       	adc	r31, r31
    48fa:	ee 0f       	add	r30, r30
    48fc:	ff 1f       	adc	r31, r31
    48fe:	cf 01       	movw	r24, r30
    4900:	88 0f       	add	r24, r24
    4902:	99 1f       	adc	r25, r25
    4904:	88 0f       	add	r24, r24
    4906:	99 1f       	adc	r25, r25
    4908:	e8 0f       	add	r30, r24
    490a:	f9 1f       	adc	r31, r25
    490c:	ec 0f       	add	r30, r28
    490e:	fd 1f       	adc	r31, r29
    4910:	e9 50       	subi	r30, 0x09	; 9
    4912:	fc 4f       	sbci	r31, 0xFC	; 252
    4914:	60 95       	com	r22
    4916:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4918:	f9 01       	movw	r30, r18
    491a:	ee 55       	subi	r30, 0x5E	; 94
    491c:	fe 4f       	sbci	r31, 0xFE	; 254
    491e:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4920:	11 96       	adiw	r26, 0x01	; 1
    4922:	fd 01       	movw	r30, r26
    4924:	ee 0f       	add	r30, r30
    4926:	ff 1f       	adc	r31, r31
    4928:	ee 0f       	add	r30, r30
    492a:	ff 1f       	adc	r31, r31
    492c:	cf 01       	movw	r24, r30
    492e:	88 0f       	add	r24, r24
    4930:	99 1f       	adc	r25, r25
    4932:	88 0f       	add	r24, r24
    4934:	99 1f       	adc	r25, r25
    4936:	e8 0f       	add	r30, r24
    4938:	f9 1f       	adc	r31, r25
    493a:	ec 0f       	add	r30, r28
    493c:	fd 1f       	adc	r31, r29
    493e:	e9 50       	subi	r30, 0x09	; 9
    4940:	fc 4f       	sbci	r31, 0xFC	; 252
    4942:	60 95       	com	r22
    4944:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4946:	f9 01       	movw	r30, r18
    4948:	ed 55       	subi	r30, 0x5D	; 93
    494a:	fe 4f       	sbci	r31, 0xFE	; 254
    494c:	64 91       	lpm	r22, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    494e:	11 96       	adiw	r26, 0x01	; 1
    4950:	fd 01       	movw	r30, r26
    4952:	ee 0f       	add	r30, r30
    4954:	ff 1f       	adc	r31, r31
    4956:	ee 0f       	add	r30, r30
    4958:	ff 1f       	adc	r31, r31
    495a:	cf 01       	movw	r24, r30
    495c:	88 0f       	add	r24, r24
    495e:	99 1f       	adc	r25, r25
    4960:	88 0f       	add	r24, r24
    4962:	99 1f       	adc	r25, r25
    4964:	e8 0f       	add	r30, r24
    4966:	f9 1f       	adc	r31, r25
    4968:	ec 0f       	add	r30, r28
    496a:	fd 1f       	adc	r31, r29
    496c:	e9 50       	subi	r30, 0x09	; 9
    496e:	fc 4f       	sbci	r31, 0xFC	; 252
    4970:	60 95       	com	r22
    4972:	60 83       	st	Z, r22

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4974:	2c 55       	subi	r18, 0x5C	; 92
    4976:	3e 4f       	sbci	r19, 0xFE	; 254
    4978:	f9 01       	movw	r30, r18
    497a:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    497c:	fd 01       	movw	r30, r26
    497e:	31 96       	adiw	r30, 0x01	; 1
    4980:	ee 0f       	add	r30, r30
    4982:	ff 1f       	adc	r31, r31
    4984:	ee 0f       	add	r30, r30
    4986:	ff 1f       	adc	r31, r31
    4988:	cf 01       	movw	r24, r30
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	88 0f       	add	r24, r24
    4990:	99 1f       	adc	r25, r25
    4992:	e8 0f       	add	r30, r24
    4994:	f9 1f       	adc	r31, r25
    4996:	ec 0f       	add	r30, r28
    4998:	fd 1f       	adc	r31, r29
    499a:	e9 50       	subi	r30, 0x09	; 9
    499c:	fc 4f       	sbci	r31, 0xFC	; 252
    499e:	20 95       	com	r18
    49a0:	20 83       	st	Z, r18
		}
		else
		{
			// and adjust horizontal position and next character
			// display the current character
			LCDWriteChar(x++, y, ch, inv);
    49a2:	7f 5f       	subi	r23, 0xFF	; 255
    49a4:	5b ce       	rjmp	.-842    	; 0x465c <LCDWriteStrP+0x3e>

000049a6 <LCDWriteCharP>:
//
// Result   : none
//
//*****************************************************************************
void LCDWriteCharP (U8 x, U8 y,  FLASH U8 * ch_ptrP, U8 inv)
{
    49a6:	fa 01       	movw	r30, r20
	LCDWriteChar(x,y,pgm_read_byte(ch_ptrP),inv);
    49a8:	94 91       	lpm	r25, Z+
	U8 	c;
	U8  ch_line;
	U16 fb_index;

	// validity check of incoming data
	if (
    49aa:	85 31       	cpi	r24, 0x15	; 21
    49ac:	08 f0       	brcs	.+2      	; 0x49b0 <LCDWriteCharP+0xa>
    49ae:	8e c1       	rjmp	.+796    	; 0x4ccc <LCDWriteCharP+0x326>
    49b0:	65 31       	cpi	r22, 0x15	; 21
    49b2:	08 f0       	brcs	.+2      	; 0x49b6 <LCDWriteCharP+0x10>
    49b4:	8b c1       	rjmp	.+790    	; 0x4ccc <LCDWriteCharP+0x326>
    49b6:	90 32       	cpi	r25, 0x20	; 32
    49b8:	08 f4       	brcc	.+2      	; 0x49bc <LCDWriteCharP+0x16>
    49ba:	88 c1       	rjmp	.+784    	; 0x4ccc <LCDWriteCharP+0x326>
    49bc:	90 3a       	cpi	r25, 0xA0	; 160
    49be:	08 f0       	brcs	.+2      	; 0x49c2 <LCDWriteCharP+0x1c>
    49c0:	85 c1       	rjmp	.+778    	; 0x4ccc <LCDWriteCharP+0x326>
    49c2:	90 52       	subi	r25, 0x20	; 32
    49c4:	49 2f       	mov	r20, r25
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	44 0f       	add	r20, r20
    49ca:	55 1f       	adc	r21, r21
    49cc:	44 0f       	add	r20, r20
    49ce:	55 1f       	adc	r21, r21
    49d0:	44 0f       	add	r20, r20
    49d2:	55 1f       	adc	r21, r21
    49d4:	66 0f       	add	r22, r22
    49d6:	66 0f       	add	r22, r22
    49d8:	66 0f       	add	r22, r22
    49da:	70 e0       	ldi	r23, 0x00	; 0
    49dc:	a8 2f       	mov	r26, r24
    49de:	b0 e0       	ldi	r27, 0x00	; 0
    49e0:	21 30       	cpi	r18, 0x01	; 1
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <LCDWriteCharP+0x40>
    49e4:	b6 c0       	rjmp	.+364    	; 0x4b52 <LCDWriteCharP+0x1ac>

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    49e6:	fa 01       	movw	r30, r20
    49e8:	e3 56       	subi	r30, 0x63	; 99
    49ea:	fe 4f       	sbci	r31, 0xFE	; 254
    49ec:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    49ee:	fb 01       	movw	r30, r22
    49f0:	ee 0f       	add	r30, r30
    49f2:	ff 1f       	adc	r31, r31
    49f4:	ee 0f       	add	r30, r30
    49f6:	ff 1f       	adc	r31, r31
    49f8:	cf 01       	movw	r24, r30
    49fa:	88 0f       	add	r24, r24
    49fc:	99 1f       	adc	r25, r25
    49fe:	88 0f       	add	r24, r24
    4a00:	99 1f       	adc	r25, r25
    4a02:	e8 0f       	add	r30, r24
    4a04:	f9 1f       	adc	r31, r25
    4a06:	ea 0f       	add	r30, r26
    4a08:	fb 1f       	adc	r31, r27
    4a0a:	e9 50       	subi	r30, 0x09	; 9
    4a0c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a0e:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4a10:	fa 01       	movw	r30, r20
    4a12:	e2 56       	subi	r30, 0x62	; 98
    4a14:	fe 4f       	sbci	r31, 0xFE	; 254
    4a16:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4a18:	6f 5f       	subi	r22, 0xFF	; 255
    4a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1c:	fb 01       	movw	r30, r22
    4a1e:	ee 0f       	add	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	ee 0f       	add	r30, r30
    4a24:	ff 1f       	adc	r31, r31
    4a26:	cf 01       	movw	r24, r30
    4a28:	88 0f       	add	r24, r24
    4a2a:	99 1f       	adc	r25, r25
    4a2c:	88 0f       	add	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	e8 0f       	add	r30, r24
    4a32:	f9 1f       	adc	r31, r25
    4a34:	ea 0f       	add	r30, r26
    4a36:	fb 1f       	adc	r31, r27
    4a38:	e9 50       	subi	r30, 0x09	; 9
    4a3a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a3c:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4a3e:	fa 01       	movw	r30, r20
    4a40:	e1 56       	subi	r30, 0x61	; 97
    4a42:	fe 4f       	sbci	r31, 0xFE	; 254
    4a44:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4a46:	6f 5f       	subi	r22, 0xFF	; 255
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4a:	fb 01       	movw	r30, r22
    4a4c:	ee 0f       	add	r30, r30
    4a4e:	ff 1f       	adc	r31, r31
    4a50:	ee 0f       	add	r30, r30
    4a52:	ff 1f       	adc	r31, r31
    4a54:	cf 01       	movw	r24, r30
    4a56:	88 0f       	add	r24, r24
    4a58:	99 1f       	adc	r25, r25
    4a5a:	88 0f       	add	r24, r24
    4a5c:	99 1f       	adc	r25, r25
    4a5e:	e8 0f       	add	r30, r24
    4a60:	f9 1f       	adc	r31, r25
    4a62:	ea 0f       	add	r30, r26
    4a64:	fb 1f       	adc	r31, r27
    4a66:	e9 50       	subi	r30, 0x09	; 9
    4a68:	fc 4f       	sbci	r31, 0xFC	; 252
    4a6a:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4a6c:	fa 01       	movw	r30, r20
    4a6e:	e0 56       	subi	r30, 0x60	; 96
    4a70:	fe 4f       	sbci	r31, 0xFE	; 254
    4a72:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4a74:	6f 5f       	subi	r22, 0xFF	; 255
    4a76:	7f 4f       	sbci	r23, 0xFF	; 255
    4a78:	fb 01       	movw	r30, r22
    4a7a:	ee 0f       	add	r30, r30
    4a7c:	ff 1f       	adc	r31, r31
    4a7e:	ee 0f       	add	r30, r30
    4a80:	ff 1f       	adc	r31, r31
    4a82:	cf 01       	movw	r24, r30
    4a84:	88 0f       	add	r24, r24
    4a86:	99 1f       	adc	r25, r25
    4a88:	88 0f       	add	r24, r24
    4a8a:	99 1f       	adc	r25, r25
    4a8c:	e8 0f       	add	r30, r24
    4a8e:	f9 1f       	adc	r31, r25
    4a90:	ea 0f       	add	r30, r26
    4a92:	fb 1f       	adc	r31, r27
    4a94:	e9 50       	subi	r30, 0x09	; 9
    4a96:	fc 4f       	sbci	r31, 0xFC	; 252
    4a98:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4a9a:	fa 01       	movw	r30, r20
    4a9c:	ef 55       	subi	r30, 0x5F	; 95
    4a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4aa0:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4aa2:	6f 5f       	subi	r22, 0xFF	; 255
    4aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa6:	fb 01       	movw	r30, r22
    4aa8:	ee 0f       	add	r30, r30
    4aaa:	ff 1f       	adc	r31, r31
    4aac:	ee 0f       	add	r30, r30
    4aae:	ff 1f       	adc	r31, r31
    4ab0:	cf 01       	movw	r24, r30
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	88 0f       	add	r24, r24
    4ab8:	99 1f       	adc	r25, r25
    4aba:	e8 0f       	add	r30, r24
    4abc:	f9 1f       	adc	r31, r25
    4abe:	ea 0f       	add	r30, r26
    4ac0:	fb 1f       	adc	r31, r27
    4ac2:	e9 50       	subi	r30, 0x09	; 9
    4ac4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ac6:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4ac8:	fa 01       	movw	r30, r20
    4aca:	ee 55       	subi	r30, 0x5E	; 94
    4acc:	fe 4f       	sbci	r31, 0xFE	; 254
    4ace:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4ad0:	6f 5f       	subi	r22, 0xFF	; 255
    4ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad4:	fb 01       	movw	r30, r22
    4ad6:	ee 0f       	add	r30, r30
    4ad8:	ff 1f       	adc	r31, r31
    4ada:	ee 0f       	add	r30, r30
    4adc:	ff 1f       	adc	r31, r31
    4ade:	cf 01       	movw	r24, r30
    4ae0:	88 0f       	add	r24, r24
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	88 0f       	add	r24, r24
    4ae6:	99 1f       	adc	r25, r25
    4ae8:	e8 0f       	add	r30, r24
    4aea:	f9 1f       	adc	r31, r25
    4aec:	ea 0f       	add	r30, r26
    4aee:	fb 1f       	adc	r31, r27
    4af0:	e9 50       	subi	r30, 0x09	; 9
    4af2:	fc 4f       	sbci	r31, 0xFC	; 252
    4af4:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4af6:	fa 01       	movw	r30, r20
    4af8:	ed 55       	subi	r30, 0x5D	; 93
    4afa:	fe 4f       	sbci	r31, 0xFE	; 254
    4afc:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4afe:	6f 5f       	subi	r22, 0xFF	; 255
    4b00:	7f 4f       	sbci	r23, 0xFF	; 255
    4b02:	fb 01       	movw	r30, r22
    4b04:	ee 0f       	add	r30, r30
    4b06:	ff 1f       	adc	r31, r31
    4b08:	ee 0f       	add	r30, r30
    4b0a:	ff 1f       	adc	r31, r31
    4b0c:	cf 01       	movw	r24, r30
    4b0e:	88 0f       	add	r24, r24
    4b10:	99 1f       	adc	r25, r25
    4b12:	88 0f       	add	r24, r24
    4b14:	99 1f       	adc	r25, r25
    4b16:	e8 0f       	add	r30, r24
    4b18:	f9 1f       	adc	r31, r25
    4b1a:	ea 0f       	add	r30, r26
    4b1c:	fb 1f       	adc	r31, r27
    4b1e:	e9 50       	subi	r30, 0x09	; 9
    4b20:	fc 4f       	sbci	r31, 0xFC	; 252
    4b22:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4b24:	4c 55       	subi	r20, 0x5C	; 92
    4b26:	5e 4f       	sbci	r21, 0xFE	; 254
    4b28:	fa 01       	movw	r30, r20
    4b2a:	24 91       	lpm	r18, Z+
				LCDFrameBuffer[fb_index] = ~ch_line;
			}
			else
			{
				// normal
				LCDFrameBuffer[fb_index] = ch_line;
    4b2c:	fb 01       	movw	r30, r22
    4b2e:	31 96       	adiw	r30, 0x01	; 1
    4b30:	ee 0f       	add	r30, r30
    4b32:	ff 1f       	adc	r31, r31
    4b34:	ee 0f       	add	r30, r30
    4b36:	ff 1f       	adc	r31, r31
    4b38:	cf 01       	movw	r24, r30
    4b3a:	88 0f       	add	r24, r24
    4b3c:	99 1f       	adc	r25, r25
    4b3e:	88 0f       	add	r24, r24
    4b40:	99 1f       	adc	r25, r25
    4b42:	e8 0f       	add	r30, r24
    4b44:	f9 1f       	adc	r31, r25
    4b46:	ea 0f       	add	r30, r26
    4b48:	fb 1f       	adc	r31, r27
    4b4a:	e9 50       	subi	r30, 0x09	; 9
    4b4c:	fc 4f       	sbci	r31, 0xFC	; 252
    4b4e:	20 83       	st	Z, r18
    4b50:	08 95       	ret

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4b52:	fa 01       	movw	r30, r20
    4b54:	e3 56       	subi	r30, 0x63	; 99
    4b56:	fe 4f       	sbci	r31, 0xFE	; 254
    4b58:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4b5a:	fb 01       	movw	r30, r22
    4b5c:	ee 0f       	add	r30, r30
    4b5e:	ff 1f       	adc	r31, r31
    4b60:	ee 0f       	add	r30, r30
    4b62:	ff 1f       	adc	r31, r31
    4b64:	cf 01       	movw	r24, r30
    4b66:	88 0f       	add	r24, r24
    4b68:	99 1f       	adc	r25, r25
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	e8 0f       	add	r30, r24
    4b70:	f9 1f       	adc	r31, r25
    4b72:	ea 0f       	add	r30, r26
    4b74:	fb 1f       	adc	r31, r27
    4b76:	e9 50       	subi	r30, 0x09	; 9
    4b78:	fc 4f       	sbci	r31, 0xFC	; 252
    4b7a:	20 95       	com	r18
    4b7c:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4b7e:	fa 01       	movw	r30, r20
    4b80:	e2 56       	subi	r30, 0x62	; 98
    4b82:	fe 4f       	sbci	r31, 0xFE	; 254
    4b84:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4b86:	6f 5f       	subi	r22, 0xFF	; 255
    4b88:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8a:	fb 01       	movw	r30, r22
    4b8c:	ee 0f       	add	r30, r30
    4b8e:	ff 1f       	adc	r31, r31
    4b90:	ee 0f       	add	r30, r30
    4b92:	ff 1f       	adc	r31, r31
    4b94:	cf 01       	movw	r24, r30
    4b96:	88 0f       	add	r24, r24
    4b98:	99 1f       	adc	r25, r25
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	e8 0f       	add	r30, r24
    4ba0:	f9 1f       	adc	r31, r25
    4ba2:	ea 0f       	add	r30, r26
    4ba4:	fb 1f       	adc	r31, r27
    4ba6:	e9 50       	subi	r30, 0x09	; 9
    4ba8:	fc 4f       	sbci	r31, 0xFC	; 252
    4baa:	20 95       	com	r18
    4bac:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4bae:	fa 01       	movw	r30, r20
    4bb0:	e1 56       	subi	r30, 0x61	; 97
    4bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    4bb4:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4bb6:	6f 5f       	subi	r22, 0xFF	; 255
    4bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bba:	fb 01       	movw	r30, r22
    4bbc:	ee 0f       	add	r30, r30
    4bbe:	ff 1f       	adc	r31, r31
    4bc0:	ee 0f       	add	r30, r30
    4bc2:	ff 1f       	adc	r31, r31
    4bc4:	cf 01       	movw	r24, r30
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	88 0f       	add	r24, r24
    4bcc:	99 1f       	adc	r25, r25
    4bce:	e8 0f       	add	r30, r24
    4bd0:	f9 1f       	adc	r31, r25
    4bd2:	ea 0f       	add	r30, r26
    4bd4:	fb 1f       	adc	r31, r27
    4bd6:	e9 50       	subi	r30, 0x09	; 9
    4bd8:	fc 4f       	sbci	r31, 0xFC	; 252
    4bda:	20 95       	com	r18
    4bdc:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4bde:	fa 01       	movw	r30, r20
    4be0:	e0 56       	subi	r30, 0x60	; 96
    4be2:	fe 4f       	sbci	r31, 0xFE	; 254
    4be4:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4be6:	6f 5f       	subi	r22, 0xFF	; 255
    4be8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bea:	fb 01       	movw	r30, r22
    4bec:	ee 0f       	add	r30, r30
    4bee:	ff 1f       	adc	r31, r31
    4bf0:	ee 0f       	add	r30, r30
    4bf2:	ff 1f       	adc	r31, r31
    4bf4:	cf 01       	movw	r24, r30
    4bf6:	88 0f       	add	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	88 0f       	add	r24, r24
    4bfc:	99 1f       	adc	r25, r25
    4bfe:	e8 0f       	add	r30, r24
    4c00:	f9 1f       	adc	r31, r25
    4c02:	ea 0f       	add	r30, r26
    4c04:	fb 1f       	adc	r31, r27
    4c06:	e9 50       	subi	r30, 0x09	; 9
    4c08:	fc 4f       	sbci	r31, 0xFC	; 252
    4c0a:	20 95       	com	r18
    4c0c:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4c0e:	fa 01       	movw	r30, r20
    4c10:	ef 55       	subi	r30, 0x5F	; 95
    4c12:	fe 4f       	sbci	r31, 0xFE	; 254
    4c14:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4c16:	6f 5f       	subi	r22, 0xFF	; 255
    4c18:	7f 4f       	sbci	r23, 0xFF	; 255
    4c1a:	fb 01       	movw	r30, r22
    4c1c:	ee 0f       	add	r30, r30
    4c1e:	ff 1f       	adc	r31, r31
    4c20:	ee 0f       	add	r30, r30
    4c22:	ff 1f       	adc	r31, r31
    4c24:	cf 01       	movw	r24, r30
    4c26:	88 0f       	add	r24, r24
    4c28:	99 1f       	adc	r25, r25
    4c2a:	88 0f       	add	r24, r24
    4c2c:	99 1f       	adc	r25, r25
    4c2e:	e8 0f       	add	r30, r24
    4c30:	f9 1f       	adc	r31, r25
    4c32:	ea 0f       	add	r30, r26
    4c34:	fb 1f       	adc	r31, r27
    4c36:	e9 50       	subi	r30, 0x09	; 9
    4c38:	fc 4f       	sbci	r31, 0xFC	; 252
    4c3a:	20 95       	com	r18
    4c3c:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4c3e:	fa 01       	movw	r30, r20
    4c40:	ee 55       	subi	r30, 0x5E	; 94
    4c42:	fe 4f       	sbci	r31, 0xFE	; 254
    4c44:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4c46:	6f 5f       	subi	r22, 0xFF	; 255
    4c48:	7f 4f       	sbci	r23, 0xFF	; 255
    4c4a:	fb 01       	movw	r30, r22
    4c4c:	ee 0f       	add	r30, r30
    4c4e:	ff 1f       	adc	r31, r31
    4c50:	ee 0f       	add	r30, r30
    4c52:	ff 1f       	adc	r31, r31
    4c54:	cf 01       	movw	r24, r30
    4c56:	88 0f       	add	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	e8 0f       	add	r30, r24
    4c60:	f9 1f       	adc	r31, r25
    4c62:	ea 0f       	add	r30, r26
    4c64:	fb 1f       	adc	r31, r27
    4c66:	e9 50       	subi	r30, 0x09	; 9
    4c68:	fc 4f       	sbci	r31, 0xFC	; 252
    4c6a:	20 95       	com	r18
    4c6c:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4c6e:	fa 01       	movw	r30, r20
    4c70:	ed 55       	subi	r30, 0x5D	; 93
    4c72:	fe 4f       	sbci	r31, 0xFE	; 254
    4c74:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4c76:	6f 5f       	subi	r22, 0xFF	; 255
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	fb 01       	movw	r30, r22
    4c7c:	ee 0f       	add	r30, r30
    4c7e:	ff 1f       	adc	r31, r31
    4c80:	ee 0f       	add	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	cf 01       	movw	r24, r30
    4c86:	88 0f       	add	r24, r24
    4c88:	99 1f       	adc	r25, r25
    4c8a:	88 0f       	add	r24, r24
    4c8c:	99 1f       	adc	r25, r25
    4c8e:	e8 0f       	add	r30, r24
    4c90:	f9 1f       	adc	r31, r25
    4c92:	ea 0f       	add	r30, r26
    4c94:	fb 1f       	adc	r31, r27
    4c96:	e9 50       	subi	r30, 0x09	; 9
    4c98:	fc 4f       	sbci	r31, 0xFC	; 252
    4c9a:	20 95       	com	r18
    4c9c:	20 83       	st	Z, r18

		// display the selected character
		for (c = 0; c < FONT_CHAR_HEIGHT; c++)
		{
			// get next line from the character image
			ch_line  = pgm_read_byte(&Font8x8[ch][c]);
    4c9e:	4c 55       	subi	r20, 0x5C	; 92
    4ca0:	5e 4f       	sbci	r21, 0xFE	; 254
    4ca2:	fa 01       	movw	r30, r20
    4ca4:	24 91       	lpm	r18, Z+

			// display it 		
			if (inv == DISP_INVERTED)
			{
				// inverted
				LCDFrameBuffer[fb_index] = ~ch_line;
    4ca6:	fb 01       	movw	r30, r22
    4ca8:	31 96       	adiw	r30, 0x01	; 1
    4caa:	ee 0f       	add	r30, r30
    4cac:	ff 1f       	adc	r31, r31
    4cae:	ee 0f       	add	r30, r30
    4cb0:	ff 1f       	adc	r31, r31
    4cb2:	cf 01       	movw	r24, r30
    4cb4:	88 0f       	add	r24, r24
    4cb6:	99 1f       	adc	r25, r25
    4cb8:	88 0f       	add	r24, r24
    4cba:	99 1f       	adc	r25, r25
    4cbc:	e8 0f       	add	r30, r24
    4cbe:	f9 1f       	adc	r31, r25
    4cc0:	ea 0f       	add	r30, r26
    4cc2:	fb 1f       	adc	r31, r27
    4cc4:	e9 50       	subi	r30, 0x09	; 9
    4cc6:	fc 4f       	sbci	r31, 0xFC	; 252
    4cc8:	20 95       	com	r18
    4cca:	20 83       	st	Z, r18
    4ccc:	08 95       	ret

00004cce <LCDWriteDigit>:
//			  pos_count		-> Positions count for the digit
//
// Result   : none
//
//*****************************************************************************
void LCDWriteDigit	(U8 x, U8 y, U8 digit_type, U16 digit, U8 pos_count){
    4cce:	2f 92       	push	r2
    4cd0:	3f 92       	push	r3
    4cd2:	4f 92       	push	r4
    4cd4:	5f 92       	push	r5
    4cd6:	6f 92       	push	r6
    4cd8:	7f 92       	push	r7
    4cda:	8f 92       	push	r8
    4cdc:	9f 92       	push	r9
    4cde:	af 92       	push	r10
    4ce0:	bf 92       	push	r11
    4ce2:	cf 92       	push	r12
    4ce4:	df 92       	push	r13
    4ce6:	ef 92       	push	r14
    4ce8:	ff 92       	push	r15
    4cea:	0f 93       	push	r16
    4cec:	1f 93       	push	r17
    4cee:	df 93       	push	r29
    4cf0:	cf 93       	push	r28
    4cf2:	cd b7       	in	r28, 0x3d	; 61
    4cf4:	de b7       	in	r29, 0x3e	; 62
    4cf6:	2a 97       	sbiw	r28, 0x0a	; 10
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	f8 94       	cli
    4cfc:	de bf       	out	0x3e, r29	; 62
    4cfe:	0f be       	out	0x3f, r0	; 63
    4d00:	cd bf       	out	0x3d, r28	; 61
    4d02:	8b 83       	std	Y+3, r24	; 0x03
    4d04:	6c 83       	std	Y+4, r22	; 0x04
    4d06:	4d 83       	std	Y+5, r20	; 0x05
    4d08:	79 01       	movw	r14, r18
    4d0a:	0e 83       	std	Y+6, r16	; 0x06
    4d0c:	e4 2f       	mov	r30, r20
    4d0e:	f0 e0       	ldi	r31, 0x00	; 0
    4d10:	ee 0f       	add	r30, r30
    4d12:	ff 1f       	adc	r31, r31
    4d14:	ee 0f       	add	r30, r30
    4d16:	ff 1f       	adc	r31, r31
void LCDWriteDigit_	(U8 x, U8 y, U8 digit_type, U8 digit){

	U16 i, pos;

	//determine start position
	pos = y*LINE_NUM_CHARS + x;
    4d18:	84 e1       	ldi	r24, 0x14	; 20
    4d1a:	68 9f       	mul	r22, r24
    4d1c:	90 01       	movw	r18, r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	3a 83       	std	Y+2, r19	; 0x02
    4d22:	29 83       	std	Y+1, r18	; 0x01
    4d24:	cf 01       	movw	r24, r30
    4d26:	83 56       	subi	r24, 0x63	; 99
    4d28:	9b 4f       	sbci	r25, 0xFB	; 251
    4d2a:	d0 2e       	mov	r13, r16
//			  pos_count		-> Positions count for the digit
//
// Result   : none
//
//*****************************************************************************
void LCDWriteDigit	(U8 x, U8 y, U8 digit_type, U16 digit, U8 pos_count){
    4d2c:	e1 56       	subi	r30, 0x61	; 97
    4d2e:	fb 4f       	sbci	r31, 0xFB	; 251

	do{ 
		if((digit == 0) && (pos_count!=init_pos_count)) //clear unused positions
			LCDWriteIcon(x+(pos_count-1)*pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]), y, digit_type);
		else{	//write the digit
			LCDWriteDigit_(x+(pos_count-1)*pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]), y, digit_type, digit%10);
    4d30:	64 91       	lpm	r22, Z+
void LCDWriteDigit_	(U8 x, U8 y, U8 digit_type, U8 digit){

	U16 i, pos;

	//determine start position
	pos = y*LINE_NUM_CHARS + x;
    4d32:	66 2e       	mov	r6, r22
    4d34:	77 24       	eor	r7, r7

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    4d36:	fc 01       	movw	r30, r24
    4d38:	84 91       	lpm	r24, Z+
    4d3a:	a8 2e       	mov	r10, r24
    4d3c:	bb 24       	eor	r11, r11
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    4d3e:	c6 2e       	mov	r12, r22
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    4d40:	13 01       	movw	r2, r6

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    4d42:	45 01       	movw	r8, r10
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    4d44:	23 01       	movw	r4, r6
	//get init position
	U8 init_pos_count = pos_count;

	do{ 
		if((digit == 0) && (pos_count!=init_pos_count)) //clear unused positions
			LCDWriteIcon(x+(pos_count-1)*pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]), y, digit_type);
    4d46:	78 86       	std	Y+8, r7	; 0x08
    4d48:	6f 82       	std	Y+7, r6	; 0x07
    4d4a:	16 c0       	rjmp	.+44     	; 0x4d78 <LCDWriteDigit+0xaa>
    4d4c:	8d 2d       	mov	r24, r13
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	01 97       	sbiw	r24, 0x01	; 1
    4d52:	2f 81       	ldd	r18, Y+7	; 0x07
    4d54:	38 85       	ldd	r19, Y+8	; 0x08
    4d56:	ac 01       	movw	r20, r24
    4d58:	24 9f       	mul	r18, r20
    4d5a:	c0 01       	movw	r24, r0
    4d5c:	25 9f       	mul	r18, r21
    4d5e:	90 0d       	add	r25, r0
    4d60:	34 9f       	mul	r19, r20
    4d62:	90 0d       	add	r25, r0
    4d64:	11 24       	eor	r1, r1
    4d66:	4d 81       	ldd	r20, Y+5	; 0x05
    4d68:	6c 81       	ldd	r22, Y+4	; 0x04
    4d6a:	5b 81       	ldd	r21, Y+3	; 0x03
    4d6c:	85 0f       	add	r24, r21
    4d6e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCDWriteIcon>
		else{	//write the digit
			LCDWriteDigit_(x+(pos_count-1)*pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]), y, digit_type, digit%10);
			digit = digit/10;
		}

		pos_count--;
    4d72:	da 94       	dec	r13

	}while(pos_count!=0);
    4d74:	09 f4       	brne	.+2      	; 0x4d78 <LCDWriteDigit+0xaa>
    4d76:	6e c0       	rjmp	.+220    	; 0x4e54 <LCDWriteDigit+0x186>

	//get init position
	U8 init_pos_count = pos_count;

	do{ 
		if((digit == 0) && (pos_count!=init_pos_count)) //clear unused positions
    4d78:	e1 14       	cp	r14, r1
    4d7a:	f1 04       	cpc	r15, r1
    4d7c:	19 f4       	brne	.+6      	; 0x4d84 <LCDWriteDigit+0xb6>
    4d7e:	fe 81       	ldd	r31, Y+6	; 0x06
    4d80:	df 16       	cp	r13, r31
    4d82:	21 f7       	brne	.-56     	; 0x4d4c <LCDWriteDigit+0x7e>
void LCDWriteDigit_	(U8 x, U8 y, U8 digit_type, U8 digit){

	U16 i, pos;

	//determine start position
	pos = y*LINE_NUM_CHARS + x;
    4d84:	8d 2d       	mov	r24, r13
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	6a 9e       	mul	r6, r26
    4d8e:	c0 01       	movw	r24, r0
    4d90:	6b 9e       	mul	r6, r27
    4d92:	90 0d       	add	r25, r0
    4d94:	7a 9e       	mul	r7, r26
    4d96:	90 0d       	add	r25, r0
    4d98:	11 24       	eor	r1, r1
    4d9a:	bb 81       	ldd	r27, Y+3	; 0x03
    4d9c:	8b 0f       	add	r24, r27
    4d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4da0:	fa 81       	ldd	r31, Y+2	; 0x02
    4da2:	e8 0f       	add	r30, r24
    4da4:	f1 1d       	adc	r31, r1
    4da6:	fa 87       	std	Y+10, r31	; 0x0a
    4da8:	e9 87       	std	Y+9, r30	; 0x09
			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
		
				//print digit
				if(digit_type == BIG_DIGIT)
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
    4daa:	c7 01       	movw	r24, r14
    4dac:	6a e0       	ldi	r22, 0x0A	; 10
    4dae:	70 e0       	ldi	r23, 0x00	; 0
    4db0:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	23 e6       	ldi	r18, 0x63	; 99
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	82 9f       	mul	r24, r18
    4dbc:	a0 01       	movw	r20, r0
    4dbe:	83 9f       	mul	r24, r19
    4dc0:	50 0d       	add	r21, r0
    4dc2:	92 9f       	mul	r25, r18
    4dc4:	50 0d       	add	r21, r0
    4dc6:	11 24       	eor	r1, r1
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
    4dc8:	9c 01       	movw	r18, r24
    4dca:	22 0f       	add	r18, r18
    4dcc:	33 1f       	adc	r19, r19
    4dce:	28 0f       	add	r18, r24
    4dd0:	39 1f       	adc	r19, r25
    4dd2:	f9 01       	movw	r30, r18
    4dd4:	ee 0f       	add	r30, r30
    4dd6:	ff 1f       	adc	r31, r31
    4dd8:	ee 0f       	add	r30, r30
    4dda:	ff 1f       	adc	r31, r31
    4ddc:	ee 0f       	add	r30, r30
    4dde:	ff 1f       	adc	r31, r31
    4de0:	e2 1b       	sub	r30, r18
    4de2:	f3 0b       	sbc	r31, r19
    4de4:	ee 0f       	add	r30, r30
    4de6:	ff 1f       	adc	r31, r31
    4de8:	3d 81       	ldd	r19, Y+5	; 0x05
    4dea:	33 23       	and	r19, r19
    4dec:	09 f0       	breq	.+2      	; 0x4df0 <LCDWriteDigit+0x122>
    4dee:	4b c0       	rjmp	.+150    	; 0x4e86 <LCDWriteDigit+0x1b8>
    4df0:	8a 01       	movw	r16, r20
    4df2:	03 59       	subi	r16, 0x93	; 147
    4df4:	1e 4e       	sbci	r17, 0xEE	; 238
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	0a c0       	rjmp	.+20     	; 0x4e10 <LCDWriteDigit+0x142>
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    4dfc:	49 85       	ldd	r20, Y+9	; 0x09
    4dfe:	5a 85       	ldd	r21, Y+10	; 0x0a
    4e00:	4b 5e       	subi	r20, 0xEB	; 235
    4e02:	5f 4f       	sbci	r21, 0xFF	; 255
    4e04:	44 19       	sub	r20, r4
    4e06:	55 09       	sbc	r21, r5
    4e08:	5a 87       	std	Y+10, r21	; 0x0a
    4e0a:	49 87       	std	Y+9, r20	; 0x09
				else
					pos++;
    4e0c:	0f 5f       	subi	r16, 0xFF	; 255
    4e0e:	1f 4f       	sbci	r17, 0xFF	; 255

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    4e10:	28 15       	cp	r18, r8
    4e12:	39 05       	cpc	r19, r9
    4e14:	b0 f4       	brcc	.+44     	; 0x4e42 <LCDWriteDigit+0x174>
		
				//print digit
				if(digit_type == BIG_DIGIT)
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
    4e16:	f8 01       	movw	r30, r16
    4e18:	84 91       	lpm	r24, Z+
    4e1a:	e9 85       	ldd	r30, Y+9	; 0x09
    4e1c:	fa 85       	ldd	r31, Y+10	; 0x0a
    4e1e:	e9 50       	subi	r30, 0x09	; 9
    4e20:	fc 4f       	sbci	r31, 0xFC	; 252
    4e22:	80 83       	st	Z, r24
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    4e24:	2f 5f       	subi	r18, 0xFF	; 255
    4e26:	3f 4f       	sbci	r19, 0xFF	; 255
    4e28:	c9 01       	movw	r24, r18
    4e2a:	6c 2d       	mov	r22, r12
    4e2c:	70 e0       	ldi	r23, 0x00	; 0
    4e2e:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    4e32:	89 2b       	or	r24, r25
    4e34:	19 f3       	breq	.-58     	; 0x4dfc <LCDWriteDigit+0x12e>
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
				else
					pos++;
    4e36:	89 85       	ldd	r24, Y+9	; 0x09
    4e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3a:	01 96       	adiw	r24, 0x01	; 1
    4e3c:	9a 87       	std	Y+10, r25	; 0x0a
    4e3e:	89 87       	std	Y+9, r24	; 0x09
    4e40:	e5 cf       	rjmp	.-54     	; 0x4e0c <LCDWriteDigit+0x13e>
	do{ 
		if((digit == 0) && (pos_count!=init_pos_count)) //clear unused positions
			LCDWriteIcon(x+(pos_count-1)*pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]), y, digit_type);
		else{	//write the digit
			LCDWriteDigit_(x+(pos_count-1)*pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]), y, digit_type, digit%10);
			digit = digit/10;
    4e42:	c7 01       	movw	r24, r14
    4e44:	6a e0       	ldi	r22, 0x0A	; 10
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    4e4c:	7b 01       	movw	r14, r22
		}

		pos_count--;
    4e4e:	da 94       	dec	r13

	}while(pos_count!=0);
    4e50:	09 f0       	breq	.+2      	; 0x4e54 <LCDWriteDigit+0x186>
    4e52:	92 cf       	rjmp	.-220    	; 0x4d78 <LCDWriteDigit+0xaa>

}
    4e54:	2a 96       	adiw	r28, 0x0a	; 10
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	f8 94       	cli
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	cf 91       	pop	r28
    4e62:	df 91       	pop	r29
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	ff 90       	pop	r15
    4e6a:	ef 90       	pop	r14
    4e6c:	df 90       	pop	r13
    4e6e:	cf 90       	pop	r12
    4e70:	bf 90       	pop	r11
    4e72:	af 90       	pop	r10
    4e74:	9f 90       	pop	r9
    4e76:	8f 90       	pop	r8
    4e78:	7f 90       	pop	r7
    4e7a:	6f 90       	pop	r6
    4e7c:	5f 90       	pop	r5
    4e7e:	4f 90       	pop	r4
    4e80:	3f 90       	pop	r3
    4e82:	2f 90       	pop	r2
    4e84:	08 95       	ret
    4e86:	8f 01       	movw	r16, r30
    4e88:	05 5b       	subi	r16, 0xB5	; 181
    4e8a:	1a 4e       	sbci	r17, 0xEA	; 234
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	08 c0       	rjmp	.+16     	; 0x4ea2 <LCDWriteDigit+0x1d4>
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
				else
					pos++;
    4e92:	49 85       	ldd	r20, Y+9	; 0x09
    4e94:	5a 85       	ldd	r21, Y+10	; 0x0a
    4e96:	4f 5f       	subi	r20, 0xFF	; 255
    4e98:	5f 4f       	sbci	r21, 0xFF	; 255
    4e9a:	5a 87       	std	Y+10, r21	; 0x0a
    4e9c:	49 87       	std	Y+9, r20	; 0x09
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    4e9e:	0f 5f       	subi	r16, 0xFF	; 255
    4ea0:	1f 4f       	sbci	r17, 0xFF	; 255

	//determine start position
	pos = y*LINE_NUM_CHARS + x;

			//loop for all digit bytes
			for(i=0;i<pgm_read_byte(&SizeWidthValues[digit_type][SIZE]);i++){
    4ea2:	2a 15       	cp	r18, r10
    4ea4:	3b 05       	cpc	r19, r11
    4ea6:	68 f6       	brcc	.-102    	; 0x4e42 <LCDWriteDigit+0x174>
		
				//print digit
				if(digit_type == BIG_DIGIT)
					LCDFrameBuffer[pos] = pgm_read_byte(&BigDigit[digit][i]);
				else
					LCDFrameBuffer[pos] = pgm_read_byte(&SmallDigit[digit][i]);
    4ea8:	f8 01       	movw	r30, r16
    4eaa:	84 91       	lpm	r24, Z+
    4eac:	e9 85       	ldd	r30, Y+9	; 0x09
    4eae:	fa 85       	ldd	r31, Y+10	; 0x0a
    4eb0:	e9 50       	subi	r30, 0x09	; 9
    4eb2:	fc 4f       	sbci	r31, 0xFC	; 252
    4eb4:	80 83       	st	Z, r24
				
				//new row
				if(((i+1)%pgm_read_byte(&SizeWidthValues[digit_type][WIDTH]))==0)
    4eb6:	2f 5f       	subi	r18, 0xFF	; 255
    4eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4eba:	c9 01       	movw	r24, r18
    4ebc:	6c 2d       	mov	r22, r12
    4ebe:	70 e0       	ldi	r23, 0x00	; 0
    4ec0:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    4ec4:	89 2b       	or	r24, r25
    4ec6:	29 f7       	brne	.-54     	; 0x4e92 <LCDWriteDigit+0x1c4>
					pos=pos+LINE_NUM_CHARS-pgm_read_byte(&SizeWidthValues[digit_type][WIDTH])+1;
    4ec8:	89 85       	ldd	r24, Y+9	; 0x09
    4eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ecc:	45 96       	adiw	r24, 0x15	; 21
    4ece:	82 19       	sub	r24, r2
    4ed0:	93 09       	sbc	r25, r3
    4ed2:	9a 87       	std	Y+10, r25	; 0x0a
    4ed4:	89 87       	std	Y+9, r24	; 0x09
    4ed6:	e3 cf       	rjmp	.-58     	; 0x4e9e <LCDWriteDigit+0x1d0>

00004ed8 <TouchScreenInit>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TouchScreenInit(void){
    4ed8:	ec e7       	ldi	r30, 0x7C	; 124
    4eda:	f0 e0       	ldi	r31, 0x00	; 0
    4edc:	80 81       	ld	r24, Z
    4ede:	8f 77       	andi	r24, 0x7F	; 127
    4ee0:	80 83       	st	Z, r24
  
	//Enabling AREF as reference voltage
	cbi(ADMUX,REFS1);
	cbi(ADMUX,REFS0);
    4ee2:	80 81       	ld	r24, Z
    4ee4:	8f 7b       	andi	r24, 0xBF	; 191
    4ee6:	80 83       	st	Z, r24

	//Setting Right adjustment for the result of ADC conversion
	cbi(ADMUX,ADLAR);//cleaer left adjust
    4ee8:	80 81       	ld	r24, Z
    4eea:	8f 7d       	andi	r24, 0xDF	; 223
    4eec:	80 83       	st	Z, r24

	//Clearing the channel selection bits
	ADMUX  &= ~(0x1F<<MUX0);
    4eee:	80 81       	ld	r24, Z
    4ef0:	80 7e       	andi	r24, 0xE0	; 224
    4ef2:	80 83       	st	Z, r24
  
	ADCSRA &= ~(0x07<<ADPS0);		 //clear prescaler
    4ef4:	ea e7       	ldi	r30, 0x7A	; 122
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	80 81       	ld	r24, Z
    4efa:	88 7f       	andi	r24, 0xF8	; 248
    4efc:	80 83       	st	Z, r24
 	ADCSRA |= (ADC_PRESC<<ADPS0); //select prescaler
    4efe:	80 81       	ld	r24, Z
    4f00:	86 60       	ori	r24, 0x06	; 6
    4f02:	80 83       	st	Z, r24

	cbi(ADCSRA,ADATE);
    4f04:	80 81       	ld	r24, Z
    4f06:	8f 7d       	andi	r24, 0xDF	; 223
    4f08:	80 83       	st	Z, r24

	TouchScreenInitialized=1;
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	80 93 20 01 	sts	0x0120, r24
}
    4f10:	08 95       	ret

00004f12 <Init>:
//			  axis = 'Y' - ADC will be initialized for measuring TouchScreenValueY ;
//
// Result   : none
//
//*****************************************************************************
void Init(U8 axis){
    4f12:	88 35       	cpi	r24, 0x58	; 88
    4f14:	d1 f0       	breq	.+52     	; 0x4f4a <Init+0x38>
	}else{
	
		//axis = 'Y'
		
		//Setting PORTF & PORTC5 for measuring the Y axis
		mCat2(PORT,TSCR_PORT) &= (0xF8);
    4f16:	81 b3       	in	r24, 0x11	; 17
    4f18:	88 7f       	andi	r24, 0xF8	; 248
    4f1a:	81 bb       	out	0x11, r24	; 17
		mCat2(PORT,TSCR_PORT) |= (0x07);
    4f1c:	81 b3       	in	r24, 0x11	; 17
    4f1e:	87 60       	ori	r24, 0x07	; 7
    4f20:	81 bb       	out	0x11, r24	; 17
		PORTC &= ~(1<<PC5);
    4f22:	45 98       	cbi	0x08, 5	; 8

		//Setting DDRF & DDRC5 for measuring the Y axis
		mCat2(DDR,TSCR_PORT) &= (0xF8);
    4f24:	80 b3       	in	r24, 0x10	; 16
    4f26:	88 7f       	andi	r24, 0xF8	; 248
    4f28:	80 bb       	out	0x10, r24	; 16
		mCat2(DDR,TSCR_PORT) |= (0x04);//0100
    4f2a:	82 9a       	sbi	0x10, 2	; 16
		DDRC |= (1<<PC5);
    4f2c:	3d 9a       	sbi	0x07, 5	; 7

		//Clearing the channel selection bits
		ADMUX  &= ~(0x1F<<MUX0); 
    4f2e:	80 91 7c 00 	lds	r24, 0x007C
    4f32:	80 7e       	andi	r24, 0xE0	; 224
    4f34:	80 93 7c 00 	sts	0x007C, r24

		//Setting ADC Channel 0
		cbi(ADMUX, MUX0);
    4f38:	80 91 7c 00 	lds	r24, 0x007C
    4f3c:	8e 7f       	andi	r24, 0xFE	; 254
    4f3e:	80 93 7c 00 	sts	0x007C, r24

		//Enabling the Measure() function
		TouchScreenInitialized=1;
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	80 93 20 01 	sts	0x0120, r24
    4f48:	08 95       	ret
	if(axis=='X'){

		//axis = 'X'

		//Setting PORTF & PORTC5 for measuring the X axis
		mCat2(PORT,TSCR_PORT) &= (0xF8);
    4f4a:	81 b3       	in	r24, 0x11	; 17
    4f4c:	88 7f       	andi	r24, 0xF8	; 248
    4f4e:	81 bb       	out	0x11, r24	; 17
		PORTC &= ~(1<<PC5);
    4f50:	45 98       	cbi	0x08, 5	; 8
		mCat2(PORT,TSCR_PORT) |= (0x05);
    4f52:	81 b3       	in	r24, 0x11	; 17
    4f54:	85 60       	ori	r24, 0x05	; 5
    4f56:	81 bb       	out	0x11, r24	; 17
		PORTC |= (1<<PC5);
    4f58:	45 9a       	sbi	0x08, 5	; 8

		//Setting DDRF & DDRC5 for measuring the X axis
		mCat2(DDR,TSCR_PORT) &= (0xF8);
    4f5a:	80 b3       	in	r24, 0x10	; 16
    4f5c:	88 7f       	andi	r24, 0xF8	; 248
    4f5e:	80 bb       	out	0x10, r24	; 16
		DDRC &= ~(1<<PC5);
    4f60:	3d 98       	cbi	0x07, 5	; 7
		mCat2(DDR,TSCR_PORT) |= (0x03);
    4f62:	80 b3       	in	r24, 0x10	; 16
    4f64:	83 60       	ori	r24, 0x03	; 3
    4f66:	80 bb       	out	0x10, r24	; 16

		//Clearing the channel selection bits
		ADMUX  &= ~(0x1F<<MUX0);
    4f68:	80 91 7c 00 	lds	r24, 0x007C
    4f6c:	80 7e       	andi	r24, 0xE0	; 224
    4f6e:	80 93 7c 00 	sts	0x007C, r24

		//Setting ADC Channel 2
		sbi(ADMUX,MUX1);
    4f72:	80 91 7c 00 	lds	r24, 0x007C
    4f76:	82 60       	ori	r24, 0x02	; 2
    4f78:	80 93 7c 00 	sts	0x007C, r24

		//Enabling the Measure() function
		TouchScreenInitialized=1;
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	80 93 20 01 	sts	0x0120, r24
    4f82:	08 95       	ret

00004f84 <TouchScreenStart>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TouchScreenStart(void){
    4f84:	ea e7       	ldi	r30, 0x7A	; 122
    4f86:	f0 e0       	ldi	r31, 0x00	; 0
    4f88:	80 81       	ld	r24, Z
    4f8a:	80 68       	ori	r24, 0x80	; 128
    4f8c:	80 83       	st	Z, r24

	//enable ADC measurement
	sbi(ADCSRA, ADEN);

}
    4f8e:	08 95       	ret

00004f90 <TouchScreenStop>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TouchScreenStop(void){
    4f90:	10 92 20 01 	sts	0x0120, r1
	
	//Disabling the Measure() function
	TouchScreenInitialized=0;
	cbi(ADCSRA, ADEN);
    4f94:	ea e7       	ldi	r30, 0x7A	; 122
    4f96:	f0 e0       	ldi	r31, 0x00	; 0
    4f98:	80 81       	ld	r24, Z
    4f9a:	8f 77       	andi	r24, 0x7F	; 127
    4f9c:	80 83       	st	Z, r24

}
    4f9e:	08 95       	ret

00004fa0 <Measure>:
//			  axis = 'Y' - TouchScreenValueY will be measured;
//
// Result   : none
//
//*****************************************************************************
void Measure(U8 axis){
    4fa0:	58 2f       	mov	r21, r24
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	44 e0       	ldi	r20, 0x04	; 4

	sum=0;

	//Real measurement
	for(i=0;i<PRECISION;i++){
		sbi(ADCSRA, ADSC);
    4fa8:	80 91 7a 00 	lds	r24, 0x007A
    4fac:	80 64       	ori	r24, 0x40	; 64
    4fae:	80 93 7a 00 	sts	0x007A, r24
		cbi(ADCSRA, ADATE);
    4fb2:	80 91 7a 00 	lds	r24, 0x007A
    4fb6:	8f 7d       	andi	r24, 0xDF	; 223
    4fb8:	80 93 7a 00 	sts	0x007A, r24
		
		while(!(ADCSRA & (1<<ADIF)));
    4fbc:	80 91 7a 00 	lds	r24, 0x007A
    4fc0:	84 ff       	sbrs	r24, 4
    4fc2:	fc cf       	rjmp	.-8      	; 0x4fbc <Measure+0x1c>
		sbi(ADCSRA, ADIF);
    4fc4:	80 91 7a 00 	lds	r24, 0x007A
    4fc8:	80 61       	ori	r24, 0x10	; 16
    4fca:	80 93 7a 00 	sts	0x007A, r24
		sum+=ADC;
    4fce:	80 91 78 00 	lds	r24, 0x0078
    4fd2:	90 91 79 00 	lds	r25, 0x0079
    4fd6:	28 0f       	add	r18, r24
    4fd8:	39 1f       	adc	r19, r25
    4fda:	41 50       	subi	r20, 0x01	; 1
    4fdc:	28 f7       	brcc	.-54     	; 0x4fa8 <Measure+0x8>
	}


	if(axis=='X'){//measuring TouchScreenValueX
    4fde:	58 35       	cpi	r21, 0x58	; 88
    4fe0:	51 f0       	breq	.+20     	; 0x4ff6 <Measure+0x56>
	
		TouchScreenValueX=sum/PRECISION;

	}else{		  //measuring TouchScreenValueY
	
		TouchScreenValueY=sum/PRECISION;
    4fe2:	c9 01       	movw	r24, r18
    4fe4:	65 e0       	ldi	r22, 0x05	; 5
    4fe6:	70 e0       	ldi	r23, 0x00	; 0
    4fe8:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    4fec:	70 93 78 10 	sts	0x1078, r23
    4ff0:	60 93 77 10 	sts	0x1077, r22
    4ff4:	08 95       	ret
	}


	if(axis=='X'){//measuring TouchScreenValueX
	
		TouchScreenValueX=sum/PRECISION;
    4ff6:	c9 01       	movw	r24, r18
    4ff8:	65 e0       	ldi	r22, 0x05	; 5
    4ffa:	70 e0       	ldi	r23, 0x00	; 0
    4ffc:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    5000:	70 93 7a 10 	sts	0x107A, r23
    5004:	60 93 79 10 	sts	0x1079, r22
    5008:	08 95       	ret

0000500a <TouchScreenMeasure>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TouchScreenMeasure(void){
    500a:	80 91 20 01 	lds	r24, 0x0120
    500e:	88 23       	and	r24, r24
    5010:	09 f4       	brne	.+2      	; 0x5014 <TouchScreenMeasure+0xa>
    5012:	08 95       	ret
//*****************************************************************************
void TouchScreenStop(void){
	
	//Disabling the Measure() function
	TouchScreenInitialized=0;
	cbi(ADCSRA, ADEN);
    5014:	80 91 7a 00 	lds	r24, 0x007A
    5018:	8f 77       	andi	r24, 0x7F	; 127
    501a:	80 93 7a 00 	sts	0x007A, r24
	if(axis=='X'){

		//axis = 'X'

		//Setting PORTF & PORTC5 for measuring the X axis
		mCat2(PORT,TSCR_PORT) &= (0xF8);
    501e:	81 b3       	in	r24, 0x11	; 17
    5020:	88 7f       	andi	r24, 0xF8	; 248
    5022:	81 bb       	out	0x11, r24	; 17
		PORTC &= ~(1<<PC5);
    5024:	45 98       	cbi	0x08, 5	; 8
		mCat2(PORT,TSCR_PORT) |= (0x05);
    5026:	81 b3       	in	r24, 0x11	; 17
    5028:	85 60       	ori	r24, 0x05	; 5
    502a:	81 bb       	out	0x11, r24	; 17
		PORTC |= (1<<PC5);
    502c:	45 9a       	sbi	0x08, 5	; 8

		//Setting DDRF & DDRC5 for measuring the X axis
		mCat2(DDR,TSCR_PORT) &= (0xF8);
    502e:	80 b3       	in	r24, 0x10	; 16
    5030:	88 7f       	andi	r24, 0xF8	; 248
    5032:	80 bb       	out	0x10, r24	; 16
		DDRC &= ~(1<<PC5);
    5034:	3d 98       	cbi	0x07, 5	; 7
		mCat2(DDR,TSCR_PORT) |= (0x03);
    5036:	80 b3       	in	r24, 0x10	; 16
    5038:	83 60       	ori	r24, 0x03	; 3
    503a:	80 bb       	out	0x10, r24	; 16

		//Clearing the channel selection bits
		ADMUX  &= ~(0x1F<<MUX0);
    503c:	80 91 7c 00 	lds	r24, 0x007C
    5040:	80 7e       	andi	r24, 0xE0	; 224
    5042:	80 93 7c 00 	sts	0x007C, r24

		//Setting ADC Channel 2
		sbi(ADMUX,MUX1);
    5046:	80 91 7c 00 	lds	r24, 0x007C
    504a:	82 60       	ori	r24, 0x02	; 2
    504c:	80 93 7c 00 	sts	0x007C, r24
//
//*****************************************************************************
void TouchScreenStart(void){

	//enable ADC measurement
	sbi(ADCSRA, ADEN);
    5050:	80 91 7a 00 	lds	r24, 0x007A
    5054:	80 68       	ori	r24, 0x80	; 128
    5056:	80 93 7a 00 	sts	0x007A, r24
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	45 e0       	ldi	r20, 0x05	; 5

	sum=0;

	//Real measurement
	for(i=0;i<PRECISION;i++){
		sbi(ADCSRA, ADSC);
    5060:	80 91 7a 00 	lds	r24, 0x007A
    5064:	80 64       	ori	r24, 0x40	; 64
    5066:	80 93 7a 00 	sts	0x007A, r24
		cbi(ADCSRA, ADATE);
    506a:	80 91 7a 00 	lds	r24, 0x007A
    506e:	8f 7d       	andi	r24, 0xDF	; 223
    5070:	80 93 7a 00 	sts	0x007A, r24
		
		while(!(ADCSRA & (1<<ADIF)));
    5074:	80 91 7a 00 	lds	r24, 0x007A
    5078:	84 ff       	sbrs	r24, 4
    507a:	fc cf       	rjmp	.-8      	; 0x5074 <TouchScreenMeasure+0x6a>
		sbi(ADCSRA, ADIF);
    507c:	80 91 7a 00 	lds	r24, 0x007A
    5080:	80 61       	ori	r24, 0x10	; 16
    5082:	80 93 7a 00 	sts	0x007A, r24
		sum+=ADC;
    5086:	80 91 78 00 	lds	r24, 0x0078
    508a:	90 91 79 00 	lds	r25, 0x0079
    508e:	28 0f       	add	r18, r24
    5090:	39 1f       	adc	r19, r25
    5092:	41 50       	subi	r20, 0x01	; 1
	U16 sum=0;

	sum=0;

	//Real measurement
	for(i=0;i<PRECISION;i++){
    5094:	29 f7       	brne	.-54     	; 0x5060 <TouchScreenMeasure+0x56>
	}


	if(axis=='X'){//measuring TouchScreenValueX
	
		TouchScreenValueX=sum/PRECISION;
    5096:	c9 01       	movw	r24, r18
    5098:	65 e0       	ldi	r22, 0x05	; 5
    509a:	70 e0       	ldi	r23, 0x00	; 0
    509c:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    50a0:	70 93 7a 10 	sts	0x107A, r23
    50a4:	60 93 79 10 	sts	0x1079, r22
//*****************************************************************************
void TouchScreenStop(void){
	
	//Disabling the Measure() function
	TouchScreenInitialized=0;
	cbi(ADCSRA, ADEN);
    50a8:	80 91 7a 00 	lds	r24, 0x007A
    50ac:	8f 77       	andi	r24, 0x7F	; 127
    50ae:	80 93 7a 00 	sts	0x007A, r24
	}else{
	
		//axis = 'Y'
		
		//Setting PORTF & PORTC5 for measuring the Y axis
		mCat2(PORT,TSCR_PORT) &= (0xF8);
    50b2:	81 b3       	in	r24, 0x11	; 17
    50b4:	88 7f       	andi	r24, 0xF8	; 248
    50b6:	81 bb       	out	0x11, r24	; 17
		mCat2(PORT,TSCR_PORT) |= (0x07);
    50b8:	81 b3       	in	r24, 0x11	; 17
    50ba:	87 60       	ori	r24, 0x07	; 7
    50bc:	81 bb       	out	0x11, r24	; 17
		PORTC &= ~(1<<PC5);
    50be:	45 98       	cbi	0x08, 5	; 8

		//Setting DDRF & DDRC5 for measuring the Y axis
		mCat2(DDR,TSCR_PORT) &= (0xF8);
    50c0:	80 b3       	in	r24, 0x10	; 16
    50c2:	88 7f       	andi	r24, 0xF8	; 248
    50c4:	80 bb       	out	0x10, r24	; 16
		mCat2(DDR,TSCR_PORT) |= (0x04);//0100
    50c6:	82 9a       	sbi	0x10, 2	; 16
		DDRC |= (1<<PC5);
    50c8:	3d 9a       	sbi	0x07, 5	; 7

		//Clearing the channel selection bits
		ADMUX  &= ~(0x1F<<MUX0); 
    50ca:	80 91 7c 00 	lds	r24, 0x007C
    50ce:	80 7e       	andi	r24, 0xE0	; 224
    50d0:	80 93 7c 00 	sts	0x007C, r24

		//Setting ADC Channel 0
		cbi(ADMUX, MUX0);
    50d4:	80 91 7c 00 	lds	r24, 0x007C
    50d8:	8e 7f       	andi	r24, 0xFE	; 254
    50da:	80 93 7c 00 	sts	0x007C, r24

		//Enabling the Measure() function
		TouchScreenInitialized=1;
    50de:	81 e0       	ldi	r24, 0x01	; 1
    50e0:	80 93 20 01 	sts	0x0120, r24
//
//*****************************************************************************
void TouchScreenStart(void){

	//enable ADC measurement
	sbi(ADCSRA, ADEN);
    50e4:	80 91 7a 00 	lds	r24, 0x007A
    50e8:	80 68       	ori	r24, 0x80	; 128
    50ea:	80 93 7a 00 	sts	0x007A, r24
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	44 e0       	ldi	r20, 0x04	; 4

	sum=0;

	//Real measurement
	for(i=0;i<PRECISION;i++){
		sbi(ADCSRA, ADSC);
    50f4:	80 91 7a 00 	lds	r24, 0x007A
    50f8:	80 64       	ori	r24, 0x40	; 64
    50fa:	80 93 7a 00 	sts	0x007A, r24
		cbi(ADCSRA, ADATE);
    50fe:	80 91 7a 00 	lds	r24, 0x007A
    5102:	8f 7d       	andi	r24, 0xDF	; 223
    5104:	80 93 7a 00 	sts	0x007A, r24
		
		while(!(ADCSRA & (1<<ADIF)));
    5108:	80 91 7a 00 	lds	r24, 0x007A
    510c:	84 ff       	sbrs	r24, 4
    510e:	fc cf       	rjmp	.-8      	; 0x5108 <TouchScreenMeasure+0xfe>
		sbi(ADCSRA, ADIF);
    5110:	80 91 7a 00 	lds	r24, 0x007A
    5114:	80 61       	ori	r24, 0x10	; 16
    5116:	80 93 7a 00 	sts	0x007A, r24
		sum+=ADC;
    511a:	80 91 78 00 	lds	r24, 0x0078
    511e:	90 91 79 00 	lds	r25, 0x0079
    5122:	28 0f       	add	r18, r24
    5124:	39 1f       	adc	r19, r25
    5126:	41 50       	subi	r20, 0x01	; 1
    5128:	28 f7       	brcc	.-54     	; 0x50f4 <TouchScreenMeasure+0xea>
	
		TouchScreenValueX=sum/PRECISION;

	}else{		  //measuring TouchScreenValueY
	
		TouchScreenValueY=sum/PRECISION;
    512a:	c9 01       	movw	r24, r18
    512c:	65 e0       	ldi	r22, 0x05	; 5
    512e:	70 e0       	ldi	r23, 0x00	; 0
    5130:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    5134:	70 93 78 10 	sts	0x1078, r23
    5138:	60 93 77 10 	sts	0x1077, r22
    513c:	08 95       	ret

0000513e <ClockInit>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void ClockInit		(void){
    513e:	10 92 82 10 	sts	0x1082, r1


	//init clock and calendar values
	hours = 0;
	minutes = 0;
    5142:	10 92 81 10 	sts	0x1081, r1
	seconds = 0;
    5146:	10 92 7c 10 	sts	0x107C, r1

	date = 1;
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	80 93 80 10 	sts	0x1080, r24
	month = 1;
    5150:	80 93 7b 10 	sts	0x107B, r24
	year = 0;
    5154:	10 92 7d 10 	sts	0x107D, r1

	day = 1;
    5158:	80 93 7e 10 	sts	0x107E, r24

	//init service variables
	ClockStarted = 0;
    515c:	10 92 21 01 	sts	0x0121, r1

	tobeAdjusted = 0;
    5160:	10 92 7f 10 	sts	0x107F, r1

}
    5164:	08 95       	ret

00005166 <ClockStart>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void ClockStart		(void){
    5166:	81 e0       	ldi	r24, 0x01	; 1
    5168:	80 93 21 01 	sts	0x0121, r24
	
	//Start Clock
	ClockStarted = 1;

}
    516c:	08 95       	ret

0000516e <ClockStop>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void ClockStop		(void){
    516e:	10 92 21 01 	sts	0x0121, r1

	//Stop Clock
	ClockStarted = 0;

}
    5172:	08 95       	ret

00005174 <EndOfMonth>:
//			  yearp  -> necessary for determining days count of Month 2
//
// Result   : End of the month
//
//*****************************************************************************
U8 EndOfMonth		(U8 monthp, U8 yearp){
    5174:	86 30       	cpi	r24, 0x06	; 6
    5176:	a9 f0       	breq	.+42     	; 0x51a2 <EndOfMonth+0x2e>
    5178:	87 30       	cpi	r24, 0x07	; 7
    517a:	50 f0       	brcs	.+20     	; 0x5190 <EndOfMonth+0x1c>
    517c:	89 30       	cpi	r24, 0x09	; 9
    517e:	89 f0       	breq	.+34     	; 0x51a2 <EndOfMonth+0x2e>
    5180:	89 30       	cpi	r24, 0x09	; 9
    5182:	20 f0       	brcs	.+8      	; 0x518c <EndOfMonth+0x18>
    5184:	8b 30       	cpi	r24, 0x0B	; 11
    5186:	69 f0       	breq	.+26     	; 0x51a2 <EndOfMonth+0x2e>
    5188:	8b 30       	cpi	r24, 0x0B	; 11
    518a:	d8 f4       	brcc	.+54     	; 0x51c2 <EndOfMonth+0x4e>
					return 28;//Not leap year
				break;
	}


    518c:	8f e1       	ldi	r24, 0x1F	; 31
    518e:	08 95       	ret
// Result   : End of the month
//
//*****************************************************************************
U8 EndOfMonth		(U8 monthp, U8 yearp){

	switch(monthp){
    5190:	83 30       	cpi	r24, 0x03	; 3
    5192:	e1 f3       	breq	.-8      	; 0x518c <EndOfMonth+0x18>
    5194:	84 30       	cpi	r24, 0x04	; 4
    5196:	38 f0       	brcs	.+14     	; 0x51a6 <EndOfMonth+0x32>
    5198:	84 30       	cpi	r24, 0x04	; 4
    519a:	19 f0       	breq	.+6      	; 0x51a2 <EndOfMonth+0x2e>
    519c:	85 30       	cpi	r24, 0x05	; 5
    519e:	b1 f3       	breq	.-20     	; 0x518c <EndOfMonth+0x18>
    51a0:	08 95       	ret
    51a2:	8e e1       	ldi	r24, 0x1E	; 30
    51a4:	08 95       	ret
    51a6:	81 30       	cpi	r24, 0x01	; 1
    51a8:	89 f3       	breq	.-30     	; 0x518c <EndOfMonth+0x18>
    51aa:	82 30       	cpi	r24, 0x02	; 2
    51ac:	c9 f7       	brne	.-14     	; 0x51a0 <EndOfMonth+0x2c>
		case 4:
		case 6:
		case 9:
		case 11: return 30;//months with 30 days
				break;
		case 2: if ((yearp & 0x03) == 0) //check for leap years
    51ae:	86 2f       	mov	r24, r22
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	83 70       	andi	r24, 0x03	; 3
    51b4:	90 70       	andi	r25, 0x00	; 0
    51b6:	89 2b       	or	r24, r25
    51b8:	11 f0       	breq	.+4      	; 0x51be <EndOfMonth+0x4a>
    51ba:	8c e1       	ldi	r24, 0x1C	; 28
    51bc:	08 95       	ret
    51be:	8d e1       	ldi	r24, 0x1D	; 29
    51c0:	08 95       	ret
// Result   : End of the month
//
//*****************************************************************************
U8 EndOfMonth		(U8 monthp, U8 yearp){

	switch(monthp){
    51c2:	8c 30       	cpi	r24, 0x0C	; 12
    51c4:	19 f3       	breq	.-58     	; 0x518c <EndOfMonth+0x18>
    51c6:	08 95       	ret

000051c8 <ClockTick>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void ClockTick		(void){
    51c8:	0f 93       	push	r16
    51ca:	1f 93       	push	r17
	
	if(ClockStarted != 0){
    51cc:	80 91 21 01 	lds	r24, 0x0121
    51d0:	88 23       	and	r24, r24
    51d2:	39 f0       	breq	.+14     	; 0x51e2 <ClockTick+0x1a>
		 if(seconds==59){
    51d4:	80 91 7c 10 	lds	r24, 0x107C
    51d8:	8b 33       	cpi	r24, 0x3B	; 59
    51da:	31 f0       	breq	.+12     	; 0x51e8 <ClockTick+0x20>

			 }

		 }else{

			 seconds++; 
    51dc:	8f 5f       	subi	r24, 0xFF	; 255
    51de:	80 93 7c 10 	sts	0x107C, r24
		}
	}
}
    51e2:	1f 91       	pop	r17
    51e4:	0f 91       	pop	r16
    51e6:	08 95       	ret
void ClockTick		(void){
	
	if(ClockStarted != 0){
		 if(seconds==59){
			
			 seconds = 0;
    51e8:	10 92 7c 10 	sts	0x107C, r1
			
			 if(minutes==59){
    51ec:	80 91 81 10 	lds	r24, 0x1081
    51f0:	8b 33       	cpi	r24, 0x3B	; 59
    51f2:	31 f0       	breq	.+12     	; 0x5200 <ClockTick+0x38>
				
					hours++;

			 }else{

				 minutes++;
    51f4:	8f 5f       	subi	r24, 0xFF	; 255
    51f6:	80 93 81 10 	sts	0x1081, r24
		 }else{

			 seconds++; 
		}
	}
}
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	08 95       	ret
			
			 seconds = 0;
			
			 if(minutes==59){
			
				 minutes = 0;
    5200:	10 92 81 10 	sts	0x1081, r1

				 if(hours == 23){
    5204:	80 91 82 10 	lds	r24, 0x1082
    5208:	87 31       	cpi	r24, 0x17	; 23
    520a:	21 f0       	breq	.+8      	; 0x5214 <ClockTick+0x4c>

						day++;

				}else
				
					hours++;
    520c:	8f 5f       	subi	r24, 0xFF	; 255
    520e:	80 93 82 10 	sts	0x1082, r24
    5212:	e7 cf       	rjmp	.-50     	; 0x51e2 <ClockTick+0x1a>
			
				 minutes = 0;

				 if(hours == 23){

					 hours=0;
    5214:	10 92 82 10 	sts	0x1082, r1
					
					if(date == EndOfMonth(month, year)){
    5218:	00 91 7d 10 	lds	r16, 0x107D
    521c:	10 91 7b 10 	lds	r17, 0x107B
    5220:	60 2f       	mov	r22, r16
    5222:	81 2f       	mov	r24, r17
    5224:	0e 94 ba 28 	call	0x5174	; 0x5174 <EndOfMonth>
    5228:	90 91 80 10 	lds	r25, 0x1080
    522c:	89 17       	cp	r24, r25
    522e:	59 f0       	breq	.+22     	; 0x5246 <ClockTick+0x7e>

							month++;

					}else
						
						date++;
    5230:	9f 5f       	subi	r25, 0xFF	; 255
    5232:	90 93 80 10 	sts	0x1080, r25
					
					if(day == 7)
    5236:	80 91 7e 10 	lds	r24, 0x107E
    523a:	87 30       	cpi	r24, 0x07	; 7
    523c:	69 f0       	breq	.+26     	; 0x5258 <ClockTick+0x90>
						
						day = 1;
				
					else

						day++;
    523e:	8f 5f       	subi	r24, 0xFF	; 255
    5240:	80 93 7e 10 	sts	0x107E, r24
    5244:	ce cf       	rjmp	.-100    	; 0x51e2 <ClockTick+0x1a>

					 hours=0;
					
					if(date == EndOfMonth(month, year)){
						
						date = 1;
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	80 93 80 10 	sts	0x1080, r24
						
						if(month == 12){
    524c:	1c 30       	cpi	r17, 0x0C	; 12
    524e:	41 f0       	breq	.+16     	; 0x5260 <ClockTick+0x98>

							year++;

						}else

							month++;
    5250:	1f 5f       	subi	r17, 0xFF	; 255
    5252:	10 93 7b 10 	sts	0x107B, r17
    5256:	ef cf       	rjmp	.-34     	; 0x5236 <ClockTick+0x6e>
						
						date++;
					
					if(day == 7)
						
						day = 1;
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	80 93 7e 10 	sts	0x107E, r24
    525e:	c1 cf       	rjmp	.-126    	; 0x51e2 <ClockTick+0x1a>
						
						date = 1;
						
						if(month == 12){

							month = 1;
    5260:	80 93 7b 10 	sts	0x107B, r24

							year++;
    5264:	0f 5f       	subi	r16, 0xFF	; 255
    5266:	00 93 7d 10 	sts	0x107D, r16
    526a:	e5 cf       	rjmp	.-54     	; 0x5236 <ClockTick+0x6e>

0000526c <InitADC>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void InitADC(){
    526c:	ec e7       	ldi	r30, 0x7C	; 124
    526e:	f0 e0       	ldi	r31, 0x00	; 0
    5270:	80 81       	ld	r24, Z
    5272:	8f 77       	andi	r24, 0x7F	; 127
    5274:	80 83       	st	Z, r24

		//Enabling AREF as reference voltage
		cbi(ADMUX,REFS1);
		cbi(ADMUX,REFS0);
    5276:	80 81       	ld	r24, Z
    5278:	8f 7b       	andi	r24, 0xBF	; 191
    527a:	80 83       	st	Z, r24

		//Clearing the channel selection bits
		ADMUX  &= ~(0x1F<<MUX0);
    527c:	80 81       	ld	r24, Z
    527e:	80 7e       	andi	r24, 0xE0	; 224
    5280:	80 83       	st	Z, r24
		
		//Selecting Channel
		ADMUX |= 0x03;
    5282:	80 81       	ld	r24, Z
    5284:	83 60       	ori	r24, 0x03	; 3
    5286:	80 83       	st	Z, r24


		//Clear Prescaler
		ADCSRA &= ~(0x07);
    5288:	ea e7       	ldi	r30, 0x7A	; 122
    528a:	f0 e0       	ldi	r31, 0x00	; 0
    528c:	80 81       	ld	r24, Z
    528e:	88 7f       	andi	r24, 0xF8	; 248
    5290:	80 83       	st	Z, r24
		
		//Select prescaler
		ADCSRA |= 0x07;
    5292:	80 81       	ld	r24, Z
    5294:	87 60       	ori	r24, 0x07	; 7
    5296:	80 83       	st	Z, r24

		//Init public variables
		FuelLevel = 0;
    5298:	10 92 8a 10 	sts	0x108A, r1
    529c:	10 92 89 10 	sts	0x1089, r1
		//Consumption = 0;
		//Consumption_Dec = 0;
		Range = 0;
    52a0:	10 92 88 10 	sts	0x1088, r1
    52a4:	10 92 87 10 	sts	0x1087, r1


}
    52a8:	08 95       	ret

000052aa <MeasureADC>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void MeasureADC(){
    52aa:	80 91 7a 00 	lds	r24, 0x007A
    52ae:	80 68       	ori	r24, 0x80	; 128
    52b0:	80 93 7a 00 	sts	0x007A, r24
	U8 i;
	U16 sum=0;

	//starting
	sbi(ADCSRA, ADEN);
	sbi(ADCSRA, ADSC);
    52b4:	80 91 7a 00 	lds	r24, 0x007A
    52b8:	80 64       	ori	r24, 0x40	; 64
    52ba:	80 93 7a 00 	sts	0x007A, r24
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	42 e0       	ldi	r20, 0x02	; 2

	//Real measurement - ADC_PRECISION times
	for(i=0;i<ADC_PRECISION;i++){
		sbi(ADCSRA, ADSC);
    52c4:	80 91 7a 00 	lds	r24, 0x007A
    52c8:	80 64       	ori	r24, 0x40	; 64
    52ca:	80 93 7a 00 	sts	0x007A, r24
		cbi(ADCSRA, ADATE);
    52ce:	80 91 7a 00 	lds	r24, 0x007A
    52d2:	8f 7d       	andi	r24, 0xDF	; 223
    52d4:	80 93 7a 00 	sts	0x007A, r24
	
		while(!(ADCSRA & (1<<ADIF)));
    52d8:	80 91 7a 00 	lds	r24, 0x007A
    52dc:	84 ff       	sbrs	r24, 4
    52de:	fc cf       	rjmp	.-8      	; 0x52d8 <MeasureADC+0x2e>
		sbi(ADCSRA, ADIF);
    52e0:	80 91 7a 00 	lds	r24, 0x007A
    52e4:	80 61       	ori	r24, 0x10	; 16
    52e6:	80 93 7a 00 	sts	0x007A, r24
		sum+=ADC;
    52ea:	80 91 78 00 	lds	r24, 0x0078
    52ee:	90 91 79 00 	lds	r25, 0x0079
    52f2:	28 0f       	add	r18, r24
    52f4:	39 1f       	adc	r19, r25
    52f6:	41 50       	subi	r20, 0x01	; 1
	//starting
	sbi(ADCSRA, ADEN);
	sbi(ADCSRA, ADSC);

	//Real measurement - ADC_PRECISION times
	for(i=0;i<ADC_PRECISION;i++){
    52f8:	29 f7       	brne	.-54     	; 0x52c4 <MeasureADC+0x1a>
		sbi(ADCSRA, ADIF);
		sum+=ADC;
		}

	//Finding average value of the measurement anad assign it to FuelLevel
	if((((sum/ADC_PRECISION/10)*135)/10) >1050)
    52fa:	c9 01       	movw	r24, r18
    52fc:	64 e1       	ldi	r22, 0x14	; 20
    52fe:	70 e0       	ldi	r23, 0x00	; 0
    5300:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    5304:	87 e8       	ldi	r24, 0x87	; 135
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	68 9f       	mul	r22, r24
    530a:	90 01       	movw	r18, r0
    530c:	69 9f       	mul	r22, r25
    530e:	30 0d       	add	r19, r0
    5310:	78 9f       	mul	r23, r24
    5312:	30 0d       	add	r19, r0
    5314:	11 24       	eor	r1, r1
    5316:	89 e2       	ldi	r24, 0x29	; 41
    5318:	2e 30       	cpi	r18, 0x0E	; 14
    531a:	38 07       	cpc	r19, r24
    531c:	58 f0       	brcs	.+22     	; 0x5334 <MeasureADC+0x8a>
		FuelLevel = 1050;
    531e:	8a e1       	ldi	r24, 0x1A	; 26
    5320:	94 e0       	ldi	r25, 0x04	; 4
    5322:	90 93 8a 10 	sts	0x108A, r25
    5326:	80 93 89 10 	sts	0x1089, r24
	else
		FuelLevel = ((sum/ADC_PRECISION/10)*135)/10;

	//convert FuelLevel to percent mode
	if(FuelMode == PERC_MODE)
    532a:	80 91 86 10 	lds	r24, 0x1086
    532e:	81 30       	cpi	r24, 0x01	; 1
    5330:	71 f0       	breq	.+28     	; 0x534e <MeasureADC+0xa4>
    5332:	08 95       	ret

	//Finding average value of the measurement anad assign it to FuelLevel
	if((((sum/ADC_PRECISION/10)*135)/10) >1050)
		FuelLevel = 1050;
	else
		FuelLevel = ((sum/ADC_PRECISION/10)*135)/10;
    5334:	c9 01       	movw	r24, r18
    5336:	6a e0       	ldi	r22, 0x0A	; 10
    5338:	70 e0       	ldi	r23, 0x00	; 0
    533a:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    533e:	70 93 8a 10 	sts	0x108A, r23
    5342:	60 93 89 10 	sts	0x1089, r22

	//convert FuelLevel to percent mode
	if(FuelMode == PERC_MODE)
    5346:	80 91 86 10 	lds	r24, 0x1086
    534a:	81 30       	cpi	r24, 0x01	; 1
    534c:	91 f7       	brne	.-28     	; 0x5332 <MeasureADC+0x88>
		FuelLevel = (FuelLevel*10/(TANK_CAP/10));
    534e:	80 91 89 10 	lds	r24, 0x1089
    5352:	90 91 8a 10 	lds	r25, 0x108A
    5356:	9c 01       	movw	r18, r24
    5358:	22 0f       	add	r18, r18
    535a:	33 1f       	adc	r19, r19
    535c:	22 0f       	add	r18, r18
    535e:	33 1f       	adc	r19, r19
    5360:	22 0f       	add	r18, r18
    5362:	33 1f       	adc	r19, r19
    5364:	88 0f       	add	r24, r24
    5366:	99 1f       	adc	r25, r25
    5368:	82 0f       	add	r24, r18
    536a:	93 1f       	adc	r25, r19
    536c:	69 e6       	ldi	r22, 0x69	; 105
    536e:	70 e0       	ldi	r23, 0x00	; 0
    5370:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    5374:	70 93 8a 10 	sts	0x108A, r23
    5378:	60 93 89 10 	sts	0x1089, r22
    537c:	08 95       	ret

0000537e <DetermineConsumption>:

}

void DetermineConsumption(U16 tick_count, U8 dist){
    537e:	9c 01       	movw	r18, r24
    5380:	6f 36       	cpi	r22, 0x6F	; 111
    5382:	08 f0       	brcs	.+2      	; 0x5386 <DetermineConsumption+0x8>
    5384:	6e e6       	ldi	r22, 0x6E	; 110

	if(dist > 110) dist = 110;

	if(tick_count<60) tick_count = 0;
    5386:	2c 33       	cpi	r18, 0x3C	; 60
    5388:	31 05       	cpc	r19, r1
    538a:	10 f4       	brcc	.+4      	; 0x5390 <DetermineConsumption+0x12>
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	30 e0       	ldi	r19, 0x00	; 0

	if(dist<7) dist = 0;
    5390:	67 30       	cpi	r22, 0x07	; 7
    5392:	08 f4       	brcc	.+2      	; 0x5396 <DetermineConsumption+0x18>
    5394:	53 c0       	rjmp	.+166    	; 0x543c <DetermineConsumption+0xbe>

	if(dist == 0)
		Consumption = 0;
	else 
		Consumption = ((tick_count*10)/dist);
    5396:	c9 01       	movw	r24, r18
    5398:	88 0f       	add	r24, r24
    539a:	99 1f       	adc	r25, r25
    539c:	88 0f       	add	r24, r24
    539e:	99 1f       	adc	r25, r25
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	22 0f       	add	r18, r18
    53a6:	33 1f       	adc	r19, r19
    53a8:	82 0f       	add	r24, r18
    53aa:	93 1f       	adc	r25, r19
    53ac:	70 e0       	ldi	r23, 0x00	; 0
    53ae:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    53b2:	fb 01       	movw	r30, r22

	if(Consumption > 990)
    53b4:	23 e0       	ldi	r18, 0x03	; 3
    53b6:	6f 3d       	cpi	r22, 0xDF	; 223
    53b8:	72 07       	cpc	r23, r18
    53ba:	e8 f1       	brcs	.+122    	; 0x5436 <DetermineConsumption+0xb8>
		Consumption = 999;
    53bc:	e7 ee       	ldi	r30, 0xE7	; 231
    53be:	f3 e0       	ldi	r31, 0x03	; 3

	if(Consumption == 0)
		Range = 0;
	else
		Range = ((FuelLevel*10)/Consumption)*100;
    53c0:	80 91 89 10 	lds	r24, 0x1089
    53c4:	90 91 8a 10 	lds	r25, 0x108A
    53c8:	9c 01       	movw	r18, r24
    53ca:	22 0f       	add	r18, r18
    53cc:	33 1f       	adc	r19, r19
    53ce:	22 0f       	add	r18, r18
    53d0:	33 1f       	adc	r19, r19
    53d2:	22 0f       	add	r18, r18
    53d4:	33 1f       	adc	r19, r19
    53d6:	88 0f       	add	r24, r24
    53d8:	99 1f       	adc	r25, r25
    53da:	82 0f       	add	r24, r18
    53dc:	93 1f       	adc	r25, r19
    53de:	bf 01       	movw	r22, r30
    53e0:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    53e4:	84 e6       	ldi	r24, 0x64	; 100
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	9c 01       	movw	r18, r24
    53ea:	62 9f       	mul	r22, r18
    53ec:	c0 01       	movw	r24, r0
    53ee:	63 9f       	mul	r22, r19
    53f0:	90 0d       	add	r25, r0
    53f2:	72 9f       	mul	r23, r18
    53f4:	90 0d       	add	r25, r0
    53f6:	11 24       	eor	r1, r1
    53f8:	90 93 88 10 	sts	0x1088, r25
    53fc:	80 93 87 10 	sts	0x1087, r24

	if(Range > 9999)
    5400:	80 51       	subi	r24, 0x10	; 16
    5402:	97 42       	sbci	r25, 0x27	; 39
    5404:	30 f0       	brcs	.+12     	; 0x5412 <DetermineConsumption+0x94>
		Range = 9999;
    5406:	8f e0       	ldi	r24, 0x0F	; 15
    5408:	97 e2       	ldi	r25, 0x27	; 39
    540a:	90 93 88 10 	sts	0x1088, r25
    540e:	80 93 87 10 	sts	0x1087, r24
    5412:	cf 01       	movw	r24, r30
    5414:	6a e0       	ldi	r22, 0x0A	; 10
    5416:	70 e0       	ldi	r23, 0x00	; 0
    5418:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    541c:	9b 01       	movw	r18, r22
    541e:	cb 01       	movw	r24, r22
    5420:	6a e0       	ldi	r22, 0x0A	; 10
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>

	//XX.
	Consumption = Consumption/10;
    5428:	30 93 85 10 	sts	0x1085, r19
    542c:	20 93 84 10 	sts	0x1084, r18

	//.X
	Consumption_Dec = Consumption%10;
    5430:	80 93 83 10 	sts	0x1083, r24
    5434:	08 95       	ret
		Consumption = ((tick_count*10)/dist);

	if(Consumption > 990)
		Consumption = 999;

	if(Consumption == 0)
    5436:	61 15       	cp	r22, r1
    5438:	71 05       	cpc	r23, r1
    543a:	11 f6       	brne	.-124    	; 0x53c0 <DetermineConsumption+0x42>
		Range = 0;
    543c:	10 92 88 10 	sts	0x1088, r1
    5440:	10 92 87 10 	sts	0x1087, r1
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	30 e0       	ldi	r19, 0x00	; 0
    5448:	80 e0       	ldi	r24, 0x00	; 0

	if(Range > 9999)
		Range = 9999;

	//XX.
	Consumption = Consumption/10;
    544a:	30 93 85 10 	sts	0x1085, r19
    544e:	20 93 84 10 	sts	0x1084, r18

	//.X
	Consumption_Dec = Consumption%10;
    5452:	80 93 83 10 	sts	0x1083, r24
    5456:	08 95       	ret

00005458 <TWIInit>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TWIInit(void){
    5458:	82 e1       	ldi	r24, 0x12	; 18
    545a:	80 93 b8 00 	sts	0x00B8, r24

	//Setting Bit Rate - 18
	TWBR = 18;

	//Enabling TWI
	sbi(TWCR, TWEN);
    545e:	ec eb       	ldi	r30, 0xBC	; 188
    5460:	f0 e0       	ldi	r31, 0x00	; 0
    5462:	80 81       	ld	r24, Z
    5464:	84 60       	ori	r24, 0x04	; 4
    5466:	80 83       	st	Z, r24
	
	//Enbaling TWI interrupt
	sbi(TWCR, TWIE);
    5468:	80 81       	ld	r24, Z
    546a:	81 60       	ori	r24, 0x01	; 1
    546c:	80 83       	st	Z, r24
	
}
    546e:	08 95       	ret

00005470 <TWIStart>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TWIStart(void){
    5470:	10 92 8b 10 	sts	0x108B, r1

	TWIStopped = 0;

	//Send START condition
	sbi(TWCR, TWSTA);
    5474:	ec eb       	ldi	r30, 0xBC	; 188
    5476:	f0 e0       	ldi	r31, 0x00	; 0
    5478:	80 81       	ld	r24, Z
    547a:	80 62       	ori	r24, 0x20	; 32
    547c:	80 83       	st	Z, r24
	sbi(TWCR, TWINT);
    547e:	80 81       	ld	r24, Z
    5480:	80 68       	ori	r24, 0x80	; 128
    5482:	80 83       	st	Z, r24
}
    5484:	08 95       	ret

00005486 <TWIStop>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void TWIStop(void){
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	80 93 8b 10 	sts	0x108B, r24
	
	TWIStopped = 1;
	
	//Send STOP condition
	sbi(TWCR, TWSTO);
    548c:	ec eb       	ldi	r30, 0xBC	; 188
    548e:	f0 e0       	ldi	r31, 0x00	; 0
    5490:	80 81       	ld	r24, Z
    5492:	80 61       	ori	r24, 0x10	; 16
    5494:	80 83       	st	Z, r24
	cbi(TWCR, TWSTA);
    5496:	80 81       	ld	r24, Z
    5498:	8f 7d       	andi	r24, 0xDF	; 223
    549a:	80 83       	st	Z, r24
	sbi(TWCR, TWINT);
    549c:	80 81       	ld	r24, Z
    549e:	80 68       	ori	r24, 0x80	; 128
    54a0:	80 83       	st	Z, r24
}
    54a2:	08 95       	ret

000054a4 <TWISLA>:
// Arguments: sla_byte -> address of slave + R/W
//
// Result   : none
//
//*****************************************************************************
void TWISLA(U8 sla_byte){
    54a4:	80 93 bb 00 	sts	0x00BB, r24

	//Write Address + R/W bit into TWI DAta Register
	TWDR = sla_byte;

	//Send the byte through TWI bus
	sbi(TWCR, TWINT);
    54a8:	ec eb       	ldi	r30, 0xBC	; 188
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	80 81       	ld	r24, Z
    54ae:	80 68       	ori	r24, 0x80	; 128
    54b0:	80 83       	st	Z, r24
}
    54b2:	08 95       	ret

000054b4 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    54b4:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
    54b6:	f9 99       	sbic	0x1f, 1	; 31
    54b8:	fe cf       	rjmp	.-4      	; 0x54b6 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    54ba:	32 bd       	out	0x22, r19	; 34
    54bc:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    54be:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    54c0:	80 b5       	in	r24, 0x20	; 32
}
    54c2:	08 95       	ret

000054c4 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    54c4:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
    54c6:	f9 99       	sbic	0x1f, 1	; 31
    54c8:	fe cf       	rjmp	.-4      	; 0x54c6 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    54ca:	32 bd       	out	0x22, r19	; 34
    54cc:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    54ce:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
    54d0:	0f b6       	in	r0, 0x3f	; 63
    54d2:	f8 94       	cli
    54d4:	fa 9a       	sbi	0x1f, 2	; 31
    54d6:	f9 9a       	sbi	0x1f, 1	; 31
    54d8:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
    54da:	08 95       	ret

000054dc <DetermineGear>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void DetermineGear(void){
    54dc:	0f 93       	push	r16
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
	
	U8 i = 0;

	if((Speed >= 2) && (GearType != NEUTRAL_GEAR)){		//Speed less than 2 km/h is impossible
    54e4:	80 91 8d 10 	lds	r24, 0x108D
    54e8:	82 30       	cpi	r24, 0x02	; 2
    54ea:	08 f4       	brcc	.+2      	; 0x54ee <DetermineGear+0x12>
    54ec:	50 c0       	rjmp	.+160    	; 0x558e <DetermineGear+0xb2>
    54ee:	20 91 92 10 	lds	r18, 0x1092
    54f2:	22 30       	cpi	r18, 0x02	; 2
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <DetermineGear+0x1c>
    54f6:	4b c0       	rjmp	.+150    	; 0x558e <DetermineGear+0xb2>

		if(GearType == FORWARD_GEAR)	//Forward Gear (these tables to be used)
    54f8:	22 23       	and	r18, r18
    54fa:	09 f0       	breq	.+2      	; 0x54fe <DetermineGear+0x22>
    54fc:	4f c0       	rjmp	.+158    	; 0x559c <DetermineGear+0xc0>

			for(i=0; i<(pgm_read_word(&GearIndex[Speed-1]) - pgm_read_word(&GearIndex[Speed-2])); i++){
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	88 0f       	add	r24, r24
    5502:	99 1f       	adc	r25, r25
    5504:	8c 01       	movw	r16, r24
    5506:	08 59       	subi	r16, 0x98	; 152
    5508:	12 4d       	sbci	r17, 0xD2	; 210
    550a:	f8 01       	movw	r30, r16
    550c:	25 91       	lpm	r18, Z+
    550e:	34 91       	lpm	r19, Z+
    5510:	ac 01       	movw	r20, r24
    5512:	4a 59       	subi	r20, 0x9A	; 154
    5514:	52 4d       	sbci	r21, 0xD2	; 210
    5516:	fa 01       	movw	r30, r20
    5518:	85 91       	lpm	r24, Z+
    551a:	94 91       	lpm	r25, Z+
    551c:	28 17       	cp	r18, r24
    551e:	39 07       	cpc	r19, r25
    5520:	09 f4       	brne	.+2      	; 0x5524 <DetermineGear+0x48>
    5522:	37 c0       	rjmp	.+110    	; 0x5592 <DetermineGear+0xb6>
			
				if((RPM >= pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][LEFTLIMIT])) && (RPM <=pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][RIGHTLIMIT]))){
    5524:	a0 91 94 10 	lds	r26, 0x1094
    5528:	b0 91 95 10 	lds	r27, 0x1095
    552c:	60 e0       	ldi	r22, 0x00	; 0
    552e:	80 e0       	ldi	r24, 0x00	; 0
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	fa 01       	movw	r30, r20
    5534:	c5 91       	lpm	r28, Z+
    5536:	d4 91       	lpm	r29, Z+

	if((Speed >= 2) && (GearType != NEUTRAL_GEAR)){		//Speed less than 2 km/h is impossible

		if(GearType == FORWARD_GEAR)	//Forward Gear (these tables to be used)

			for(i=0; i<(pgm_read_word(&GearIndex[Speed-1]) - pgm_read_word(&GearIndex[Speed-2])); i++){
    5538:	f8 01       	movw	r30, r16
    553a:	45 91       	lpm	r20, Z+
    553c:	54 91       	lpm	r21, Z+
    553e:	4c 1b       	sub	r20, r28
    5540:	5d 0b       	sbc	r21, r29
			
				if((RPM >= pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][LEFTLIMIT])) && (RPM <=pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][RIGHTLIMIT]))){
    5542:	9c 01       	movw	r18, r24
    5544:	2c 0f       	add	r18, r28
    5546:	3d 1f       	adc	r19, r29
    5548:	f9 01       	movw	r30, r18
    554a:	ee 0f       	add	r30, r30
    554c:	ff 1f       	adc	r31, r31
    554e:	ee 0f       	add	r30, r30
    5550:	ff 1f       	adc	r31, r31
    5552:	ee 0f       	add	r30, r30
    5554:	ff 1f       	adc	r31, r31
    5556:	e0 5f       	subi	r30, 0xF0	; 240
    5558:	f2 4e       	sbci	r31, 0xE2	; 226
    555a:	85 91       	lpm	r24, Z+
    555c:	94 91       	lpm	r25, Z+
    555e:	a8 17       	cp	r26, r24
    5560:	b9 07       	cpc	r27, r25
    5562:	78 f0       	brcs	.+30     	; 0x5582 <DetermineGear+0xa6>
    5564:	f9 01       	movw	r30, r18
    5566:	ee 0f       	add	r30, r30
    5568:	ff 1f       	adc	r31, r31
    556a:	ee 0f       	add	r30, r30
    556c:	ff 1f       	adc	r31, r31
    556e:	ee 0f       	add	r30, r30
    5570:	ff 1f       	adc	r31, r31
    5572:	e2 5f       	subi	r30, 0xF2	; 242
    5574:	f2 4e       	sbci	r31, 0xE2	; 226
    5576:	85 91       	lpm	r24, Z+
    5578:	94 91       	lpm	r25, Z+
    557a:	8a 17       	cp	r24, r26
    557c:	9b 07       	cpc	r25, r27
    557e:	08 f0       	brcs	.+2      	; 0x5582 <DetermineGear+0xa6>
    5580:	56 c0       	rjmp	.+172    	; 0x562e <DetermineGear+0x152>

	if((Speed >= 2) && (GearType != NEUTRAL_GEAR)){		//Speed less than 2 km/h is impossible

		if(GearType == FORWARD_GEAR)	//Forward Gear (these tables to be used)

			for(i=0; i<(pgm_read_word(&GearIndex[Speed-1]) - pgm_read_word(&GearIndex[Speed-2])); i++){
    5582:	6f 5f       	subi	r22, 0xFF	; 255
    5584:	86 2f       	mov	r24, r22
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	84 17       	cp	r24, r20
    558a:	95 07       	cpc	r25, r21
    558c:	d0 f2       	brcs	.-76     	; 0x5542 <DetermineGear+0x66>
					}else Gear = 0; //If no gear was found - return neutral gear 
				}
			}else	Gear = 0;

	}else 
		Gear = 0;	//If Speed is less than 2 km/h - neutral gear
    558e:	10 92 93 10 	sts	0x1093, r1
}
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	1f 91       	pop	r17
    5598:	0f 91       	pop	r16
    559a:	08 95       	ret
					//Return determined gear
					Gear = (U8)(pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][GEAR]));
					break;
				}else Gear = 0;	//If no gear was found - return neutral gear 
			}
		else if(Speed <= 10){							//Reverse Gear (these tables to be used)
    559c:	8b 30       	cpi	r24, 0x0B	; 11
    559e:	b8 f7       	brcc	.-18     	; 0x558e <DetermineGear+0xb2>
				for(i=0; i<(pgm_read_word(&GearIndexR[Speed-1]) - pgm_read_word(&GearIndexR[Speed-2])); i++){
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	88 0f       	add	r24, r24
    55a4:	99 1f       	adc	r25, r25
    55a6:	8c 01       	movw	r16, r24
    55a8:	0c 56       	subi	r16, 0x6C	; 108
    55aa:	11 4d       	sbci	r17, 0xD1	; 209
    55ac:	f8 01       	movw	r30, r16
    55ae:	25 91       	lpm	r18, Z+
    55b0:	34 91       	lpm	r19, Z+
    55b2:	ac 01       	movw	r20, r24
    55b4:	4e 56       	subi	r20, 0x6E	; 110
    55b6:	51 4d       	sbci	r21, 0xD1	; 209
    55b8:	fa 01       	movw	r30, r20
    55ba:	85 91       	lpm	r24, Z+
    55bc:	94 91       	lpm	r25, Z+
    55be:	82 17       	cp	r24, r18
    55c0:	93 07       	cpc	r25, r19
    55c2:	39 f3       	breq	.-50     	; 0x5592 <DetermineGear+0xb6>
				
					if((RPM >= pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][LEFTLIMIT])) && (RPM <=pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][RIGHTLIMIT]))){
    55c4:	a0 91 94 10 	lds	r26, 0x1094
    55c8:	b0 91 95 10 	lds	r27, 0x1095
    55cc:	60 e0       	ldi	r22, 0x00	; 0
    55ce:	80 e0       	ldi	r24, 0x00	; 0
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	fa 01       	movw	r30, r20
    55d4:	c5 91       	lpm	r28, Z+
    55d6:	d4 91       	lpm	r29, Z+
					Gear = (U8)(pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][GEAR]));
					break;
				}else Gear = 0;	//If no gear was found - return neutral gear 
			}
		else if(Speed <= 10){							//Reverse Gear (these tables to be used)
				for(i=0; i<(pgm_read_word(&GearIndexR[Speed-1]) - pgm_read_word(&GearIndexR[Speed-2])); i++){
    55d8:	f8 01       	movw	r30, r16
    55da:	45 91       	lpm	r20, Z+
    55dc:	54 91       	lpm	r21, Z+
    55de:	4c 1b       	sub	r20, r28
    55e0:	5d 0b       	sbc	r21, r29
				
					if((RPM >= pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][LEFTLIMIT])) && (RPM <=pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][RIGHTLIMIT]))){
    55e2:	9e 01       	movw	r18, r28
    55e4:	28 0f       	add	r18, r24
    55e6:	39 1f       	adc	r19, r25
    55e8:	f9 01       	movw	r30, r18
    55ea:	ee 0f       	add	r30, r30
    55ec:	ff 1f       	adc	r31, r31
    55ee:	ee 0f       	add	r30, r30
    55f0:	ff 1f       	adc	r31, r31
    55f2:	ee 0f       	add	r30, r30
    55f4:	ff 1f       	adc	r31, r31
    55f6:	ec 5d       	subi	r30, 0xDC	; 220
    55f8:	f1 4d       	sbci	r31, 0xD1	; 209
    55fa:	85 91       	lpm	r24, Z+
    55fc:	94 91       	lpm	r25, Z+
    55fe:	a8 17       	cp	r26, r24
    5600:	b9 07       	cpc	r27, r25
    5602:	70 f0       	brcs	.+28     	; 0x5620 <DetermineGear+0x144>
    5604:	f9 01       	movw	r30, r18
    5606:	ee 0f       	add	r30, r30
    5608:	ff 1f       	adc	r31, r31
    560a:	ee 0f       	add	r30, r30
    560c:	ff 1f       	adc	r31, r31
    560e:	ee 0f       	add	r30, r30
    5610:	ff 1f       	adc	r31, r31
    5612:	ee 5d       	subi	r30, 0xDE	; 222
    5614:	f1 4d       	sbci	r31, 0xD1	; 209
    5616:	85 91       	lpm	r24, Z+
    5618:	94 91       	lpm	r25, Z+
    561a:	8a 17       	cp	r24, r26
    561c:	9b 07       	cpc	r25, r27
    561e:	a8 f4       	brcc	.+42     	; 0x564a <DetermineGear+0x16e>
					Gear = (U8)(pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][GEAR]));
					break;
				}else Gear = 0;	//If no gear was found - return neutral gear 
			}
		else if(Speed <= 10){							//Reverse Gear (these tables to be used)
				for(i=0; i<(pgm_read_word(&GearIndexR[Speed-1]) - pgm_read_word(&GearIndexR[Speed-2])); i++){
    5620:	6f 5f       	subi	r22, 0xFF	; 255
    5622:	86 2f       	mov	r24, r22
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	84 17       	cp	r24, r20
    5628:	95 07       	cpc	r25, r21
    562a:	d8 f2       	brcs	.-74     	; 0x55e2 <DetermineGear+0x106>
    562c:	b0 cf       	rjmp	.-160    	; 0x558e <DetermineGear+0xb2>

			for(i=0; i<(pgm_read_word(&GearIndex[Speed-1]) - pgm_read_word(&GearIndex[Speed-2])); i++){
			
				if((RPM >= pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][LEFTLIMIT])) && (RPM <=pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][RIGHTLIMIT]))){
					//Return determined gear
					Gear = (U8)(pgm_read_word(&GearLimits[pgm_read_word(&GearIndex[Speed-2])+i][GEAR]));
    562e:	f9 01       	movw	r30, r18
    5630:	ee 0f       	add	r30, r30
    5632:	ff 1f       	adc	r31, r31
    5634:	ee 0f       	add	r30, r30
    5636:	ff 1f       	adc	r31, r31
    5638:	ee 0f       	add	r30, r30
    563a:	ff 1f       	adc	r31, r31
    563c:	e4 5f       	subi	r30, 0xF4	; 244
    563e:	f2 4e       	sbci	r31, 0xE2	; 226
    5640:	85 91       	lpm	r24, Z+
    5642:	94 91       	lpm	r25, Z+
    5644:	80 93 93 10 	sts	0x1093, r24
    5648:	a4 cf       	rjmp	.-184    	; 0x5592 <DetermineGear+0xb6>
		else if(Speed <= 10){							//Reverse Gear (these tables to be used)
				for(i=0; i<(pgm_read_word(&GearIndexR[Speed-1]) - pgm_read_word(&GearIndexR[Speed-2])); i++){
				
					if((RPM >= pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][LEFTLIMIT])) && (RPM <=pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][RIGHTLIMIT]))){
						//Return determined gear
						Gear = (U8)(pgm_read_word(&GearLimitsR[pgm_read_word(&GearIndexR[Speed-2])+i][GEAR]));
    564a:	f9 01       	movw	r30, r18
    564c:	ee 0f       	add	r30, r30
    564e:	ff 1f       	adc	r31, r31
    5650:	ee 0f       	add	r30, r30
    5652:	ff 1f       	adc	r31, r31
    5654:	ee 0f       	add	r30, r30
    5656:	ff 1f       	adc	r31, r31
    5658:	e0 5e       	subi	r30, 0xE0	; 224
    565a:	f1 4d       	sbci	r31, 0xD1	; 209
    565c:	85 91       	lpm	r24, Z+
    565e:	94 91       	lpm	r25, Z+
    5660:	80 93 93 10 	sts	0x1093, r24
    5664:	96 cf       	rjmp	.-212    	; 0x5592 <DetermineGear+0xb6>

00005666 <DetermineSpeed>:
	}else 
		Gear = 0;	//If Speed is less than 2 km/h - neutral gear
}


void DetermineSpeed(U16 tick_count){
    5666:	9c 01       	movw	r18, r24
    5668:	87 31       	cpi	r24, 0x17	; 23
    566a:	91 05       	cpc	r25, r1
    566c:	10 f0       	brcs	.+4      	; 0x5672 <DetermineSpeed+0xc>
    566e:	26 e1       	ldi	r18, 0x16	; 22
    5670:	30 e0       	ldi	r19, 0x00	; 0

	if(tick_count > 22)
		tick_count = 22;
	
	Speed = (tick_count*5*100)/122;
    5672:	84 ef       	ldi	r24, 0xF4	; 244
    5674:	91 e0       	ldi	r25, 0x01	; 1
    5676:	ac 01       	movw	r20, r24
    5678:	24 9f       	mul	r18, r20
    567a:	c0 01       	movw	r24, r0
    567c:	25 9f       	mul	r18, r21
    567e:	90 0d       	add	r25, r0
    5680:	34 9f       	mul	r19, r20
    5682:	90 0d       	add	r25, r0
    5684:	11 24       	eor	r1, r1
    5686:	6a e7       	ldi	r22, 0x7A	; 122
    5688:	70 e0       	ldi	r23, 0x00	; 0
    568a:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    568e:	60 93 8d 10 	sts	0x108D, r22

	Distance += (tick_count*1000/4414);
    5692:	88 ee       	ldi	r24, 0xE8	; 232
    5694:	93 e0       	ldi	r25, 0x03	; 3
    5696:	ac 01       	movw	r20, r24
    5698:	24 9f       	mul	r18, r20
    569a:	c0 01       	movw	r24, r0
    569c:	25 9f       	mul	r18, r21
    569e:	90 0d       	add	r25, r0
    56a0:	34 9f       	mul	r19, r20
    56a2:	90 0d       	add	r25, r0
    56a4:	11 24       	eor	r1, r1
    56a6:	6e e3       	ldi	r22, 0x3E	; 62
    56a8:	71 e1       	ldi	r23, 0x11	; 17
    56aa:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodhi4>
    56ae:	80 91 8e 10 	lds	r24, 0x108E
    56b2:	90 91 8f 10 	lds	r25, 0x108F
    56b6:	86 0f       	add	r24, r22
    56b8:	97 1f       	adc	r25, r23
    56ba:	90 93 8f 10 	sts	0x108F, r25
    56be:	80 93 8e 10 	sts	0x108E, r24
	Trip += (tick_count*1000/4414);
    56c2:	80 91 96 10 	lds	r24, 0x1096
    56c6:	90 91 97 10 	lds	r25, 0x1097
    56ca:	86 0f       	add	r24, r22
    56cc:	97 1f       	adc	r25, r23
    56ce:	90 93 97 10 	sts	0x1097, r25
    56d2:	80 93 96 10 	sts	0x1096, r24

}
    56d6:	08 95       	ret

000056d8 <DetermineRPM>:

void DetermineRPM(U16 tick_count){
    56d8:	96 95       	lsr	r25
    56da:	87 95       	ror	r24
    56dc:	90 93 95 10 	sts	0x1095, r25
    56e0:	80 93 94 10 	sts	0x1094, r24

	RPM = tick_count/2;

	if(RPM<500)
    56e4:	21 e0       	ldi	r18, 0x01	; 1
    56e6:	84 3f       	cpi	r24, 0xF4	; 244
    56e8:	92 07       	cpc	r25, r18
    56ea:	50 f0       	brcs	.+20     	; 0x5700 <DetermineRPM+0x28>
		RPM = 0;
	else if(RPM > 2500)
    56ec:	85 5c       	subi	r24, 0xC5	; 197
    56ee:	99 40       	sbci	r25, 0x09	; 9
    56f0:	30 f0       	brcs	.+12     	; 0x56fe <DetermineRPM+0x26>
		RPM = 2500;
    56f2:	84 ec       	ldi	r24, 0xC4	; 196
    56f4:	99 e0       	ldi	r25, 0x09	; 9
    56f6:	90 93 95 10 	sts	0x1095, r25
    56fa:	80 93 94 10 	sts	0x1094, r24
    56fe:	08 95       	ret
void DetermineRPM(U16 tick_count){

	RPM = tick_count/2;

	if(RPM<500)
		RPM = 0;
    5700:	10 92 95 10 	sts	0x1095, r1
    5704:	10 92 94 10 	sts	0x1094, r1
    5708:	08 95       	ret

0000570a <ClearTrip>:

	Trip = eeprom_read_word((U16*) TRIP_ADDRESS);

}

void ClearTrip		(void){
    570a:	10 92 97 10 	sts	0x1097, r1
    570e:	10 92 96 10 	sts	0x1096, r1

	Trip = 0;

}
    5712:	08 95       	ret

00005714 <ReadTripDist>:

	eeprom_write_word((U16*) TRIP_ADDRESS, Trip);

}

void ReadTripDist	(void){
    5714:	0f 93       	push	r16
    5716:	1f 93       	push	r17
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    5718:	0a e5       	ldi	r16, 0x5A	; 90
    571a:	1a e2       	ldi	r17, 0x2A	; 42
    571c:	b8 01       	movw	r22, r16
    571e:	8a e0       	ldi	r24, 0x0A	; 10
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__eerd_word>

	Distance = eeprom_read_word((U16*) DIST_ADDRESS);
    5726:	90 93 8f 10 	sts	0x108F, r25
    572a:	80 93 8e 10 	sts	0x108E, r24
    572e:	b8 01       	movw	r22, r16
    5730:	84 e6       	ldi	r24, 0x64	; 100
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__eerd_word>

	Trip = eeprom_read_word((U16*) TRIP_ADDRESS);
    5738:	90 93 97 10 	sts	0x1097, r25
    573c:	80 93 96 10 	sts	0x1096, r24

}
    5740:	1f 91       	pop	r17
    5742:	0f 91       	pop	r16
    5744:	08 95       	ret

00005746 <SaveTripDist>:
	else if(RPM > 2500)
		RPM = 2500;

}

void SaveTripDist	(void){
    5746:	0f 93       	push	r16
    5748:	1f 93       	push	r17
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
    574a:	02 e6       	ldi	r16, 0x62	; 98
    574c:	1a e2       	ldi	r17, 0x2A	; 42
    574e:	60 91 8e 10 	lds	r22, 0x108E
    5752:	70 91 8f 10 	lds	r23, 0x108F
    5756:	a8 01       	movw	r20, r16
    5758:	8a e0       	ldi	r24, 0x0A	; 10
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <__eewr_word>

	eeprom_write_word((U16*) DIST_ADDRESS, Distance);

	eeprom_write_word((U16*) TRIP_ADDRESS, Trip);

}
    5760:	60 91 96 10 	lds	r22, 0x1096
    5764:	70 91 97 10 	lds	r23, 0x1097
    5768:	a8 01       	movw	r20, r16
    576a:	84 e6       	ldi	r24, 0x64	; 100
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <__eewr_word>
    5772:	1f 91       	pop	r17
    5774:	0f 91       	pop	r16
    5776:	08 95       	ret

00005778 <InitGear>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void InitGear	(void){
    5778:	0f 93       	push	r16
    577a:	1f 93       	push	r17

	//init variables
	Speed = 0;
    577c:	10 92 8d 10 	sts	0x108D, r1
	RPM = 1500;
    5780:	8c ed       	ldi	r24, 0xDC	; 220
    5782:	95 e0       	ldi	r25, 0x05	; 5
    5784:	90 93 95 10 	sts	0x1095, r25
    5788:	80 93 94 10 	sts	0x1094, r24
	Gear = 0;
    578c:	10 92 93 10 	sts	0x1093, r1
	GearAdvisorMode = ECONOMIC_MODE;
    5790:	82 e0       	ldi	r24, 0x02	; 2
    5792:	80 93 91 10 	sts	0x1091, r24
	GearType = FORWARD_GEAR;
    5796:	10 92 92 10 	sts	0x1092, r1
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    579a:	0a e5       	ldi	r16, 0x5A	; 90
    579c:	1a e2       	ldi	r17, 0x2A	; 42
    579e:	b8 01       	movw	r22, r16
    57a0:	8a e0       	ldi	r24, 0x0A	; 10
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__eerd_word>

}

void ReadTripDist	(void){

	Distance = eeprom_read_word((U16*) DIST_ADDRESS);
    57a8:	90 93 8f 10 	sts	0x108F, r25
    57ac:	80 93 8e 10 	sts	0x108E, r24
    57b0:	b8 01       	movw	r22, r16
    57b2:	84 e6       	ldi	r24, 0x64	; 100
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__eerd_word>

	Trip = eeprom_read_word((U16*) TRIP_ADDRESS);
    57ba:	90 93 97 10 	sts	0x1097, r25
    57be:	80 93 96 10 	sts	0x1096, r24
	//Trip = 0;

	ReadTripDist();


	DistanceTripMode = DISTANCE;
    57c2:	10 92 90 10 	sts	0x1090, r1
}
    57c6:	1f 91       	pop	r17
    57c8:	0f 91       	pop	r16
    57ca:	08 95       	ret

000057cc <Filter>:
//			  timer - which measurement to be filtered - Timer1 or Timer3	
//
// Result   : none
//
//**********************************************************************************
U16 Filter		(U16 ticks, U8 timer){
    57cc:	fc 01       	movw	r30, r24
	
	U16 i, sum = 0;

	if(timer == FREQ1){
    57ce:	61 30       	cpi	r22, 0x01	; 1
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <Filter+0x8>
    57d2:	49 c0       	rjmp	.+146    	; 0x5866 <Filter+0x9a>
		FMeterTimerArray1[0] = ticks;

		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterTimerArray1[i];
		}
	}else if(timer == FREQ3){
    57d4:	63 30       	cpi	r22, 0x03	; 3
    57d6:	e9 f0       	breq	.+58     	; 0x5812 <Filter+0x46>
			sum += FMeterTimerArray3[i];
		}
	}else{
	
		for(i = (TIMER_ARRAY_SIZE-1); i > 0; i--){
			FMeterSpeedCounter[i] = FMeterSpeedCounter[i-1]; 		
    57d8:	20 91 37 01 	lds	r18, 0x0137
    57dc:	20 93 38 01 	sts	0x0138, r18
    57e0:	90 91 36 01 	lds	r25, 0x0136
    57e4:	90 93 37 01 	sts	0x0137, r25
    57e8:	80 91 35 01 	lds	r24, 0x0135
    57ec:	80 93 36 01 	sts	0x0136, r24
		}

		FMeterSpeedCounter[0] = ticks;
    57f0:	e0 93 35 01 	sts	0x0135, r30

		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterSpeedCounter[i];
    57f4:	68 2f       	mov	r22, r24
    57f6:	70 e0       	ldi	r23, 0x00	; 0
    57f8:	6e 0f       	add	r22, r30
    57fa:	71 1d       	adc	r23, r1
    57fc:	69 0f       	add	r22, r25
    57fe:	71 1d       	adc	r23, r1
    5800:	62 0f       	add	r22, r18
    5802:	71 1d       	adc	r23, r1
    5804:	9b 01       	movw	r18, r22
    5806:	36 95       	lsr	r19
    5808:	27 95       	ror	r18
    580a:	36 95       	lsr	r19
    580c:	27 95       	ror	r18
		}

	}

	return(sum/TIMER_ARRAY_SIZE);
}
    580e:	c9 01       	movw	r24, r18
    5810:	08 95       	ret
		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterTimerArray1[i];
		}
	}else if(timer == FREQ3){
		for(i = (TIMER_ARRAY_SIZE-1); i > 0; i--){
			FMeterTimerArray3[i] = FMeterTimerArray3[i-1]; 		
    5812:	40 91 31 01 	lds	r20, 0x0131
    5816:	50 91 32 01 	lds	r21, 0x0132
    581a:	50 93 34 01 	sts	0x0134, r21
    581e:	40 93 33 01 	sts	0x0133, r20
    5822:	20 91 2f 01 	lds	r18, 0x012F
    5826:	30 91 30 01 	lds	r19, 0x0130
    582a:	30 93 32 01 	sts	0x0132, r19
    582e:	20 93 31 01 	sts	0x0131, r18
    5832:	80 91 2d 01 	lds	r24, 0x012D
    5836:	90 91 2e 01 	lds	r25, 0x012E
    583a:	90 93 30 01 	sts	0x0130, r25
    583e:	80 93 2f 01 	sts	0x012F, r24
		}

		FMeterTimerArray3[0] = ticks;
    5842:	f0 93 2e 01 	sts	0x012E, r31
    5846:	e0 93 2d 01 	sts	0x012D, r30

		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterTimerArray3[i];
    584a:	bf 01       	movw	r22, r30
    584c:	68 0f       	add	r22, r24
    584e:	79 1f       	adc	r23, r25
    5850:	62 0f       	add	r22, r18
    5852:	73 1f       	adc	r23, r19
    5854:	64 0f       	add	r22, r20
    5856:	75 1f       	adc	r23, r21
		}

		FMeterSpeedCounter[0] = ticks;

		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterSpeedCounter[i];
    5858:	9b 01       	movw	r18, r22
    585a:	36 95       	lsr	r19
    585c:	27 95       	ror	r18
    585e:	36 95       	lsr	r19
    5860:	27 95       	ror	r18
		}

	}

	return(sum/TIMER_ARRAY_SIZE);
}
    5862:	c9 01       	movw	r24, r18
    5864:	08 95       	ret
	
	U16 i, sum = 0;

	if(timer == FREQ1){
		for(i = (TIMER_ARRAY_SIZE-1); i > 0; i--){
			FMeterTimerArray1[i] = FMeterTimerArray1[i-1]; 		
    5866:	40 91 29 01 	lds	r20, 0x0129
    586a:	50 91 2a 01 	lds	r21, 0x012A
    586e:	50 93 2c 01 	sts	0x012C, r21
    5872:	40 93 2b 01 	sts	0x012B, r20
    5876:	20 91 27 01 	lds	r18, 0x0127
    587a:	30 91 28 01 	lds	r19, 0x0128
    587e:	30 93 2a 01 	sts	0x012A, r19
    5882:	20 93 29 01 	sts	0x0129, r18
    5886:	80 91 25 01 	lds	r24, 0x0125
    588a:	90 91 26 01 	lds	r25, 0x0126
    588e:	90 93 28 01 	sts	0x0128, r25
    5892:	80 93 27 01 	sts	0x0127, r24
		}

		FMeterTimerArray1[0] = ticks;
    5896:	f0 93 26 01 	sts	0x0126, r31
    589a:	e0 93 25 01 	sts	0x0125, r30

		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterTimerArray1[i];
    589e:	bf 01       	movw	r22, r30
    58a0:	68 0f       	add	r22, r24
    58a2:	79 1f       	adc	r23, r25
    58a4:	62 0f       	add	r22, r18
    58a6:	73 1f       	adc	r23, r19
    58a8:	64 0f       	add	r22, r20
    58aa:	75 1f       	adc	r23, r21
		}

		FMeterSpeedCounter[0] = ticks;

		for(i = 0; i< TIMER_ARRAY_SIZE; i++){
			sum += FMeterSpeedCounter[i];
    58ac:	9b 01       	movw	r18, r22
    58ae:	36 95       	lsr	r19
    58b0:	27 95       	ror	r18
    58b2:	36 95       	lsr	r19
    58b4:	27 95       	ror	r18
		}

	}

	return(sum/TIMER_ARRAY_SIZE);
}
    58b6:	c9 01       	movw	r24, r18
    58b8:	08 95       	ret

000058ba <FMeterIntTick>:
// Arguments: none
//
// Result   : none
//
//*****************************************************************************
void FMeterIntTick(void){
    58ba:	80 91 23 01 	lds	r24, 0x0123
    58be:	8f 5f       	subi	r24, 0xFF	; 255
    58c0:	80 93 23 01 	sts	0x0123, r24

	SpeedCounter++;

}
    58c4:	08 95       	ret

000058c6 <FMeterStopMeasurement>:
//
// Result   : none
//
//*****************************************************************************
void FMeterStopMeasurement(void)
{
    58c6:	10 92 80 00 	sts	0x0080, r1

	//Configuring Timer1 for frequnecy measurement
	TCCR1A = 0;
	TCCR1B = 0;
    58ca:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
    58ce:	10 92 85 00 	sts	0x0085, r1
    58d2:	10 92 84 00 	sts	0x0084, r1

	//Configuring Timer3 for frequnecy measurement
	TCCR3A = 0;
    58d6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
    58da:	10 92 91 00 	sts	0x0091, r1
	TCNT3 = 0;
    58de:	10 92 95 00 	sts	0x0095, r1
    58e2:	10 92 94 00 	sts	0x0094, r1

	FMeterMeasurementRunning = 0;
    58e6:	10 92 22 01 	sts	0x0122, r1
	FMeterMeasurementComplete = 1;
    58ea:	81 e0       	ldi	r24, 0x01	; 1
    58ec:	80 93 14 01 	sts	0x0114, r24
}
    58f0:	08 95       	ret

000058f2 <FMeterInit>:
//
// Result   : none
//
//*****************************************************************************
void FMeterInit(void)
{
    58f2:	10 92 80 00 	sts	0x0080, r1
void FMeterStopMeasurement(void)
{

	//Configuring Timer1 for frequnecy measurement
	TCCR1A = 0;
	TCCR1B = 0;
    58f6:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
    58fa:	10 92 85 00 	sts	0x0085, r1
    58fe:	10 92 84 00 	sts	0x0084, r1

	//Configuring Timer3 for frequnecy measurement
	TCCR3A = 0;
    5902:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;
    5906:	10 92 91 00 	sts	0x0091, r1
	TCNT3 = 0;
    590a:	10 92 95 00 	sts	0x0095, r1
    590e:	10 92 94 00 	sts	0x0094, r1

	FMeterMeasurementRunning = 0;
    5912:	10 92 22 01 	sts	0x0122, r1
void FMeterInit(void)
{
	FMeterStopMeasurement();

	//Congiguring Timer1 & Timer3 & External Interrupt 4 pins as inputs
	cbi(DDRD, DDD6);
    5916:	56 98       	cbi	0x0a, 6	; 10
	cbi(DDRE, DDE6);
    5918:	6e 98       	cbi	0x0d, 6	; 13
	cbi(DDRE, DDE4);
    591a:	6c 98       	cbi	0x0d, 4	; 13

	//Configuring External Interrupt 4
	EICRB |= (1<<ISC41);
    591c:	ea e6       	ldi	r30, 0x6A	; 106
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	80 81       	ld	r24, Z
    5922:	82 60       	ori	r24, 0x02	; 2
    5924:	80 83       	st	Z, r24
	EICRB |= (1<<ISC40);
    5926:	80 81       	ld	r24, Z
    5928:	81 60       	ori	r24, 0x01	; 1
    592a:	80 83       	st	Z, r24


	FMeterInitialized = 1;
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	80 93 24 01 	sts	0x0124, r24
	FMeterMeasurementComplete = 1;
    5932:	80 93 14 01 	sts	0x0114, r24
}
    5936:	08 95       	ret

00005938 <FMeterStartMeasurement>:
//
// Result   : none
//
//*****************************************************************************
void FMeterStartMeasurement(void)
{
    5938:	10 92 14 01 	sts	0x0114, r1
	FMeterMeasurementComplete = 0;
	FMeterMeasurementRunning = 1;
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	80 93 22 01 	sts	0x0122, r24
	FMeterTickCounter = 0;
    5942:	10 92 3a 01 	sts	0x013A, r1
    5946:	10 92 39 01 	sts	0x0139, r1
	
	//Timer1 config
	TCCR1A = 0;	// normal mode (counter)
    594a:	10 92 80 00 	sts	0x0080, r1
	TCNT1 = 0;	// counter = 0
    594e:	10 92 85 00 	sts	0x0085, r1
    5952:	10 92 84 00 	sts	0x0084, r1

	//Timer3 config
	TCCR3A = 0;	// normal mode (counter)
    5956:	10 92 90 00 	sts	0x0090, r1
	TCNT3 = 0;	// counter = 0
    595a:	10 92 95 00 	sts	0x0095, r1
    595e:	10 92 94 00 	sts	0x0094, r1

	//External Interrupt 4 config
	SpeedCounter = 0;
    5962:	10 92 23 01 	sts	0x0123, r1

}
    5966:	08 95       	ret

00005968 <FMeterGetMeasurementStatus>:
//
// Result   : 1 = complete, 0 = is still running
//
//*****************************************************************************
U8 FMeterGetMeasurementStatus(void)
{
    5968:	80 91 14 01 	lds	r24, 0x0114
    596c:	08 95       	ret

0000596e <FMeterReadLastMeasurement>:
//
// Result   : U16: measured frequency in Hz
//
//*****************************************************************************
U16 FMeterReadLastMeasurement(U8 freq)
{
    596e:	81 30       	cpi	r24, 0x01	; 1
    5970:	29 f0       	breq	.+10     	; 0x597c <FMeterReadLastMeasurement+0xe>

	if(freq == FREQ1)
		return (FMeterTimerResult1*5);
	else if(freq == FREQ3)
    5972:	83 30       	cpi	r24, 0x03	; 3
    5974:	79 f0       	breq	.+30     	; 0x5994 <FMeterReadLastMeasurement+0x26>
		return (FMeterTimerResult3*5);
	else if(freq == FREQS)
    5976:	85 30       	cpi	r24, 0x05	; 5
    5978:	c9 f0       	breq	.+50     	; 0x59ac <FMeterReadLastMeasurement+0x3e>
		return (FMeterTimerResultS*5);
}
    597a:	08 95       	ret
//*****************************************************************************
U16 FMeterReadLastMeasurement(U8 freq)
{

	if(freq == FREQ1)
		return (FMeterTimerResult1*5);
    597c:	20 91 3b 01 	lds	r18, 0x013B
    5980:	30 91 3c 01 	lds	r19, 0x013C
    5984:	c9 01       	movw	r24, r18
    5986:	88 0f       	add	r24, r24
    5988:	99 1f       	adc	r25, r25
    598a:	88 0f       	add	r24, r24
    598c:	99 1f       	adc	r25, r25
    598e:	82 0f       	add	r24, r18
    5990:	93 1f       	adc	r25, r19
    5992:	08 95       	ret
	else if(freq == FREQ3)
		return (FMeterTimerResult3*5);
    5994:	20 91 3d 01 	lds	r18, 0x013D
    5998:	30 91 3e 01 	lds	r19, 0x013E
    599c:	c9 01       	movw	r24, r18
    599e:	88 0f       	add	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	88 0f       	add	r24, r24
    59a4:	99 1f       	adc	r25, r25
    59a6:	82 0f       	add	r24, r18
    59a8:	93 1f       	adc	r25, r19
    59aa:	08 95       	ret
	else if(freq == FREQS)
		return (FMeterTimerResultS*5);
    59ac:	20 91 3f 01 	lds	r18, 0x013F
    59b0:	30 91 40 01 	lds	r19, 0x0140
    59b4:	c9 01       	movw	r24, r18
    59b6:	88 0f       	add	r24, r24
    59b8:	99 1f       	adc	r25, r25
    59ba:	88 0f       	add	r24, r24
    59bc:	99 1f       	adc	r25, r25
    59be:	82 0f       	add	r24, r18
    59c0:	93 1f       	adc	r25, r19
    59c2:	08 95       	ret

000059c4 <FMeterTick>:
//
// Result   : none
//
//*****************************************************************************
void FMeterTick (void)
{
    59c4:	1f 93       	push	r17

	if (FMeterInitialized != 0)
    59c6:	80 91 24 01 	lds	r24, 0x0124
    59ca:	88 23       	and	r24, r24
    59cc:	21 f0       	breq	.+8      	; 0x59d6 <FMeterTick+0x12>
	{
		if (FMeterMeasurementRunning == 1)
    59ce:	10 91 22 01 	lds	r17, 0x0122
    59d2:	11 30       	cpi	r17, 0x01	; 1
    59d4:	11 f0       	breq	.+4      	; 0x59da <FMeterTick+0x16>
				FMeterStartMeasurement();
			}
			
		}
	}
}
    59d6:	1f 91       	pop	r17
    59d8:	08 95       	ret
	if (FMeterInitialized != 0)
	{
		if (FMeterMeasurementRunning == 1)
		{

			if (FMeterTickCounter == 0)
    59da:	80 91 39 01 	lds	r24, 0x0139
    59de:	90 91 3a 01 	lds	r25, 0x013A
    59e2:	00 97       	sbiw	r24, 0x00	; 0
    59e4:	69 f4       	brne	.+26     	; 0x5a00 <FMeterTick+0x3c>
			{
				// Timer1 & Timer3 start counting now
				TCCR1B = 7; // external pin is the source, rising edge
    59e6:	87 e0       	ldi	r24, 0x07	; 7
    59e8:	80 93 81 00 	sts	0x0081, r24
				TCCR3B = 7;
    59ec:	80 93 91 00 	sts	0x0091, r24
				EIMSK |= (1<<INT4);
    59f0:	ec 9a       	sbi	0x1d, 4	; 29
			else
			{
				// do nothing
			}
	
			FMeterTickCounter++;
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	90 93 3a 01 	sts	0x013A, r25
    59fa:	80 93 39 01 	sts	0x0139, r24
    59fe:	eb cf       	rjmp	.-42     	; 0x59d6 <FMeterTick+0x12>
    5a00:	01 96       	adiw	r24, 0x01	; 1
    5a02:	90 93 3a 01 	sts	0x013A, r25
    5a06:	80 93 39 01 	sts	0x0139, r24

			if (FMeterTickCounter == (MEASUREMENT_TICKS + 1))
    5a0a:	81 5d       	subi	r24, 0xD1	; 209
    5a0c:	97 40       	sbci	r25, 0x07	; 7
    5a0e:	19 f7       	brne	.-58     	; 0x59d6 <FMeterTick+0x12>
			{
				// Timer1 & Timer3 stop counting now
				TCCR1B = 0; // Timer is stopped
    5a10:	10 92 81 00 	sts	0x0081, r1
				TCCR3B = 0;	
    5a14:	10 92 91 00 	sts	0x0091, r1
				EIMSK &= ~(1<<INT4);
    5a18:	ec 98       	cbi	0x1d, 4	; 29

				FMeterMeasurementRunning = 0;
    5a1a:	10 92 22 01 	sts	0x0122, r1
				FMeterMeasurementComplete = 1;
    5a1e:	10 93 14 01 	sts	0x0114, r17
				

				//Filter measurement values
				
				FMeterTimerResult1 = Filter(TCNT1, FREQ1);
    5a22:	80 91 84 00 	lds	r24, 0x0084
    5a26:	90 91 85 00 	lds	r25, 0x0085
    5a2a:	61 e0       	ldi	r22, 0x01	; 1
    5a2c:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <Filter>
    5a30:	90 93 3c 01 	sts	0x013C, r25
    5a34:	80 93 3b 01 	sts	0x013B, r24
				FMeterTimerResult3 = Filter(TCNT3, FREQ3);
    5a38:	80 91 94 00 	lds	r24, 0x0094
    5a3c:	90 91 95 00 	lds	r25, 0x0095
    5a40:	63 e0       	ldi	r22, 0x03	; 3
    5a42:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <Filter>
    5a46:	90 93 3e 01 	sts	0x013E, r25
    5a4a:	80 93 3d 01 	sts	0x013D, r24
				FMeterTimerResultS = Filter(SpeedCounter, FREQS);
    5a4e:	65 e0       	ldi	r22, 0x05	; 5
    5a50:	80 91 23 01 	lds	r24, 0x0123
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <Filter>
    5a5a:	90 93 40 01 	sts	0x0140, r25
    5a5e:	80 93 3f 01 	sts	0x013F, r24

				DetermineSpeed(FMeterTimerResultS);
    5a62:	0e 94 33 2b 	call	0x5666	; 0x5666 <DetermineSpeed>
// Result   : none
//
//*****************************************************************************
void FMeterStartMeasurement(void)
{
	FMeterMeasurementComplete = 0;
    5a66:	10 92 14 01 	sts	0x0114, r1
	FMeterMeasurementRunning = 1;
    5a6a:	10 93 22 01 	sts	0x0122, r17
	FMeterTickCounter = 0;
    5a6e:	10 92 3a 01 	sts	0x013A, r1
    5a72:	10 92 39 01 	sts	0x0139, r1
	
	//Timer1 config
	TCCR1A = 0;	// normal mode (counter)
    5a76:	10 92 80 00 	sts	0x0080, r1
	TCNT1 = 0;	// counter = 0
    5a7a:	10 92 85 00 	sts	0x0085, r1
    5a7e:	10 92 84 00 	sts	0x0084, r1

	//Timer3 config
	TCCR3A = 0;	// normal mode (counter)
    5a82:	10 92 90 00 	sts	0x0090, r1
	TCNT3 = 0;	// counter = 0
    5a86:	10 92 95 00 	sts	0x0095, r1
    5a8a:	10 92 94 00 	sts	0x0094, r1

	//External Interrupt 4 config
	SpeedCounter = 0;
    5a8e:	10 92 23 01 	sts	0x0123, r1
    5a92:	a1 cf       	rjmp	.-190    	; 0x59d6 <FMeterTick+0x12>

00005a94 <AvrXHalt>:
    5a94:	f8 94       	cli
    5a96:	ff cf       	rjmp	.-2      	; 0x5a96 <AvrXHalt+0x2>

00005a98 <__eerd_word>:
    5a98:	df 92       	push	r13
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	7b 01       	movw	r14, r22
    5aa4:	8c 01       	movw	r16, r24
    5aa6:	fb 01       	movw	r30, r22
    5aa8:	09 95       	icall
    5aaa:	d8 2e       	mov	r13, r24
    5aac:	c8 01       	movw	r24, r16
    5aae:	01 96       	adiw	r24, 0x01	; 1
    5ab0:	f7 01       	movw	r30, r14
    5ab2:	09 95       	icall
    5ab4:	98 2f       	mov	r25, r24
    5ab6:	8d 2d       	mov	r24, r13
    5ab8:	1f 91       	pop	r17
    5aba:	0f 91       	pop	r16
    5abc:	ff 90       	pop	r15
    5abe:	ef 90       	pop	r14
    5ac0:	df 90       	pop	r13
    5ac2:	08 95       	ret

00005ac4 <__eewr_word>:
    5ac4:	df 92       	push	r13
    5ac6:	ef 92       	push	r14
    5ac8:	ff 92       	push	r15
    5aca:	0f 93       	push	r16
    5acc:	1f 93       	push	r17
    5ace:	d7 2e       	mov	r13, r23
    5ad0:	7a 01       	movw	r14, r20
    5ad2:	8c 01       	movw	r16, r24
    5ad4:	fa 01       	movw	r30, r20
    5ad6:	09 95       	icall
    5ad8:	6d 2d       	mov	r22, r13
    5ada:	c8 01       	movw	r24, r16
    5adc:	01 96       	adiw	r24, 0x01	; 1
    5ade:	f7 01       	movw	r30, r14
    5ae0:	09 95       	icall
    5ae2:	1f 91       	pop	r17
    5ae4:	0f 91       	pop	r16
    5ae6:	ff 90       	pop	r15
    5ae8:	ef 90       	pop	r14
    5aea:	df 90       	pop	r13
    5aec:	08 95       	ret

00005aee <sprintf>:
    5aee:	ae e0       	ldi	r26, 0x0E	; 14
    5af0:	b0 e0       	ldi	r27, 0x00	; 0
    5af2:	ed e7       	ldi	r30, 0x7D	; 125
    5af4:	fd e2       	ldi	r31, 0x2D	; 45
    5af6:	0c 94 3e 32 	jmp	0x647c	; 0x647c <__prologue_saves__+0x1c>
    5afa:	0d 89       	ldd	r16, Y+21	; 0x15
    5afc:	1e 89       	ldd	r17, Y+22	; 0x16
    5afe:	86 e0       	ldi	r24, 0x06	; 6
    5b00:	8c 83       	std	Y+4, r24	; 0x04
    5b02:	1a 83       	std	Y+2, r17	; 0x02
    5b04:	09 83       	std	Y+1, r16	; 0x01
    5b06:	8f ef       	ldi	r24, 0xFF	; 255
    5b08:	9f e7       	ldi	r25, 0x7F	; 127
    5b0a:	9e 83       	std	Y+6, r25	; 0x06
    5b0c:	8d 83       	std	Y+5, r24	; 0x05
    5b0e:	ce 01       	movw	r24, r28
    5b10:	49 96       	adiw	r24, 0x19	; 25
    5b12:	ac 01       	movw	r20, r24
    5b14:	6f 89       	ldd	r22, Y+23	; 0x17
    5b16:	78 8d       	ldd	r23, Y+24	; 0x18
    5b18:	ce 01       	movw	r24, r28
    5b1a:	01 96       	adiw	r24, 0x01	; 1
    5b1c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <vfprintf>
    5b20:	2f 81       	ldd	r18, Y+7	; 0x07
    5b22:	38 85       	ldd	r19, Y+8	; 0x08
    5b24:	02 0f       	add	r16, r18
    5b26:	13 1f       	adc	r17, r19
    5b28:	f8 01       	movw	r30, r16
    5b2a:	10 82       	st	Z, r1
    5b2c:	2e 96       	adiw	r28, 0x0e	; 14
    5b2e:	e4 e0       	ldi	r30, 0x04	; 4
    5b30:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__epilogue_restores__+0x1c>

00005b34 <vfprintf>:
    5b34:	ab e0       	ldi	r26, 0x0B	; 11
    5b36:	b0 e0       	ldi	r27, 0x00	; 0
    5b38:	e0 ea       	ldi	r30, 0xA0	; 160
    5b3a:	fd e2       	ldi	r31, 0x2D	; 45
    5b3c:	0c 94 30 32 	jmp	0x6460	; 0x6460 <__prologue_saves__>
    5b40:	3c 01       	movw	r6, r24
    5b42:	2b 01       	movw	r4, r22
    5b44:	5a 01       	movw	r10, r20
    5b46:	fc 01       	movw	r30, r24
    5b48:	17 82       	std	Z+7, r1	; 0x07
    5b4a:	16 82       	std	Z+6, r1	; 0x06
    5b4c:	83 81       	ldd	r24, Z+3	; 0x03
    5b4e:	81 fd       	sbrc	r24, 1
    5b50:	03 c0       	rjmp	.+6      	; 0x5b58 <vfprintf+0x24>
    5b52:	6f ef       	ldi	r22, 0xFF	; 255
    5b54:	7f ef       	ldi	r23, 0xFF	; 255
    5b56:	c8 c1       	rjmp	.+912    	; 0x5ee8 <vfprintf+0x3b4>
    5b58:	9a e0       	ldi	r25, 0x0A	; 10
    5b5a:	89 2e       	mov	r8, r25
    5b5c:	1e 01       	movw	r2, r28
    5b5e:	08 94       	sec
    5b60:	21 1c       	adc	r2, r1
    5b62:	31 1c       	adc	r3, r1
    5b64:	f3 01       	movw	r30, r6
    5b66:	23 81       	ldd	r18, Z+3	; 0x03
    5b68:	f2 01       	movw	r30, r4
    5b6a:	23 fd       	sbrc	r18, 3
    5b6c:	85 91       	lpm	r24, Z+
    5b6e:	23 ff       	sbrs	r18, 3
    5b70:	81 91       	ld	r24, Z+
    5b72:	2f 01       	movw	r4, r30
    5b74:	88 23       	and	r24, r24
    5b76:	09 f4       	brne	.+2      	; 0x5b7a <vfprintf+0x46>
    5b78:	b4 c1       	rjmp	.+872    	; 0x5ee2 <vfprintf+0x3ae>
    5b7a:	85 32       	cpi	r24, 0x25	; 37
    5b7c:	39 f4       	brne	.+14     	; 0x5b8c <vfprintf+0x58>
    5b7e:	23 fd       	sbrc	r18, 3
    5b80:	85 91       	lpm	r24, Z+
    5b82:	23 ff       	sbrs	r18, 3
    5b84:	81 91       	ld	r24, Z+
    5b86:	2f 01       	movw	r4, r30
    5b88:	85 32       	cpi	r24, 0x25	; 37
    5b8a:	29 f4       	brne	.+10     	; 0x5b96 <vfprintf+0x62>
    5b8c:	b3 01       	movw	r22, r6
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5b94:	e7 cf       	rjmp	.-50     	; 0x5b64 <vfprintf+0x30>
    5b96:	98 2f       	mov	r25, r24
    5b98:	dd 24       	eor	r13, r13
    5b9a:	cc 24       	eor	r12, r12
    5b9c:	99 24       	eor	r9, r9
    5b9e:	ff e1       	ldi	r31, 0x1F	; 31
    5ba0:	fd 15       	cp	r31, r13
    5ba2:	d0 f0       	brcs	.+52     	; 0x5bd8 <vfprintf+0xa4>
    5ba4:	9b 32       	cpi	r25, 0x2B	; 43
    5ba6:	69 f0       	breq	.+26     	; 0x5bc2 <vfprintf+0x8e>
    5ba8:	9c 32       	cpi	r25, 0x2C	; 44
    5baa:	28 f4       	brcc	.+10     	; 0x5bb6 <vfprintf+0x82>
    5bac:	90 32       	cpi	r25, 0x20	; 32
    5bae:	59 f0       	breq	.+22     	; 0x5bc6 <vfprintf+0x92>
    5bb0:	93 32       	cpi	r25, 0x23	; 35
    5bb2:	91 f4       	brne	.+36     	; 0x5bd8 <vfprintf+0xa4>
    5bb4:	0e c0       	rjmp	.+28     	; 0x5bd2 <vfprintf+0x9e>
    5bb6:	9d 32       	cpi	r25, 0x2D	; 45
    5bb8:	49 f0       	breq	.+18     	; 0x5bcc <vfprintf+0x98>
    5bba:	90 33       	cpi	r25, 0x30	; 48
    5bbc:	69 f4       	brne	.+26     	; 0x5bd8 <vfprintf+0xa4>
    5bbe:	41 e0       	ldi	r20, 0x01	; 1
    5bc0:	24 c0       	rjmp	.+72     	; 0x5c0a <vfprintf+0xd6>
    5bc2:	52 e0       	ldi	r21, 0x02	; 2
    5bc4:	d5 2a       	or	r13, r21
    5bc6:	84 e0       	ldi	r24, 0x04	; 4
    5bc8:	d8 2a       	or	r13, r24
    5bca:	28 c0       	rjmp	.+80     	; 0x5c1c <vfprintf+0xe8>
    5bcc:	98 e0       	ldi	r25, 0x08	; 8
    5bce:	d9 2a       	or	r13, r25
    5bd0:	25 c0       	rjmp	.+74     	; 0x5c1c <vfprintf+0xe8>
    5bd2:	e0 e1       	ldi	r30, 0x10	; 16
    5bd4:	de 2a       	or	r13, r30
    5bd6:	22 c0       	rjmp	.+68     	; 0x5c1c <vfprintf+0xe8>
    5bd8:	d7 fc       	sbrc	r13, 7
    5bda:	29 c0       	rjmp	.+82     	; 0x5c2e <vfprintf+0xfa>
    5bdc:	89 2f       	mov	r24, r25
    5bde:	80 53       	subi	r24, 0x30	; 48
    5be0:	8a 30       	cpi	r24, 0x0A	; 10
    5be2:	70 f4       	brcc	.+28     	; 0x5c00 <vfprintf+0xcc>
    5be4:	d6 fe       	sbrs	r13, 6
    5be6:	05 c0       	rjmp	.+10     	; 0x5bf2 <vfprintf+0xbe>
    5be8:	98 9c       	mul	r9, r8
    5bea:	90 2c       	mov	r9, r0
    5bec:	11 24       	eor	r1, r1
    5bee:	98 0e       	add	r9, r24
    5bf0:	15 c0       	rjmp	.+42     	; 0x5c1c <vfprintf+0xe8>
    5bf2:	c8 9c       	mul	r12, r8
    5bf4:	c0 2c       	mov	r12, r0
    5bf6:	11 24       	eor	r1, r1
    5bf8:	c8 0e       	add	r12, r24
    5bfa:	f0 e2       	ldi	r31, 0x20	; 32
    5bfc:	df 2a       	or	r13, r31
    5bfe:	0e c0       	rjmp	.+28     	; 0x5c1c <vfprintf+0xe8>
    5c00:	9e 32       	cpi	r25, 0x2E	; 46
    5c02:	29 f4       	brne	.+10     	; 0x5c0e <vfprintf+0xda>
    5c04:	d6 fc       	sbrc	r13, 6
    5c06:	6d c1       	rjmp	.+730    	; 0x5ee2 <vfprintf+0x3ae>
    5c08:	40 e4       	ldi	r20, 0x40	; 64
    5c0a:	d4 2a       	or	r13, r20
    5c0c:	07 c0       	rjmp	.+14     	; 0x5c1c <vfprintf+0xe8>
    5c0e:	9c 36       	cpi	r25, 0x6C	; 108
    5c10:	19 f4       	brne	.+6      	; 0x5c18 <vfprintf+0xe4>
    5c12:	50 e8       	ldi	r21, 0x80	; 128
    5c14:	d5 2a       	or	r13, r21
    5c16:	02 c0       	rjmp	.+4      	; 0x5c1c <vfprintf+0xe8>
    5c18:	98 36       	cpi	r25, 0x68	; 104
    5c1a:	49 f4       	brne	.+18     	; 0x5c2e <vfprintf+0xfa>
    5c1c:	f2 01       	movw	r30, r4
    5c1e:	23 fd       	sbrc	r18, 3
    5c20:	95 91       	lpm	r25, Z+
    5c22:	23 ff       	sbrs	r18, 3
    5c24:	91 91       	ld	r25, Z+
    5c26:	2f 01       	movw	r4, r30
    5c28:	99 23       	and	r25, r25
    5c2a:	09 f0       	breq	.+2      	; 0x5c2e <vfprintf+0xfa>
    5c2c:	b8 cf       	rjmp	.-144    	; 0x5b9e <vfprintf+0x6a>
    5c2e:	89 2f       	mov	r24, r25
    5c30:	85 54       	subi	r24, 0x45	; 69
    5c32:	83 30       	cpi	r24, 0x03	; 3
    5c34:	18 f0       	brcs	.+6      	; 0x5c3c <vfprintf+0x108>
    5c36:	80 52       	subi	r24, 0x20	; 32
    5c38:	83 30       	cpi	r24, 0x03	; 3
    5c3a:	38 f4       	brcc	.+14     	; 0x5c4a <vfprintf+0x116>
    5c3c:	44 e0       	ldi	r20, 0x04	; 4
    5c3e:	50 e0       	ldi	r21, 0x00	; 0
    5c40:	a4 0e       	add	r10, r20
    5c42:	b5 1e       	adc	r11, r21
    5c44:	5f e3       	ldi	r21, 0x3F	; 63
    5c46:	59 83       	std	Y+1, r21	; 0x01
    5c48:	0f c0       	rjmp	.+30     	; 0x5c68 <vfprintf+0x134>
    5c4a:	93 36       	cpi	r25, 0x63	; 99
    5c4c:	31 f0       	breq	.+12     	; 0x5c5a <vfprintf+0x126>
    5c4e:	93 37       	cpi	r25, 0x73	; 115
    5c50:	79 f0       	breq	.+30     	; 0x5c70 <vfprintf+0x13c>
    5c52:	93 35       	cpi	r25, 0x53	; 83
    5c54:	09 f0       	breq	.+2      	; 0x5c58 <vfprintf+0x124>
    5c56:	56 c0       	rjmp	.+172    	; 0x5d04 <vfprintf+0x1d0>
    5c58:	20 c0       	rjmp	.+64     	; 0x5c9a <vfprintf+0x166>
    5c5a:	f5 01       	movw	r30, r10
    5c5c:	80 81       	ld	r24, Z
    5c5e:	89 83       	std	Y+1, r24	; 0x01
    5c60:	42 e0       	ldi	r20, 0x02	; 2
    5c62:	50 e0       	ldi	r21, 0x00	; 0
    5c64:	a4 0e       	add	r10, r20
    5c66:	b5 1e       	adc	r11, r21
    5c68:	71 01       	movw	r14, r2
    5c6a:	01 e0       	ldi	r16, 0x01	; 1
    5c6c:	10 e0       	ldi	r17, 0x00	; 0
    5c6e:	12 c0       	rjmp	.+36     	; 0x5c94 <vfprintf+0x160>
    5c70:	f5 01       	movw	r30, r10
    5c72:	e0 80       	ld	r14, Z
    5c74:	f1 80       	ldd	r15, Z+1	; 0x01
    5c76:	d6 fc       	sbrc	r13, 6
    5c78:	03 c0       	rjmp	.+6      	; 0x5c80 <vfprintf+0x14c>
    5c7a:	6f ef       	ldi	r22, 0xFF	; 255
    5c7c:	7f ef       	ldi	r23, 0xFF	; 255
    5c7e:	02 c0       	rjmp	.+4      	; 0x5c84 <vfprintf+0x150>
    5c80:	69 2d       	mov	r22, r9
    5c82:	70 e0       	ldi	r23, 0x00	; 0
    5c84:	42 e0       	ldi	r20, 0x02	; 2
    5c86:	50 e0       	ldi	r21, 0x00	; 0
    5c88:	a4 0e       	add	r10, r20
    5c8a:	b5 1e       	adc	r11, r21
    5c8c:	c7 01       	movw	r24, r14
    5c8e:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <strnlen>
    5c92:	8c 01       	movw	r16, r24
    5c94:	5f e7       	ldi	r21, 0x7F	; 127
    5c96:	d5 22       	and	r13, r21
    5c98:	14 c0       	rjmp	.+40     	; 0x5cc2 <vfprintf+0x18e>
    5c9a:	f5 01       	movw	r30, r10
    5c9c:	e0 80       	ld	r14, Z
    5c9e:	f1 80       	ldd	r15, Z+1	; 0x01
    5ca0:	d6 fc       	sbrc	r13, 6
    5ca2:	03 c0       	rjmp	.+6      	; 0x5caa <vfprintf+0x176>
    5ca4:	6f ef       	ldi	r22, 0xFF	; 255
    5ca6:	7f ef       	ldi	r23, 0xFF	; 255
    5ca8:	02 c0       	rjmp	.+4      	; 0x5cae <vfprintf+0x17a>
    5caa:	69 2d       	mov	r22, r9
    5cac:	70 e0       	ldi	r23, 0x00	; 0
    5cae:	42 e0       	ldi	r20, 0x02	; 2
    5cb0:	50 e0       	ldi	r21, 0x00	; 0
    5cb2:	a4 0e       	add	r10, r20
    5cb4:	b5 1e       	adc	r11, r21
    5cb6:	c7 01       	movw	r24, r14
    5cb8:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <strnlen_P>
    5cbc:	8c 01       	movw	r16, r24
    5cbe:	50 e8       	ldi	r21, 0x80	; 128
    5cc0:	d5 2a       	or	r13, r21
    5cc2:	d3 fe       	sbrs	r13, 3
    5cc4:	07 c0       	rjmp	.+14     	; 0x5cd4 <vfprintf+0x1a0>
    5cc6:	1a c0       	rjmp	.+52     	; 0x5cfc <vfprintf+0x1c8>
    5cc8:	b3 01       	movw	r22, r6
    5cca:	80 e2       	ldi	r24, 0x20	; 32
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5cd2:	ca 94       	dec	r12
    5cd4:	8c 2d       	mov	r24, r12
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	08 17       	cp	r16, r24
    5cda:	19 07       	cpc	r17, r25
    5cdc:	a8 f3       	brcs	.-22     	; 0x5cc8 <vfprintf+0x194>
    5cde:	0e c0       	rjmp	.+28     	; 0x5cfc <vfprintf+0x1c8>
    5ce0:	f7 01       	movw	r30, r14
    5ce2:	d7 fc       	sbrc	r13, 7
    5ce4:	85 91       	lpm	r24, Z+
    5ce6:	d7 fe       	sbrs	r13, 7
    5ce8:	81 91       	ld	r24, Z+
    5cea:	7f 01       	movw	r14, r30
    5cec:	b3 01       	movw	r22, r6
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5cf4:	c1 10       	cpse	r12, r1
    5cf6:	ca 94       	dec	r12
    5cf8:	01 50       	subi	r16, 0x01	; 1
    5cfa:	10 40       	sbci	r17, 0x00	; 0
    5cfc:	01 15       	cp	r16, r1
    5cfe:	11 05       	cpc	r17, r1
    5d00:	79 f7       	brne	.-34     	; 0x5ce0 <vfprintf+0x1ac>
    5d02:	ec c0       	rjmp	.+472    	; 0x5edc <vfprintf+0x3a8>
    5d04:	94 36       	cpi	r25, 0x64	; 100
    5d06:	11 f0       	breq	.+4      	; 0x5d0c <vfprintf+0x1d8>
    5d08:	99 36       	cpi	r25, 0x69	; 105
    5d0a:	71 f5       	brne	.+92     	; 0x5d68 <vfprintf+0x234>
    5d0c:	d7 fe       	sbrs	r13, 7
    5d0e:	08 c0       	rjmp	.+16     	; 0x5d20 <vfprintf+0x1ec>
    5d10:	f5 01       	movw	r30, r10
    5d12:	e0 80       	ld	r14, Z
    5d14:	f1 80       	ldd	r15, Z+1	; 0x01
    5d16:	02 81       	ldd	r16, Z+2	; 0x02
    5d18:	13 81       	ldd	r17, Z+3	; 0x03
    5d1a:	44 e0       	ldi	r20, 0x04	; 4
    5d1c:	50 e0       	ldi	r21, 0x00	; 0
    5d1e:	0a c0       	rjmp	.+20     	; 0x5d34 <vfprintf+0x200>
    5d20:	f5 01       	movw	r30, r10
    5d22:	80 81       	ld	r24, Z
    5d24:	91 81       	ldd	r25, Z+1	; 0x01
    5d26:	7c 01       	movw	r14, r24
    5d28:	00 27       	eor	r16, r16
    5d2a:	f7 fc       	sbrc	r15, 7
    5d2c:	00 95       	com	r16
    5d2e:	10 2f       	mov	r17, r16
    5d30:	42 e0       	ldi	r20, 0x02	; 2
    5d32:	50 e0       	ldi	r21, 0x00	; 0
    5d34:	a4 0e       	add	r10, r20
    5d36:	b5 1e       	adc	r11, r21
    5d38:	5f e6       	ldi	r21, 0x6F	; 111
    5d3a:	d5 22       	and	r13, r21
    5d3c:	17 ff       	sbrs	r17, 7
    5d3e:	0a c0       	rjmp	.+20     	; 0x5d54 <vfprintf+0x220>
    5d40:	10 95       	com	r17
    5d42:	00 95       	com	r16
    5d44:	f0 94       	com	r15
    5d46:	e0 94       	com	r14
    5d48:	e1 1c       	adc	r14, r1
    5d4a:	f1 1c       	adc	r15, r1
    5d4c:	01 1d       	adc	r16, r1
    5d4e:	11 1d       	adc	r17, r1
    5d50:	80 e8       	ldi	r24, 0x80	; 128
    5d52:	d8 2a       	or	r13, r24
    5d54:	2a e0       	ldi	r18, 0x0A	; 10
    5d56:	30 e0       	ldi	r19, 0x00	; 0
    5d58:	a1 01       	movw	r20, r2
    5d5a:	c8 01       	movw	r24, r16
    5d5c:	b7 01       	movw	r22, r14
    5d5e:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__ultoa_invert>
    5d62:	f8 2e       	mov	r15, r24
    5d64:	f2 18       	sub	r15, r2
    5d66:	40 c0       	rjmp	.+128    	; 0x5de8 <vfprintf+0x2b4>
    5d68:	95 37       	cpi	r25, 0x75	; 117
    5d6a:	29 f4       	brne	.+10     	; 0x5d76 <vfprintf+0x242>
    5d6c:	1d 2d       	mov	r17, r13
    5d6e:	1f 7e       	andi	r17, 0xEF	; 239
    5d70:	2a e0       	ldi	r18, 0x0A	; 10
    5d72:	30 e0       	ldi	r19, 0x00	; 0
    5d74:	1d c0       	rjmp	.+58     	; 0x5db0 <vfprintf+0x27c>
    5d76:	1d 2d       	mov	r17, r13
    5d78:	19 7f       	andi	r17, 0xF9	; 249
    5d7a:	9f 36       	cpi	r25, 0x6F	; 111
    5d7c:	61 f0       	breq	.+24     	; 0x5d96 <vfprintf+0x262>
    5d7e:	90 37       	cpi	r25, 0x70	; 112
    5d80:	20 f4       	brcc	.+8      	; 0x5d8a <vfprintf+0x256>
    5d82:	98 35       	cpi	r25, 0x58	; 88
    5d84:	09 f0       	breq	.+2      	; 0x5d88 <vfprintf+0x254>
    5d86:	ad c0       	rjmp	.+346    	; 0x5ee2 <vfprintf+0x3ae>
    5d88:	0f c0       	rjmp	.+30     	; 0x5da8 <vfprintf+0x274>
    5d8a:	90 37       	cpi	r25, 0x70	; 112
    5d8c:	39 f0       	breq	.+14     	; 0x5d9c <vfprintf+0x268>
    5d8e:	98 37       	cpi	r25, 0x78	; 120
    5d90:	09 f0       	breq	.+2      	; 0x5d94 <vfprintf+0x260>
    5d92:	a7 c0       	rjmp	.+334    	; 0x5ee2 <vfprintf+0x3ae>
    5d94:	04 c0       	rjmp	.+8      	; 0x5d9e <vfprintf+0x26a>
    5d96:	28 e0       	ldi	r18, 0x08	; 8
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	0a c0       	rjmp	.+20     	; 0x5db0 <vfprintf+0x27c>
    5d9c:	10 61       	ori	r17, 0x10	; 16
    5d9e:	14 fd       	sbrc	r17, 4
    5da0:	14 60       	ori	r17, 0x04	; 4
    5da2:	20 e1       	ldi	r18, 0x10	; 16
    5da4:	30 e0       	ldi	r19, 0x00	; 0
    5da6:	04 c0       	rjmp	.+8      	; 0x5db0 <vfprintf+0x27c>
    5da8:	14 fd       	sbrc	r17, 4
    5daa:	16 60       	ori	r17, 0x06	; 6
    5dac:	20 e1       	ldi	r18, 0x10	; 16
    5dae:	32 e0       	ldi	r19, 0x02	; 2
    5db0:	17 ff       	sbrs	r17, 7
    5db2:	08 c0       	rjmp	.+16     	; 0x5dc4 <vfprintf+0x290>
    5db4:	f5 01       	movw	r30, r10
    5db6:	60 81       	ld	r22, Z
    5db8:	71 81       	ldd	r23, Z+1	; 0x01
    5dba:	82 81       	ldd	r24, Z+2	; 0x02
    5dbc:	93 81       	ldd	r25, Z+3	; 0x03
    5dbe:	44 e0       	ldi	r20, 0x04	; 4
    5dc0:	50 e0       	ldi	r21, 0x00	; 0
    5dc2:	08 c0       	rjmp	.+16     	; 0x5dd4 <vfprintf+0x2a0>
    5dc4:	f5 01       	movw	r30, r10
    5dc6:	80 81       	ld	r24, Z
    5dc8:	91 81       	ldd	r25, Z+1	; 0x01
    5dca:	bc 01       	movw	r22, r24
    5dcc:	80 e0       	ldi	r24, 0x00	; 0
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	42 e0       	ldi	r20, 0x02	; 2
    5dd2:	50 e0       	ldi	r21, 0x00	; 0
    5dd4:	a4 0e       	add	r10, r20
    5dd6:	b5 1e       	adc	r11, r21
    5dd8:	a1 01       	movw	r20, r2
    5dda:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__ultoa_invert>
    5dde:	f8 2e       	mov	r15, r24
    5de0:	f2 18       	sub	r15, r2
    5de2:	8f e7       	ldi	r24, 0x7F	; 127
    5de4:	d8 2e       	mov	r13, r24
    5de6:	d1 22       	and	r13, r17
    5de8:	d6 fe       	sbrs	r13, 6
    5dea:	0b c0       	rjmp	.+22     	; 0x5e02 <vfprintf+0x2ce>
    5dec:	5e ef       	ldi	r21, 0xFE	; 254
    5dee:	d5 22       	and	r13, r21
    5df0:	f9 14       	cp	r15, r9
    5df2:	38 f4       	brcc	.+14     	; 0x5e02 <vfprintf+0x2ce>
    5df4:	d4 fe       	sbrs	r13, 4
    5df6:	07 c0       	rjmp	.+14     	; 0x5e06 <vfprintf+0x2d2>
    5df8:	d2 fc       	sbrc	r13, 2
    5dfa:	05 c0       	rjmp	.+10     	; 0x5e06 <vfprintf+0x2d2>
    5dfc:	8f ee       	ldi	r24, 0xEF	; 239
    5dfe:	d8 22       	and	r13, r24
    5e00:	02 c0       	rjmp	.+4      	; 0x5e06 <vfprintf+0x2d2>
    5e02:	1f 2d       	mov	r17, r15
    5e04:	01 c0       	rjmp	.+2      	; 0x5e08 <vfprintf+0x2d4>
    5e06:	19 2d       	mov	r17, r9
    5e08:	d4 fe       	sbrs	r13, 4
    5e0a:	0d c0       	rjmp	.+26     	; 0x5e26 <vfprintf+0x2f2>
    5e0c:	fe 01       	movw	r30, r28
    5e0e:	ef 0d       	add	r30, r15
    5e10:	f1 1d       	adc	r31, r1
    5e12:	80 81       	ld	r24, Z
    5e14:	80 33       	cpi	r24, 0x30	; 48
    5e16:	19 f4       	brne	.+6      	; 0x5e1e <vfprintf+0x2ea>
    5e18:	99 ee       	ldi	r25, 0xE9	; 233
    5e1a:	d9 22       	and	r13, r25
    5e1c:	08 c0       	rjmp	.+16     	; 0x5e2e <vfprintf+0x2fa>
    5e1e:	1f 5f       	subi	r17, 0xFF	; 255
    5e20:	d2 fe       	sbrs	r13, 2
    5e22:	05 c0       	rjmp	.+10     	; 0x5e2e <vfprintf+0x2fa>
    5e24:	03 c0       	rjmp	.+6      	; 0x5e2c <vfprintf+0x2f8>
    5e26:	8d 2d       	mov	r24, r13
    5e28:	86 78       	andi	r24, 0x86	; 134
    5e2a:	09 f0       	breq	.+2      	; 0x5e2e <vfprintf+0x2fa>
    5e2c:	1f 5f       	subi	r17, 0xFF	; 255
    5e2e:	0d 2d       	mov	r16, r13
    5e30:	d3 fc       	sbrc	r13, 3
    5e32:	14 c0       	rjmp	.+40     	; 0x5e5c <vfprintf+0x328>
    5e34:	d0 fe       	sbrs	r13, 0
    5e36:	0f c0       	rjmp	.+30     	; 0x5e56 <vfprintf+0x322>
    5e38:	1c 15       	cp	r17, r12
    5e3a:	10 f0       	brcs	.+4      	; 0x5e40 <vfprintf+0x30c>
    5e3c:	9f 2c       	mov	r9, r15
    5e3e:	0b c0       	rjmp	.+22     	; 0x5e56 <vfprintf+0x322>
    5e40:	9f 2c       	mov	r9, r15
    5e42:	9c 0c       	add	r9, r12
    5e44:	91 1a       	sub	r9, r17
    5e46:	1c 2d       	mov	r17, r12
    5e48:	06 c0       	rjmp	.+12     	; 0x5e56 <vfprintf+0x322>
    5e4a:	b3 01       	movw	r22, r6
    5e4c:	80 e2       	ldi	r24, 0x20	; 32
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5e54:	1f 5f       	subi	r17, 0xFF	; 255
    5e56:	1c 15       	cp	r17, r12
    5e58:	c0 f3       	brcs	.-16     	; 0x5e4a <vfprintf+0x316>
    5e5a:	04 c0       	rjmp	.+8      	; 0x5e64 <vfprintf+0x330>
    5e5c:	1c 15       	cp	r17, r12
    5e5e:	10 f4       	brcc	.+4      	; 0x5e64 <vfprintf+0x330>
    5e60:	c1 1a       	sub	r12, r17
    5e62:	01 c0       	rjmp	.+2      	; 0x5e66 <vfprintf+0x332>
    5e64:	cc 24       	eor	r12, r12
    5e66:	04 ff       	sbrs	r16, 4
    5e68:	10 c0       	rjmp	.+32     	; 0x5e8a <vfprintf+0x356>
    5e6a:	b3 01       	movw	r22, r6
    5e6c:	80 e3       	ldi	r24, 0x30	; 48
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5e74:	02 ff       	sbrs	r16, 2
    5e76:	1e c0       	rjmp	.+60     	; 0x5eb4 <vfprintf+0x380>
    5e78:	01 fd       	sbrc	r16, 1
    5e7a:	03 c0       	rjmp	.+6      	; 0x5e82 <vfprintf+0x34e>
    5e7c:	88 e7       	ldi	r24, 0x78	; 120
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	02 c0       	rjmp	.+4      	; 0x5e86 <vfprintf+0x352>
    5e82:	88 e5       	ldi	r24, 0x58	; 88
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	b3 01       	movw	r22, r6
    5e88:	0c c0       	rjmp	.+24     	; 0x5ea2 <vfprintf+0x36e>
    5e8a:	80 2f       	mov	r24, r16
    5e8c:	86 78       	andi	r24, 0x86	; 134
    5e8e:	91 f0       	breq	.+36     	; 0x5eb4 <vfprintf+0x380>
    5e90:	01 ff       	sbrs	r16, 1
    5e92:	02 c0       	rjmp	.+4      	; 0x5e98 <vfprintf+0x364>
    5e94:	8b e2       	ldi	r24, 0x2B	; 43
    5e96:	01 c0       	rjmp	.+2      	; 0x5e9a <vfprintf+0x366>
    5e98:	80 e2       	ldi	r24, 0x20	; 32
    5e9a:	d7 fc       	sbrc	r13, 7
    5e9c:	8d e2       	ldi	r24, 0x2D	; 45
    5e9e:	b3 01       	movw	r22, r6
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5ea6:	06 c0       	rjmp	.+12     	; 0x5eb4 <vfprintf+0x380>
    5ea8:	b3 01       	movw	r22, r6
    5eaa:	80 e3       	ldi	r24, 0x30	; 48
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5eb2:	9a 94       	dec	r9
    5eb4:	f9 14       	cp	r15, r9
    5eb6:	c0 f3       	brcs	.-16     	; 0x5ea8 <vfprintf+0x374>
    5eb8:	fa 94       	dec	r15
    5eba:	f1 01       	movw	r30, r2
    5ebc:	ef 0d       	add	r30, r15
    5ebe:	f1 1d       	adc	r31, r1
    5ec0:	b3 01       	movw	r22, r6
    5ec2:	80 81       	ld	r24, Z
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5eca:	ff 20       	and	r15, r15
    5ecc:	a9 f7       	brne	.-22     	; 0x5eb8 <vfprintf+0x384>
    5ece:	06 c0       	rjmp	.+12     	; 0x5edc <vfprintf+0x3a8>
    5ed0:	b3 01       	movw	r22, r6
    5ed2:	80 e2       	ldi	r24, 0x20	; 32
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <fputc>
    5eda:	ca 94       	dec	r12
    5edc:	cc 20       	and	r12, r12
    5ede:	c1 f7       	brne	.-16     	; 0x5ed0 <vfprintf+0x39c>
    5ee0:	41 ce       	rjmp	.-894    	; 0x5b64 <vfprintf+0x30>
    5ee2:	f3 01       	movw	r30, r6
    5ee4:	66 81       	ldd	r22, Z+6	; 0x06
    5ee6:	77 81       	ldd	r23, Z+7	; 0x07
    5ee8:	cb 01       	movw	r24, r22
    5eea:	2b 96       	adiw	r28, 0x0b	; 11
    5eec:	e2 e1       	ldi	r30, 0x12	; 18
    5eee:	0c 94 4c 32 	jmp	0x6498	; 0x6498 <__epilogue_restores__>

00005ef2 <strnlen_P>:
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	05 90       	lpm	r0, Z+
    5ef6:	61 50       	subi	r22, 0x01	; 1
    5ef8:	70 40       	sbci	r23, 0x00	; 0
    5efa:	01 10       	cpse	r0, r1
    5efc:	d8 f7       	brcc	.-10     	; 0x5ef4 <strnlen_P+0x2>
    5efe:	80 95       	com	r24
    5f00:	90 95       	com	r25
    5f02:	8e 0f       	add	r24, r30
    5f04:	9f 1f       	adc	r25, r31
    5f06:	08 95       	ret

00005f08 <strnlen>:
    5f08:	fc 01       	movw	r30, r24
    5f0a:	61 50       	subi	r22, 0x01	; 1
    5f0c:	70 40       	sbci	r23, 0x00	; 0
    5f0e:	01 90       	ld	r0, Z+
    5f10:	01 10       	cpse	r0, r1
    5f12:	d8 f7       	brcc	.-10     	; 0x5f0a <strnlen+0x2>
    5f14:	80 95       	com	r24
    5f16:	90 95       	com	r25
    5f18:	8e 0f       	add	r24, r30
    5f1a:	9f 1f       	adc	r25, r31
    5f1c:	08 95       	ret

00005f1e <fputc>:
    5f1e:	0f 93       	push	r16
    5f20:	1f 93       	push	r17
    5f22:	cf 93       	push	r28
    5f24:	df 93       	push	r29
    5f26:	8c 01       	movw	r16, r24
    5f28:	eb 01       	movw	r28, r22
    5f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f2c:	81 ff       	sbrs	r24, 1
    5f2e:	1b c0       	rjmp	.+54     	; 0x5f66 <fputc+0x48>
    5f30:	82 ff       	sbrs	r24, 2
    5f32:	0d c0       	rjmp	.+26     	; 0x5f4e <fputc+0x30>
    5f34:	2e 81       	ldd	r18, Y+6	; 0x06
    5f36:	3f 81       	ldd	r19, Y+7	; 0x07
    5f38:	8c 81       	ldd	r24, Y+4	; 0x04
    5f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    5f3c:	28 17       	cp	r18, r24
    5f3e:	39 07       	cpc	r19, r25
    5f40:	64 f4       	brge	.+24     	; 0x5f5a <fputc+0x3c>
    5f42:	e8 81       	ld	r30, Y
    5f44:	f9 81       	ldd	r31, Y+1	; 0x01
    5f46:	01 93       	st	Z+, r16
    5f48:	f9 83       	std	Y+1, r31	; 0x01
    5f4a:	e8 83       	st	Y, r30
    5f4c:	06 c0       	rjmp	.+12     	; 0x5f5a <fputc+0x3c>
    5f4e:	e8 85       	ldd	r30, Y+8	; 0x08
    5f50:	f9 85       	ldd	r31, Y+9	; 0x09
    5f52:	80 2f       	mov	r24, r16
    5f54:	09 95       	icall
    5f56:	89 2b       	or	r24, r25
    5f58:	31 f4       	brne	.+12     	; 0x5f66 <fputc+0x48>
    5f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    5f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    5f5e:	01 96       	adiw	r24, 0x01	; 1
    5f60:	9f 83       	std	Y+7, r25	; 0x07
    5f62:	8e 83       	std	Y+6, r24	; 0x06
    5f64:	02 c0       	rjmp	.+4      	; 0x5f6a <fputc+0x4c>
    5f66:	0f ef       	ldi	r16, 0xFF	; 255
    5f68:	1f ef       	ldi	r17, 0xFF	; 255
    5f6a:	c8 01       	movw	r24, r16
    5f6c:	df 91       	pop	r29
    5f6e:	cf 91       	pop	r28
    5f70:	1f 91       	pop	r17
    5f72:	0f 91       	pop	r16
    5f74:	08 95       	ret

00005f76 <__ultoa_invert>:
    5f76:	fa 01       	movw	r30, r20
    5f78:	aa 27       	eor	r26, r26
    5f7a:	28 30       	cpi	r18, 0x08	; 8
    5f7c:	51 f1       	breq	.+84     	; 0x5fd2 <__ultoa_invert+0x5c>
    5f7e:	20 31       	cpi	r18, 0x10	; 16
    5f80:	81 f1       	breq	.+96     	; 0x5fe2 <__ultoa_invert+0x6c>
    5f82:	e8 94       	clt
    5f84:	6f 93       	push	r22
    5f86:	6e 7f       	andi	r22, 0xFE	; 254
    5f88:	6e 5f       	subi	r22, 0xFE	; 254
    5f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f8c:	8f 4f       	sbci	r24, 0xFF	; 255
    5f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5f90:	af 4f       	sbci	r26, 0xFF	; 255
    5f92:	b1 e0       	ldi	r27, 0x01	; 1
    5f94:	3e d0       	rcall	.+124    	; 0x6012 <__ultoa_invert+0x9c>
    5f96:	b4 e0       	ldi	r27, 0x04	; 4
    5f98:	3c d0       	rcall	.+120    	; 0x6012 <__ultoa_invert+0x9c>
    5f9a:	67 0f       	add	r22, r23
    5f9c:	78 1f       	adc	r23, r24
    5f9e:	89 1f       	adc	r24, r25
    5fa0:	9a 1f       	adc	r25, r26
    5fa2:	a1 1d       	adc	r26, r1
    5fa4:	68 0f       	add	r22, r24
    5fa6:	79 1f       	adc	r23, r25
    5fa8:	8a 1f       	adc	r24, r26
    5faa:	91 1d       	adc	r25, r1
    5fac:	a1 1d       	adc	r26, r1
    5fae:	6a 0f       	add	r22, r26
    5fb0:	71 1d       	adc	r23, r1
    5fb2:	81 1d       	adc	r24, r1
    5fb4:	91 1d       	adc	r25, r1
    5fb6:	a1 1d       	adc	r26, r1
    5fb8:	20 d0       	rcall	.+64     	; 0x5ffa <__ultoa_invert+0x84>
    5fba:	09 f4       	brne	.+2      	; 0x5fbe <__ultoa_invert+0x48>
    5fbc:	68 94       	set
    5fbe:	3f 91       	pop	r19
    5fc0:	2a e0       	ldi	r18, 0x0A	; 10
    5fc2:	26 9f       	mul	r18, r22
    5fc4:	11 24       	eor	r1, r1
    5fc6:	30 19       	sub	r19, r0
    5fc8:	30 5d       	subi	r19, 0xD0	; 208
    5fca:	31 93       	st	Z+, r19
    5fcc:	de f6       	brtc	.-74     	; 0x5f84 <__ultoa_invert+0xe>
    5fce:	cf 01       	movw	r24, r30
    5fd0:	08 95       	ret
    5fd2:	46 2f       	mov	r20, r22
    5fd4:	47 70       	andi	r20, 0x07	; 7
    5fd6:	40 5d       	subi	r20, 0xD0	; 208
    5fd8:	41 93       	st	Z+, r20
    5fda:	b3 e0       	ldi	r27, 0x03	; 3
    5fdc:	0f d0       	rcall	.+30     	; 0x5ffc <__ultoa_invert+0x86>
    5fde:	c9 f7       	brne	.-14     	; 0x5fd2 <__ultoa_invert+0x5c>
    5fe0:	f6 cf       	rjmp	.-20     	; 0x5fce <__ultoa_invert+0x58>
    5fe2:	46 2f       	mov	r20, r22
    5fe4:	4f 70       	andi	r20, 0x0F	; 15
    5fe6:	40 5d       	subi	r20, 0xD0	; 208
    5fe8:	4a 33       	cpi	r20, 0x3A	; 58
    5fea:	18 f0       	brcs	.+6      	; 0x5ff2 <__ultoa_invert+0x7c>
    5fec:	49 5d       	subi	r20, 0xD9	; 217
    5fee:	31 fd       	sbrc	r19, 1
    5ff0:	40 52       	subi	r20, 0x20	; 32
    5ff2:	41 93       	st	Z+, r20
    5ff4:	02 d0       	rcall	.+4      	; 0x5ffa <__ultoa_invert+0x84>
    5ff6:	a9 f7       	brne	.-22     	; 0x5fe2 <__ultoa_invert+0x6c>
    5ff8:	ea cf       	rjmp	.-44     	; 0x5fce <__ultoa_invert+0x58>
    5ffa:	b4 e0       	ldi	r27, 0x04	; 4
    5ffc:	a6 95       	lsr	r26
    5ffe:	97 95       	ror	r25
    6000:	87 95       	ror	r24
    6002:	77 95       	ror	r23
    6004:	67 95       	ror	r22
    6006:	ba 95       	dec	r27
    6008:	c9 f7       	brne	.-14     	; 0x5ffc <__ultoa_invert+0x86>
    600a:	00 97       	sbiw	r24, 0x00	; 0
    600c:	61 05       	cpc	r22, r1
    600e:	71 05       	cpc	r23, r1
    6010:	08 95       	ret
    6012:	9b 01       	movw	r18, r22
    6014:	ac 01       	movw	r20, r24
    6016:	0a 2e       	mov	r0, r26
    6018:	06 94       	lsr	r0
    601a:	57 95       	ror	r21
    601c:	47 95       	ror	r20
    601e:	37 95       	ror	r19
    6020:	27 95       	ror	r18
    6022:	ba 95       	dec	r27
    6024:	c9 f7       	brne	.-14     	; 0x6018 <__ultoa_invert+0xa2>
    6026:	62 0f       	add	r22, r18
    6028:	73 1f       	adc	r23, r19
    602a:	84 1f       	adc	r24, r20
    602c:	95 1f       	adc	r25, r21
    602e:	a0 1d       	adc	r26, r0
    6030:	08 95       	ret

00006032 <IntProlog>:
    6032:	df 93       	push	r29
    6034:	cf 93       	push	r28
    6036:	bf 93       	push	r27
    6038:	af 93       	push	r26
    603a:	9f 93       	push	r25
    603c:	d0 e1       	ldi	r29, 0x10	; 16
    603e:	cb e9       	ldi	r28, 0x9B	; 155
    6040:	9f b7       	in	r25, 0x3f	; 63
    6042:	ae 81       	ldd	r26, Y+6	; 0x06
    6044:	af 5f       	subi	r26, 0xFF	; 255
    6046:	ae 83       	std	Y+6, r26	; 0x06
    6048:	60 f0       	brcs	.+24     	; 0x6062 <SaveContext>
    604a:	aa 81       	ldd	r26, Y+2	; 0x02
    604c:	bb 81       	ldd	r27, Y+3	; 0x03
    604e:	ba 2b       	or	r27, r26
    6050:	41 f4       	brne	.+16     	; 0x6062 <SaveContext>
    6052:	cd b7       	in	r28, 0x3d	; 61
    6054:	de b7       	in	r29, 0x3e	; 62
    6056:	fe 81       	ldd	r31, Y+6	; 0x06
    6058:	ef 81       	ldd	r30, Y+7	; 0x07
    605a:	29 96       	adiw	r28, 0x09	; 9
    605c:	cd bf       	out	0x3d, r28	; 61
    605e:	de bf       	out	0x3e, r29	; 62
    6060:	09 94       	ijmp

00006062 <SaveContext>:
    6062:	8f 93       	push	r24
    6064:	7f 93       	push	r23
    6066:	6f 93       	push	r22
    6068:	5f 93       	push	r21
    606a:	4f 93       	push	r20
    606c:	3f 93       	push	r19
    606e:	2f 93       	push	r18
    6070:	1f 93       	push	r17
    6072:	0f 93       	push	r16
    6074:	ff 92       	push	r15
    6076:	ef 92       	push	r14
    6078:	df 92       	push	r13
    607a:	cf 92       	push	r12
    607c:	bf 92       	push	r11
    607e:	af 92       	push	r10
    6080:	9f 92       	push	r9
    6082:	8f 92       	push	r8
    6084:	7f 92       	push	r7
    6086:	6f 92       	push	r6
    6088:	5f 92       	push	r5
    608a:	4f 92       	push	r4
    608c:	3f 92       	push	r3
    608e:	2f 92       	push	r2
    6090:	1f 92       	push	r1
    6092:	0f 92       	push	r0
    6094:	9f 93       	push	r25
    6096:	cd b7       	in	r28, 0x3d	; 61
    6098:	de b7       	in	r29, 0x3e	; 62
    609a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    609c:	39 a1       	ldd	r19, Y+33	; 0x21
    609e:	48 a1       	ldd	r20, Y+32	; 0x20
    60a0:	e8 a3       	std	Y+32, r30	; 0x20
    60a2:	f9 a3       	std	Y+33, r31	; 0x21
    60a4:	70 f0       	brcs	.+28     	; 0x60c2 <AlreadyInKernel>
    60a6:	f0 e1       	ldi	r31, 0x10	; 16
    60a8:	eb e9       	ldi	r30, 0x9B	; 155
    60aa:	d3 81       	ldd	r29, Z+3	; 0x03
    60ac:	c2 81       	ldd	r28, Z+2	; 0x02
    60ae:	be b7       	in	r27, 0x3e	; 62
    60b0:	ad b7       	in	r26, 0x3d	; 61
    60b2:	bd 83       	std	Y+5, r27	; 0x05
    60b4:	ac 83       	std	Y+4, r26	; 0x04
    60b6:	24 81       	ldd	r18, Z+4	; 0x04
    60b8:	2d bf       	out	0x3d, r18	; 61
    60ba:	25 81       	ldd	r18, Z+5	; 0x05
    60bc:	2e bf       	out	0x3e, r18	; 62
    60be:	ca 2f       	mov	r28, r26
    60c0:	db 2f       	mov	r29, r27

000060c2 <AlreadyInKernel>:
    60c2:	11 24       	eor	r1, r1
    60c4:	e3 2f       	mov	r30, r19
    60c6:	f4 2f       	mov	r31, r20
    60c8:	09 94       	ijmp

000060ca <Epilog>:
    60ca:	ef 91       	pop	r30
    60cc:	ef 91       	pop	r30

000060ce <_Epilog>:
    60ce:	eb e9       	ldi	r30, 0x9B	; 155
    60d0:	f0 e1       	ldi	r31, 0x10	; 16
    60d2:	f8 94       	cli
    60d4:	06 81       	ldd	r16, Z+6	; 0x06
    60d6:	0a 95       	dec	r16
    60d8:	06 83       	std	Z+6, r16	; 0x06
    60da:	54 f4       	brge	.+20     	; 0x60f0 <SkipTaskSwap>
    60dc:	d1 81       	ldd	r29, Z+1	; 0x01
    60de:	c0 81       	ld	r28, Z
    60e0:	d3 83       	std	Z+3, r29	; 0x03
    60e2:	c2 83       	std	Z+2, r28	; 0x02
    60e4:	20 96       	adiw	r28, 0x00	; 0
    60e6:	39 f1       	breq	.+78     	; 0x6136 <_IdleTask>
    60e8:	bd 81       	ldd	r27, Y+5	; 0x05
    60ea:	ac 81       	ldd	r26, Y+4	; 0x04
    60ec:	ad bf       	out	0x3d, r26	; 61
    60ee:	be bf       	out	0x3e, r27	; 62

000060f0 <SkipTaskSwap>:
    60f0:	0f 90       	pop	r0
    60f2:	0f be       	out	0x3f, r0	; 63
    60f4:	0f 90       	pop	r0
    60f6:	1f 90       	pop	r1
    60f8:	2f 90       	pop	r2
    60fa:	3f 90       	pop	r3
    60fc:	4f 90       	pop	r4
    60fe:	5f 90       	pop	r5
    6100:	6f 90       	pop	r6
    6102:	7f 90       	pop	r7
    6104:	8f 90       	pop	r8
    6106:	9f 90       	pop	r9
    6108:	af 90       	pop	r10
    610a:	bf 90       	pop	r11
    610c:	cf 90       	pop	r12
    610e:	df 90       	pop	r13
    6110:	ef 90       	pop	r14
    6112:	ff 90       	pop	r15
    6114:	0f 91       	pop	r16
    6116:	1f 91       	pop	r17
    6118:	2f 91       	pop	r18
    611a:	3f 91       	pop	r19
    611c:	4f 91       	pop	r20
    611e:	5f 91       	pop	r21
    6120:	6f 91       	pop	r22
    6122:	7f 91       	pop	r23
    6124:	8f 91       	pop	r24
    6126:	9f 91       	pop	r25
    6128:	af 91       	pop	r26
    612a:	bf 91       	pop	r27
    612c:	cf 91       	pop	r28
    612e:	df 91       	pop	r29
    6130:	ef 91       	pop	r30
    6132:	ff 91       	pop	r31
    6134:	18 95       	reti

00006136 <_IdleTask>:
    6136:	78 94       	sei
    6138:	88 95       	sleep

0000613a <snooze>:
    613a:	fd cf       	rjmp	.-6      	; 0x6136 <_IdleTask>

0000613c <AvrXSetKernelStack>:
    613c:	ff 91       	pop	r31
    613e:	ef 91       	pop	r30
    6140:	80 50       	subi	r24, 0x00	; 0
    6142:	90 40       	sbci	r25, 0x00	; 0
    6144:	11 f4       	brne	.+4      	; 0x614a <sks1>
    6146:	8d b7       	in	r24, 0x3d	; 61
    6148:	9e b7       	in	r25, 0x3e	; 62

0000614a <sks1>:
    614a:	80 93 9f 10 	sts	0x109F, r24
    614e:	90 93 a0 10 	sts	0x10A0, r25
    6152:	09 94       	ijmp

00006154 <AvrXRunTask>:
    6154:	01 d0       	rcall	.+2      	; 0x6158 <AvrXInitTask>
    6156:	23 c0       	rjmp	.+70     	; 0x619e <AvrXResume>

00006158 <AvrXInitTask>:
    6158:	e8 2f       	mov	r30, r24
    615a:	f9 2f       	mov	r31, r25
    615c:	1d d0       	rcall	.+58     	; 0x6198 <lpm_inc>
    615e:	a0 2d       	mov	r26, r0
    6160:	1b d0       	rcall	.+54     	; 0x6198 <lpm_inc>
    6162:	b0 2d       	mov	r27, r0
    6164:	19 d0       	rcall	.+50     	; 0x6198 <lpm_inc>
    6166:	0c 92       	st	X, r0
    6168:	17 d0       	rcall	.+46     	; 0x6198 <lpm_inc>
    616a:	0e 92       	st	-X, r0
    616c:	40 e0       	ldi	r20, 0x00	; 0
    616e:	40 e0       	ldi	r20, 0x00	; 0
    6170:	51 e2       	ldi	r21, 0x21	; 33

00006172 <PushRegisters>:
    6172:	4e 93       	st	-X, r20
    6174:	5a 95       	dec	r21
    6176:	e9 f7       	brne	.-6      	; 0x6172 <PushRegisters>
    6178:	11 97       	sbiw	r26, 0x01	; 1
    617a:	0e d0       	rcall	.+28     	; 0x6198 <lpm_inc>
    617c:	80 2d       	mov	r24, r0
    617e:	0c d0       	rcall	.+24     	; 0x6198 <lpm_inc>
    6180:	90 2d       	mov	r25, r0
    6182:	0a d0       	rcall	.+20     	; 0x6198 <lpm_inc>
    6184:	e8 2f       	mov	r30, r24
    6186:	f9 2f       	mov	r31, r25
    6188:	a4 83       	std	Z+4, r26	; 0x04
    618a:	b5 83       	std	Z+5, r27	; 0x05
    618c:	03 82       	std	Z+3, r0	; 0x03
    618e:	a0 e6       	ldi	r26, 0x60	; 96
    6190:	a2 83       	std	Z+2, r26	; 0x02
    6192:	41 83       	std	Z+1, r20	; 0x01
    6194:	40 83       	st	Z, r20
    6196:	08 95       	ret

00006198 <lpm_inc>:
    6198:	c8 95       	lpm
    619a:	31 96       	adiw	r30, 0x01	; 1
    619c:	08 95       	ret

0000619e <AvrXResume>:
    619e:	f8 94       	cli
    61a0:	48 df       	rcall	.-368    	; 0x6032 <IntProlog>
    61a2:	78 94       	sei
    61a4:	e8 2f       	mov	r30, r24
    61a6:	f9 2f       	mov	r31, r25
    61a8:	22 81       	ldd	r18, Z+2	; 0x02
    61aa:	2f 7d       	andi	r18, 0xDF	; 223
    61ac:	22 83       	std	Z+2, r18	; 0x02
    61ae:	26 ff       	sbrs	r18, 6
    61b0:	03 c0       	rjmp	.+6      	; 0x61b8 <ar00>
    61b2:	2f 7b       	andi	r18, 0xBF	; 191
    61b4:	22 83       	std	Z+2, r18	; 0x02
    61b6:	01 d0       	rcall	.+2      	; 0x61ba <_QueuePid>

000061b8 <ar00>:
    61b8:	8a cf       	rjmp	.-236    	; 0x60ce <_Epilog>

000061ba <_QueuePid>:
    61ba:	e8 2f       	mov	r30, r24
    61bc:	f9 2f       	mov	r31, r25
    61be:	3f ef       	ldi	r19, 0xFF	; 255
    61c0:	22 81       	ldd	r18, Z+2	; 0x02
    61c2:	20 73       	andi	r18, 0x30	; 48
    61c4:	e1 f4       	brne	.+56     	; 0x61fe <_qpSUSPEND>
    61c6:	cf 93       	push	r28
    61c8:	df 93       	push	r29
    61ca:	43 81       	ldd	r20, Z+3	; 0x03
    61cc:	cb e9       	ldi	r28, 0x9B	; 155
    61ce:	d0 e1       	ldi	r29, 0x10	; 16
    61d0:	2f b7       	in	r18, 0x3f	; 63
    61d2:	f8 94       	cli

000061d4 <_qp00>:
    61d4:	33 95       	inc	r19
    61d6:	ec 2f       	mov	r30, r28
    61d8:	fd 2f       	mov	r31, r29
    61da:	c0 81       	ld	r28, Z
    61dc:	d1 81       	ldd	r29, Z+1	; 0x01
    61de:	20 96       	adiw	r28, 0x00	; 0
    61e0:	19 f0       	breq	.+6      	; 0x61e8 <_qp01>
    61e2:	5b 81       	ldd	r21, Y+3	; 0x03
    61e4:	45 17       	cp	r20, r21
    61e6:	b0 f7       	brcc	.-20     	; 0x61d4 <_qp00>

000061e8 <_qp01>:
    61e8:	91 83       	std	Z+1, r25	; 0x01
    61ea:	80 83       	st	Z, r24
    61ec:	f9 2f       	mov	r31, r25
    61ee:	e8 2f       	mov	r30, r24
    61f0:	d1 83       	std	Z+1, r29	; 0x01
    61f2:	c0 83       	st	Z, r28
    61f4:	df 91       	pop	r29
    61f6:	cf 91       	pop	r28
    61f8:	83 2f       	mov	r24, r19
    61fa:	2f bf       	out	0x3f, r18	; 63
    61fc:	08 95       	ret

000061fe <_qpSUSPEND>:
    61fe:	83 2f       	mov	r24, r19
    6200:	20 64       	ori	r18, 0x40	; 64
    6202:	22 83       	std	Z+2, r18	; 0x02
    6204:	08 95       	ret

00006206 <AvrXDelay>:
    6206:	01 d0       	rcall	.+2      	; 0x620a <AvrXStartTimer>
    6208:	6f c0       	rjmp	.+222    	; 0x62e8 <AvrXWaitMessageAck>

0000620a <AvrXStartTimer>:
    620a:	60 50       	subi	r22, 0x00	; 0
    620c:	70 40       	sbci	r23, 0x00	; 0
    620e:	09 f4       	brne	.+2      	; 0x6212 <CountNotZero>
    6210:	82 c0       	rjmp	.+260    	; 0x6316 <AvrXAckMessage>

00006212 <CountNotZero>:
    6212:	f8 94       	cli
    6214:	0e df       	rcall	.-484    	; 0x6032 <IntProlog>
    6216:	78 94       	sei
    6218:	e8 e9       	ldi	r30, 0x98	; 152
    621a:	f0 e1       	ldi	r31, 0x10	; 16
    621c:	f8 94       	cli
    621e:	20 91 9a 10 	lds	r18, 0x109A
    6222:	2a 95       	dec	r18
    6224:	20 93 9a 10 	sts	0x109A, r18
    6228:	78 94       	sei

0000622a <ast00>:
    622a:	ce 2f       	mov	r28, r30
    622c:	df 2f       	mov	r29, r31
    622e:	e8 81       	ld	r30, Y
    6230:	f9 81       	ldd	r31, Y+1	; 0x01
    6232:	30 96       	adiw	r30, 0x00	; 0
    6234:	59 f0       	breq	.+22     	; 0x624c <ast01>
    6236:	24 81       	ldd	r18, Z+4	; 0x04
    6238:	35 81       	ldd	r19, Z+5	; 0x05
    623a:	62 1b       	sub	r22, r18
    623c:	73 0b       	sbc	r23, r19
    623e:	a8 f7       	brcc	.-22     	; 0x622a <ast00>
    6240:	62 0f       	add	r22, r18
    6242:	73 1f       	adc	r23, r19
    6244:	26 1b       	sub	r18, r22
    6246:	37 0b       	sbc	r19, r23
    6248:	24 83       	std	Z+4, r18	; 0x04
    624a:	35 83       	std	Z+5, r19	; 0x05

0000624c <ast01>:
    624c:	99 83       	std	Y+1, r25	; 0x01
    624e:	88 83       	st	Y, r24
    6250:	d9 2f       	mov	r29, r25
    6252:	c8 2f       	mov	r28, r24
    6254:	f9 83       	std	Y+1, r31	; 0x01
    6256:	e8 83       	st	Y, r30
    6258:	6c 83       	std	Y+4, r22	; 0x04
    625a:	7d 83       	std	Y+5, r23	; 0x05
    625c:	3c d0       	rcall	.+120    	; 0x62d6 <TimerHandler>
    625e:	37 cf       	rjmp	.-402    	; 0x60ce <_Epilog>

00006260 <AvrXTimerHandler>:
    6260:	f8 94       	cli
    6262:	20 91 9a 10 	lds	r18, 0x109A
    6266:	21 50       	subi	r18, 0x01	; 1
    6268:	20 93 9a 10 	sts	0x109A, r18
    626c:	78 94       	sei
    626e:	08 f0       	brcs	.+2      	; 0x6272 <ati00>
    6270:	08 95       	ret

00006272 <ati00>:
    6272:	cf 93       	push	r28
    6274:	df 93       	push	r29
    6276:	af 93       	push	r26
    6278:	bf 93       	push	r27
    627a:	d0 91 99 10 	lds	r29, 0x1099
    627e:	c0 91 98 10 	lds	r28, 0x1098
    6282:	20 96       	adiw	r28, 0x00	; 0
    6284:	21 f1       	breq	.+72     	; 0x62ce <ati02>
    6286:	fd 81       	ldd	r31, Y+5	; 0x05
    6288:	ec 81       	ldd	r30, Y+4	; 0x04
    628a:	31 97       	sbiw	r30, 0x01	; 1
    628c:	fd 83       	std	Y+5, r31	; 0x05
    628e:	ec 83       	std	Y+4, r30	; 0x04

00006290 <ati01>:
    6290:	ef 2b       	or	r30, r31
    6292:	e9 f4       	brne	.+58     	; 0x62ce <ati02>
    6294:	a8 81       	ld	r26, Y
    6296:	b9 81       	ldd	r27, Y+1	; 0x01
    6298:	b0 93 99 10 	sts	0x1099, r27
    629c:	a0 93 98 10 	sts	0x1098, r26
    62a0:	f9 83       	std	Y+1, r31	; 0x01
    62a2:	e8 83       	st	Y, r30
    62a4:	8a 81       	ldd	r24, Y+2	; 0x02
    62a6:	9b 81       	ldd	r25, Y+3	; 0x03
    62a8:	82 50       	subi	r24, 0x02	; 2
    62aa:	90 40       	sbci	r25, 0x00	; 0
    62ac:	31 f4       	brne	.+12     	; 0x62ba <ati04>
    62ae:	8e 81       	ldd	r24, Y+6	; 0x06
    62b0:	9f 81       	ldd	r25, Y+7	; 0x07
    62b2:	7d 2f       	mov	r23, r29
    62b4:	6c 2f       	mov	r22, r28
    62b6:	8e d0       	rcall	.+284    	; 0x63d4 <AvrXIntSendMessage>
    62b8:	03 c0       	rjmp	.+6      	; 0x62c0 <ati03>

000062ba <ati04>:
    62ba:	8c 2f       	mov	r24, r28
    62bc:	9d 2f       	mov	r25, r29
    62be:	38 d0       	rcall	.+112    	; 0x6330 <AvrXIntSetObjectSemaphore>

000062c0 <ati03>:
    62c0:	10 96       	adiw	r26, 0x00	; 0
    62c2:	29 f0       	breq	.+10     	; 0x62ce <ati02>
    62c4:	ca 2f       	mov	r28, r26
    62c6:	db 2f       	mov	r29, r27
    62c8:	fd 81       	ldd	r31, Y+5	; 0x05
    62ca:	ec 81       	ldd	r30, Y+4	; 0x04
    62cc:	e1 cf       	rjmp	.-62     	; 0x6290 <ati01>

000062ce <ati02>:
    62ce:	bf 91       	pop	r27
    62d0:	af 91       	pop	r26
    62d2:	df 91       	pop	r29
    62d4:	cf 91       	pop	r28

000062d6 <TimerHandler>:
    62d6:	f8 94       	cli
    62d8:	20 91 9a 10 	lds	r18, 0x109A
    62dc:	23 95       	inc	r18
    62de:	20 93 9a 10 	sts	0x109A, r18
    62e2:	78 94       	sei
    62e4:	31 f6       	brne	.-116    	; 0x6272 <ati00>
    62e6:	08 95       	ret

000062e8 <AvrXWaitMessageAck>:
    62e8:	8e 5f       	subi	r24, 0xFE	; 254
    62ea:	9f 4f       	sbci	r25, 0xFF	; 255

000062ec <AvrXWaitSemaphore>:
    62ec:	e8 2f       	mov	r30, r24
    62ee:	f9 2f       	mov	r31, r25
    62f0:	f8 94       	cli
    62f2:	20 81       	ld	r18, Z
    62f4:	31 81       	ldd	r19, Z+1	; 0x01
    62f6:	21 50       	subi	r18, 0x01	; 1
    62f8:	30 40       	sbci	r19, 0x00	; 0
    62fa:	19 f4       	brne	.+6      	; 0x6302 <aws01>
    62fc:	20 83       	st	Z, r18
    62fe:	31 83       	std	Z+1, r19	; 0x01
    6300:	18 95       	reti

00006302 <aws01>:
    6302:	97 de       	rcall	.-722    	; 0x6032 <IntProlog>
    6304:	eb e9       	ldi	r30, 0x9B	; 155
    6306:	f0 e1       	ldi	r31, 0x10	; 16
    6308:	73 81       	ldd	r23, Z+3	; 0x03
    630a:	62 81       	ldd	r22, Z+2	; 0x02
    630c:	3c d0       	rcall	.+120    	; 0x6386 <_RemoveObject>
    630e:	e8 2f       	mov	r30, r24
    6310:	f9 2f       	mov	r31, r25
    6312:	2b d0       	rcall	.+86     	; 0x636a <_AppendObject>
    6314:	dc ce       	rjmp	.-584    	; 0x60ce <_Epilog>

00006316 <AvrXAckMessage>:
    6316:	8e 5f       	subi	r24, 0xFE	; 254
    6318:	9f 4f       	sbci	r25, 0xFF	; 255

0000631a <AvrXSetSemaphore>:
    631a:	0c d0       	rcall	.+24     	; 0x6334 <AvrXIntSetSemaphore>
    631c:	90 91 a1 10 	lds	r25, 0x10A1
    6320:	93 95       	inc	r25
    6322:	89 2b       	or	r24, r25
    6324:	09 f0       	breq	.+2      	; 0x6328 <axss0>
    6326:	08 95       	ret

00006328 <axss0>:
    6328:	f8 94       	cli
    632a:	83 de       	rcall	.-762    	; 0x6032 <IntProlog>
    632c:	78 94       	sei
    632e:	cf ce       	rjmp	.-610    	; 0x60ce <_Epilog>

00006330 <AvrXIntSetObjectSemaphore>:
    6330:	8e 5f       	subi	r24, 0xFE	; 254
    6332:	9f 4f       	sbci	r25, 0xFF	; 255

00006334 <AvrXIntSetSemaphore>:
    6334:	e8 2f       	mov	r30, r24
    6336:	f9 2f       	mov	r31, r25
    6338:	81 e0       	ldi	r24, 0x01	; 1
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	2f b7       	in	r18, 0x3f	; 63
    633e:	f8 94       	cli
    6340:	71 81       	ldd	r23, Z+1	; 0x01
    6342:	60 81       	ld	r22, Z
    6344:	86 17       	cp	r24, r22
    6346:	97 07       	cpc	r25, r23
    6348:	28 f0       	brcs	.+10     	; 0x6354 <aiss00>
    634a:	80 83       	st	Z, r24
    634c:	91 83       	std	Z+1, r25	; 0x01

0000634e <BogusSemaphore>:
    634e:	8f ef       	ldi	r24, 0xFF	; 255
    6350:	2f bf       	out	0x3f, r18	; 63
    6352:	08 95       	ret

00006354 <aiss00>:
    6354:	8f e5       	ldi	r24, 0x5F	; 95
    6356:	86 17       	cp	r24, r22
    6358:	97 07       	cpc	r25, r23
    635a:	c8 f7       	brcc	.-14     	; 0x634e <BogusSemaphore>
    635c:	23 d0       	rcall	.+70     	; 0x63a4 <_RemoveObjectAt>
    635e:	2f bf       	out	0x3f, r18	; 63
    6360:	86 2f       	mov	r24, r22
    6362:	97 2f       	mov	r25, r23
    6364:	2a cf       	rjmp	.-428    	; 0x61ba <_QueuePid>

00006366 <_ao00>:
    6366:	e2 2f       	mov	r30, r18
    6368:	f3 2f       	mov	r31, r19

0000636a <_AppendObject>:
    636a:	20 81       	ld	r18, Z
    636c:	31 81       	ldd	r19, Z+1	; 0x01
    636e:	20 50       	subi	r18, 0x00	; 0
    6370:	30 40       	sbci	r19, 0x00	; 0
    6372:	c9 f7       	brne	.-14     	; 0x6366 <_ao00>
    6374:	71 83       	std	Z+1, r23	; 0x01
    6376:	60 83       	st	Z, r22
    6378:	f7 2f       	mov	r31, r23
    637a:	e6 2f       	mov	r30, r22
    637c:	31 83       	std	Z+1, r19	; 0x01
    637e:	20 83       	st	Z, r18
    6380:	08 95       	ret

00006382 <_ro00>:
    6382:	f3 2f       	mov	r31, r19
    6384:	e2 2f       	mov	r30, r18

00006386 <_RemoveObject>:
    6386:	20 81       	ld	r18, Z
    6388:	31 81       	ldd	r19, Z+1	; 0x01
    638a:	62 17       	cp	r22, r18
    638c:	73 07       	cpc	r23, r19
    638e:	51 f0       	breq	.+20     	; 0x63a4 <_RemoveObjectAt>
    6390:	20 50       	subi	r18, 0x00	; 0
    6392:	30 40       	sbci	r19, 0x00	; 0
    6394:	b1 f7       	brne	.-20     	; 0x6382 <_ro00>
    6396:	08 95       	ret

00006398 <_RemoveFirstObject>:
    6398:	60 81       	ld	r22, Z
    639a:	71 81       	ldd	r23, Z+1	; 0x01
    639c:	60 50       	subi	r22, 0x00	; 0
    639e:	70 40       	sbci	r23, 0x00	; 0
    63a0:	09 f4       	brne	.+2      	; 0x63a4 <_RemoveObjectAt>
    63a2:	08 95       	ret

000063a4 <_RemoveObjectAt>:
    63a4:	4c 2f       	mov	r20, r28
    63a6:	5d 2f       	mov	r21, r29
    63a8:	c6 2f       	mov	r28, r22
    63aa:	d7 2f       	mov	r29, r23
    63ac:	79 81       	ldd	r23, Y+1	; 0x01
    63ae:	68 81       	ld	r22, Y
    63b0:	71 83       	std	Z+1, r23	; 0x01
    63b2:	60 83       	st	Z, r22
    63b4:	e6 2f       	mov	r30, r22
    63b6:	f7 2f       	mov	r31, r23
    63b8:	66 27       	eor	r22, r22
    63ba:	68 83       	st	Y, r22
    63bc:	69 83       	std	Y+1, r22	; 0x01
    63be:	7d 2f       	mov	r23, r29
    63c0:	6c 2f       	mov	r22, r28
    63c2:	c4 2f       	mov	r28, r20
    63c4:	d5 2f       	mov	r29, r21
    63c6:	98 94       	clz
    63c8:	08 95       	ret

000063ca <AvrXSendMessage>:
    63ca:	f8 94       	cli
    63cc:	32 de       	rcall	.-924    	; 0x6032 <IntProlog>
    63ce:	78 94       	sei
    63d0:	01 d0       	rcall	.+2      	; 0x63d4 <AvrXIntSendMessage>
    63d2:	7d ce       	rjmp	.-774    	; 0x60ce <_Epilog>

000063d4 <AvrXIntSendMessage>:
    63d4:	f9 2f       	mov	r31, r25
    63d6:	e8 2f       	mov	r30, r24
    63d8:	4f b7       	in	r20, 0x3f	; 63
    63da:	f8 94       	cli
    63dc:	c6 df       	rcall	.-116    	; 0x636a <_AppendObject>
    63de:	4f bf       	out	0x3f, r20	; 63
    63e0:	a7 cf       	rjmp	.-178    	; 0x6330 <AvrXIntSetObjectSemaphore>

000063e2 <AvrXWaitMessage>:
    63e2:	e8 2f       	mov	r30, r24
    63e4:	f9 2f       	mov	r31, r25
    63e6:	f8 94       	cli
    63e8:	d7 df       	rcall	.-82     	; 0x6398 <_RemoveFirstObject>
    63ea:	78 94       	sei
    63ec:	21 f4       	brne	.+8      	; 0x63f6 <_rm01>
    63ee:	7c df       	rcall	.-264    	; 0x62e8 <AvrXWaitMessageAck>
    63f0:	82 50       	subi	r24, 0x02	; 2
    63f2:	90 40       	sbci	r25, 0x00	; 0
    63f4:	f6 cf       	rjmp	.-20     	; 0x63e2 <AvrXWaitMessage>

000063f6 <_rm01>:
    63f6:	03 d0       	rcall	.+6      	; 0x63fe <AvrXIntResetObjectSemaphore>
    63f8:	86 2f       	mov	r24, r22
    63fa:	97 2f       	mov	r25, r23
    63fc:	08 95       	ret

000063fe <AvrXIntResetObjectSemaphore>:
    63fe:	e8 2f       	mov	r30, r24
    6400:	f9 2f       	mov	r31, r25
    6402:	32 96       	adiw	r30, 0x02	; 2
    6404:	02 c0       	rjmp	.+4      	; 0x640a <ars00>

00006406 <AvrXIntResetSemaphore>:
    6406:	f9 2f       	mov	r31, r25
    6408:	e8 2f       	mov	r30, r24

0000640a <ars00>:
    640a:	f8 94       	cli
    640c:	40 81       	ld	r20, Z
    640e:	51 81       	ldd	r21, Z+1	; 0x01
    6410:	41 50       	subi	r20, 0x01	; 1
    6412:	50 40       	sbci	r21, 0x00	; 0
    6414:	11 f0       	breq	.+4      	; 0x641a <ars01>
    6416:	4f 5f       	subi	r20, 0xFF	; 255
    6418:	5f 4f       	sbci	r21, 0xFF	; 255

0000641a <ars01>:
    641a:	51 83       	std	Z+1, r21	; 0x01
    641c:	40 83       	st	Z, r20
    641e:	18 95       	reti

00006420 <__udivmodqi4>:
    6420:	99 1b       	sub	r25, r25
    6422:	79 e0       	ldi	r23, 0x09	; 9
    6424:	04 c0       	rjmp	.+8      	; 0x642e <__udivmodqi4_ep>

00006426 <__udivmodqi4_loop>:
    6426:	99 1f       	adc	r25, r25
    6428:	96 17       	cp	r25, r22
    642a:	08 f0       	brcs	.+2      	; 0x642e <__udivmodqi4_ep>
    642c:	96 1b       	sub	r25, r22

0000642e <__udivmodqi4_ep>:
    642e:	88 1f       	adc	r24, r24
    6430:	7a 95       	dec	r23
    6432:	c9 f7       	brne	.-14     	; 0x6426 <__udivmodqi4_loop>
    6434:	80 95       	com	r24
    6436:	08 95       	ret

00006438 <__udivmodhi4>:
    6438:	aa 1b       	sub	r26, r26
    643a:	bb 1b       	sub	r27, r27
    643c:	51 e1       	ldi	r21, 0x11	; 17
    643e:	07 c0       	rjmp	.+14     	; 0x644e <__udivmodhi4_ep>

00006440 <__udivmodhi4_loop>:
    6440:	aa 1f       	adc	r26, r26
    6442:	bb 1f       	adc	r27, r27
    6444:	a6 17       	cp	r26, r22
    6446:	b7 07       	cpc	r27, r23
    6448:	10 f0       	brcs	.+4      	; 0x644e <__udivmodhi4_ep>
    644a:	a6 1b       	sub	r26, r22
    644c:	b7 0b       	sbc	r27, r23

0000644e <__udivmodhi4_ep>:
    644e:	88 1f       	adc	r24, r24
    6450:	99 1f       	adc	r25, r25
    6452:	5a 95       	dec	r21
    6454:	a9 f7       	brne	.-22     	; 0x6440 <__udivmodhi4_loop>
    6456:	80 95       	com	r24
    6458:	90 95       	com	r25
    645a:	bc 01       	movw	r22, r24
    645c:	cd 01       	movw	r24, r26
    645e:	08 95       	ret

00006460 <__prologue_saves__>:
    6460:	2f 92       	push	r2
    6462:	3f 92       	push	r3
    6464:	4f 92       	push	r4
    6466:	5f 92       	push	r5
    6468:	6f 92       	push	r6
    646a:	7f 92       	push	r7
    646c:	8f 92       	push	r8
    646e:	9f 92       	push	r9
    6470:	af 92       	push	r10
    6472:	bf 92       	push	r11
    6474:	cf 92       	push	r12
    6476:	df 92       	push	r13
    6478:	ef 92       	push	r14
    647a:	ff 92       	push	r15
    647c:	0f 93       	push	r16
    647e:	1f 93       	push	r17
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
    6488:	ca 1b       	sub	r28, r26
    648a:	db 0b       	sbc	r29, r27
    648c:	0f b6       	in	r0, 0x3f	; 63
    648e:	f8 94       	cli
    6490:	de bf       	out	0x3e, r29	; 62
    6492:	0f be       	out	0x3f, r0	; 63
    6494:	cd bf       	out	0x3d, r28	; 61
    6496:	09 94       	ijmp

00006498 <__epilogue_restores__>:
    6498:	2a 88       	ldd	r2, Y+18	; 0x12
    649a:	39 88       	ldd	r3, Y+17	; 0x11
    649c:	48 88       	ldd	r4, Y+16	; 0x10
    649e:	5f 84       	ldd	r5, Y+15	; 0x0f
    64a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    64a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    64a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    64a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    64a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    64aa:	b9 84       	ldd	r11, Y+9	; 0x09
    64ac:	c8 84       	ldd	r12, Y+8	; 0x08
    64ae:	df 80       	ldd	r13, Y+7	; 0x07
    64b0:	ee 80       	ldd	r14, Y+6	; 0x06
    64b2:	fd 80       	ldd	r15, Y+5	; 0x05
    64b4:	0c 81       	ldd	r16, Y+4	; 0x04
    64b6:	1b 81       	ldd	r17, Y+3	; 0x03
    64b8:	aa 81       	ldd	r26, Y+2	; 0x02
    64ba:	b9 81       	ldd	r27, Y+1	; 0x01
    64bc:	ce 0f       	add	r28, r30
    64be:	d1 1d       	adc	r29, r1
    64c0:	0f b6       	in	r0, 0x3f	; 63
    64c2:	f8 94       	cli
    64c4:	de bf       	out	0x3e, r29	; 62
    64c6:	0f be       	out	0x3f, r0	; 63
    64c8:	cd bf       	out	0x3d, r28	; 61
    64ca:	ed 01       	movw	r28, r26
    64cc:	08 95       	ret

000064ce <_exit>:
    64ce:	f8 94       	cli

000064d0 <__stop_program>:
    64d0:	ff cf       	rjmp	.-2      	; 0x64d0 <__stop_program>
